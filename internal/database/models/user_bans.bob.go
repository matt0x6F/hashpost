// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// UserBan is an object representing the database table.
type UserBan struct {
	BanID               int64               `db:"ban_id,pk" scan:"ban_id" json:"ban_id"`
	SubforumID          int32               `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	BannedUserID        int64               `db:"banned_user_id" scan:"banned_user_id" json:"banned_user_id"`
	BannedByUserID      int64               `db:"banned_by_user_id" scan:"banned_by_user_id" json:"banned_by_user_id"`
	BannedByPseudonymID string              `db:"banned_by_pseudonym_id" scan:"banned_by_pseudonym_id" json:"banned_by_pseudonym_id"`
	BanReason           string              `db:"ban_reason" scan:"ban_reason" json:"ban_reason"`
	IsPermanent         sql.Null[bool]      `db:"is_permanent" scan:"is_permanent" json:"is_permanent"`
	ExpiresAt           sql.Null[time.Time] `db:"expires_at" scan:"expires_at" json:"expires_at"`
	CreatedAt           sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
	IsActive            sql.Null[bool]      `db:"is_active" scan:"is_active" json:"is_active"`

	R userBanR `db:"-" scan:"rel" json:"rel"`
}

// UserBanSlice is an alias for a slice of pointers to UserBan.
// This should almost always be used instead of []*UserBan.
type UserBanSlice []*UserBan

// UserBans contains methods to work with the user_bans table
var UserBans = psql.NewTablex[*UserBan, UserBanSlice, *UserBanSetter]("", "user_bans")

// UserBansQuery is a query on the user_bans table
type UserBansQuery = *psql.ViewQuery[*UserBan, UserBanSlice]

// userBanR is where relationships are stored.
type userBanR struct {
	BannedByPseudonymPseudonym *Pseudonym `scan:"BannedByPseudonymPseudonym" json:"BannedByPseudonymPseudonym"` // user_bans.user_bans_banned_by_pseudonym_id_fkey
	BannedByUserUser           *User      `scan:"BannedByUserUser" json:"BannedByUserUser"`                     // user_bans.user_bans_banned_by_user_id_fkey
	BannedUserUser             *User      `scan:"BannedUserUser" json:"BannedUserUser"`                         // user_bans.user_bans_banned_user_id_fkey
	Subforum                   *Subforum  `scan:"Subforum" json:"Subforum"`                                     // user_bans.user_bans_subforum_id_fkey
}

type userBanColumnNames struct {
	BanID               string
	SubforumID          string
	BannedUserID        string
	BannedByUserID      string
	BannedByPseudonymID string
	BanReason           string
	IsPermanent         string
	ExpiresAt           string
	CreatedAt           string
	IsActive            string
}

var UserBanColumns = buildUserBanColumns("user_bans")

type userBanColumns struct {
	tableAlias          string
	BanID               psql.Expression
	SubforumID          psql.Expression
	BannedUserID        psql.Expression
	BannedByUserID      psql.Expression
	BannedByPseudonymID psql.Expression
	BanReason           psql.Expression
	IsPermanent         psql.Expression
	ExpiresAt           psql.Expression
	CreatedAt           psql.Expression
	IsActive            psql.Expression
}

func (c userBanColumns) Alias() string {
	return c.tableAlias
}

func (userBanColumns) AliasedAs(alias string) userBanColumns {
	return buildUserBanColumns(alias)
}

func buildUserBanColumns(alias string) userBanColumns {
	return userBanColumns{
		tableAlias:          alias,
		BanID:               psql.Quote(alias, "ban_id"),
		SubforumID:          psql.Quote(alias, "subforum_id"),
		BannedUserID:        psql.Quote(alias, "banned_user_id"),
		BannedByUserID:      psql.Quote(alias, "banned_by_user_id"),
		BannedByPseudonymID: psql.Quote(alias, "banned_by_pseudonym_id"),
		BanReason:           psql.Quote(alias, "ban_reason"),
		IsPermanent:         psql.Quote(alias, "is_permanent"),
		ExpiresAt:           psql.Quote(alias, "expires_at"),
		CreatedAt:           psql.Quote(alias, "created_at"),
		IsActive:            psql.Quote(alias, "is_active"),
	}
}

type userBanWhere[Q psql.Filterable] struct {
	BanID               psql.WhereMod[Q, int64]
	SubforumID          psql.WhereMod[Q, int32]
	BannedUserID        psql.WhereMod[Q, int64]
	BannedByUserID      psql.WhereMod[Q, int64]
	BannedByPseudonymID psql.WhereMod[Q, string]
	BanReason           psql.WhereMod[Q, string]
	IsPermanent         psql.WhereNullMod[Q, bool]
	ExpiresAt           psql.WhereNullMod[Q, time.Time]
	CreatedAt           psql.WhereNullMod[Q, time.Time]
	IsActive            psql.WhereNullMod[Q, bool]
}

func (userBanWhere[Q]) AliasedAs(alias string) userBanWhere[Q] {
	return buildUserBanWhere[Q](buildUserBanColumns(alias))
}

func buildUserBanWhere[Q psql.Filterable](cols userBanColumns) userBanWhere[Q] {
	return userBanWhere[Q]{
		BanID:               psql.Where[Q, int64](cols.BanID),
		SubforumID:          psql.Where[Q, int32](cols.SubforumID),
		BannedUserID:        psql.Where[Q, int64](cols.BannedUserID),
		BannedByUserID:      psql.Where[Q, int64](cols.BannedByUserID),
		BannedByPseudonymID: psql.Where[Q, string](cols.BannedByPseudonymID),
		BanReason:           psql.Where[Q, string](cols.BanReason),
		IsPermanent:         psql.WhereNull[Q, bool](cols.IsPermanent),
		ExpiresAt:           psql.WhereNull[Q, time.Time](cols.ExpiresAt),
		CreatedAt:           psql.WhereNull[Q, time.Time](cols.CreatedAt),
		IsActive:            psql.WhereNull[Q, bool](cols.IsActive),
	}
}

var UserBanErrors = &userBanErrors{
	ErrUniqueUserBansPkey: &UniqueConstraintError{
		schema:  "",
		table:   "user_bans",
		columns: []string{"ban_id"},
		s:       "user_bans_pkey",
	},
}

type userBanErrors struct {
	ErrUniqueUserBansPkey *UniqueConstraintError
}

// UserBanSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserBanSetter struct {
	BanID               *int64               `db:"ban_id,pk" scan:"ban_id" json:"ban_id"`
	SubforumID          *int32               `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	BannedUserID        *int64               `db:"banned_user_id" scan:"banned_user_id" json:"banned_user_id"`
	BannedByUserID      *int64               `db:"banned_by_user_id" scan:"banned_by_user_id" json:"banned_by_user_id"`
	BannedByPseudonymID *string              `db:"banned_by_pseudonym_id" scan:"banned_by_pseudonym_id" json:"banned_by_pseudonym_id"`
	BanReason           *string              `db:"ban_reason" scan:"ban_reason" json:"ban_reason"`
	IsPermanent         *sql.Null[bool]      `db:"is_permanent" scan:"is_permanent" json:"is_permanent"`
	ExpiresAt           *sql.Null[time.Time] `db:"expires_at" scan:"expires_at" json:"expires_at"`
	CreatedAt           *sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
	IsActive            *sql.Null[bool]      `db:"is_active" scan:"is_active" json:"is_active"`
}

func (s UserBanSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.BanID != nil {
		vals = append(vals, "ban_id")
	}

	if s.SubforumID != nil {
		vals = append(vals, "subforum_id")
	}

	if s.BannedUserID != nil {
		vals = append(vals, "banned_user_id")
	}

	if s.BannedByUserID != nil {
		vals = append(vals, "banned_by_user_id")
	}

	if s.BannedByPseudonymID != nil {
		vals = append(vals, "banned_by_pseudonym_id")
	}

	if s.BanReason != nil {
		vals = append(vals, "ban_reason")
	}

	if s.IsPermanent != nil {
		vals = append(vals, "is_permanent")
	}

	if s.ExpiresAt != nil {
		vals = append(vals, "expires_at")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.IsActive != nil {
		vals = append(vals, "is_active")
	}

	return vals
}

func (s UserBanSetter) Overwrite(t *UserBan) {
	if s.BanID != nil {
		t.BanID = *s.BanID
	}
	if s.SubforumID != nil {
		t.SubforumID = *s.SubforumID
	}
	if s.BannedUserID != nil {
		t.BannedUserID = *s.BannedUserID
	}
	if s.BannedByUserID != nil {
		t.BannedByUserID = *s.BannedByUserID
	}
	if s.BannedByPseudonymID != nil {
		t.BannedByPseudonymID = *s.BannedByPseudonymID
	}
	if s.BanReason != nil {
		t.BanReason = *s.BanReason
	}
	if s.IsPermanent != nil {
		t.IsPermanent = *s.IsPermanent
	}
	if s.ExpiresAt != nil {
		t.ExpiresAt = *s.ExpiresAt
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.IsActive != nil {
		t.IsActive = *s.IsActive
	}
}

func (s *UserBanSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserBans.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.BanID != nil {
			vals[0] = psql.Arg(*s.BanID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.SubforumID != nil {
			vals[1] = psql.Arg(*s.SubforumID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.BannedUserID != nil {
			vals[2] = psql.Arg(*s.BannedUserID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.BannedByUserID != nil {
			vals[3] = psql.Arg(*s.BannedByUserID)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.BannedByPseudonymID != nil {
			vals[4] = psql.Arg(*s.BannedByPseudonymID)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.BanReason != nil {
			vals[5] = psql.Arg(*s.BanReason)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.IsPermanent != nil {
			vals[6] = psql.Arg(*s.IsPermanent)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.ExpiresAt != nil {
			vals[7] = psql.Arg(*s.ExpiresAt)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[8] = psql.Arg(*s.CreatedAt)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.IsActive != nil {
			vals[9] = psql.Arg(*s.IsActive)
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserBanSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserBanSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.BanID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ban_id")...),
			psql.Arg(s.BanID),
		}})
	}

	if s.SubforumID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "subforum_id")...),
			psql.Arg(s.SubforumID),
		}})
	}

	if s.BannedUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "banned_user_id")...),
			psql.Arg(s.BannedUserID),
		}})
	}

	if s.BannedByUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "banned_by_user_id")...),
			psql.Arg(s.BannedByUserID),
		}})
	}

	if s.BannedByPseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "banned_by_pseudonym_id")...),
			psql.Arg(s.BannedByPseudonymID),
		}})
	}

	if s.BanReason != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ban_reason")...),
			psql.Arg(s.BanReason),
		}})
	}

	if s.IsPermanent != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_permanent")...),
			psql.Arg(s.IsPermanent),
		}})
	}

	if s.ExpiresAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "expires_at")...),
			psql.Arg(s.ExpiresAt),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.IsActive != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_active")...),
			psql.Arg(s.IsActive),
		}})
	}

	return exprs
}

// FindUserBan retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserBan(ctx context.Context, exec bob.Executor, BanIDPK int64, cols ...string) (*UserBan, error) {
	if len(cols) == 0 {
		return UserBans.Query(
			SelectWhere.UserBans.BanID.EQ(BanIDPK),
		).One(ctx, exec)
	}

	return UserBans.Query(
		SelectWhere.UserBans.BanID.EQ(BanIDPK),
		sm.Columns(UserBans.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserBanExists checks the presence of a single record by primary key
func UserBanExists(ctx context.Context, exec bob.Executor, BanIDPK int64) (bool, error) {
	return UserBans.Query(
		SelectWhere.UserBans.BanID.EQ(BanIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserBan is retrieved from the database
func (o *UserBan) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserBans.AfterSelectHooks.RunHooks(ctx, exec, UserBanSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserBans.AfterInsertHooks.RunHooks(ctx, exec, UserBanSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserBans.AfterUpdateHooks.RunHooks(ctx, exec, UserBanSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserBans.AfterDeleteHooks.RunHooks(ctx, exec, UserBanSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the UserBan
func (o *UserBan) primaryKeyVals() bob.Expression {
	return psql.Arg(o.BanID)
}

func (o *UserBan) pkEQ() dialect.Expression {
	return psql.Quote("user_bans", "ban_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserBan
func (o *UserBan) Update(ctx context.Context, exec bob.Executor, s *UserBanSetter) error {
	v, err := UserBans.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserBan record with an executor
func (o *UserBan) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserBans.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserBan using the executor
func (o *UserBan) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserBans.Query(
		SelectWhere.UserBans.BanID.EQ(o.BanID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserBanSlice is retrieved from the database
func (o UserBanSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserBans.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserBans.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserBans.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserBans.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserBanSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_bans", "ban_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserBanSlice) copyMatchingRows(from ...*UserBan) {
	for i, old := range o {
		for _, new := range from {
			if new.BanID != old.BanID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserBanSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserBans.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserBan:
				o.copyMatchingRows(retrieved)
			case []*UserBan:
				o.copyMatchingRows(retrieved...)
			case UserBanSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserBan or a slice of UserBan
				// then run the AfterUpdateHooks on the slice
				_, err = UserBans.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserBanSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserBans.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserBan:
				o.copyMatchingRows(retrieved)
			case []*UserBan:
				o.copyMatchingRows(retrieved...)
			case UserBanSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserBan or a slice of UserBan
				// then run the AfterDeleteHooks on the slice
				_, err = UserBans.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserBanSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserBanSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserBans.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserBanSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserBans.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserBanSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserBans.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userBanJoins[Q dialect.Joinable] struct {
	typ                        string
	BannedByPseudonymPseudonym modAs[Q, pseudonymColumns]
	BannedByUserUser           modAs[Q, userColumns]
	BannedUserUser             modAs[Q, userColumns]
	Subforum                   modAs[Q, subforumColumns]
}

func (j userBanJoins[Q]) aliasedAs(alias string) userBanJoins[Q] {
	return buildUserBanJoins[Q](buildUserBanColumns(alias), j.typ)
}

func buildUserBanJoins[Q dialect.Joinable](cols userBanColumns, typ string) userBanJoins[Q] {
	return userBanJoins[Q]{
		typ: typ,
		BannedByPseudonymPseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.BannedByPseudonymID),
					))
				}

				return mods
			},
		},
		BannedByUserUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.BannedByUserID),
					))
				}

				return mods
			},
		},
		BannedUserUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.BannedUserID),
					))
				}

				return mods
			},
		},
		Subforum: modAs[Q, subforumColumns]{
			c: SubforumColumns,
			f: func(to subforumColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Subforums.Name().As(to.Alias())).On(
						to.SubforumID.EQ(cols.SubforumID),
					))
				}

				return mods
			},
		},
	}
}

// BannedByPseudonymPseudonym starts a query for related objects on pseudonyms
func (o *UserBan) BannedByPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.BannedByPseudonymID))),
	)...)
}

func (os UserBanSlice) BannedByPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkBannedByPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkBannedByPseudonymID[i] = o.BannedByPseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkBannedByPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

// BannedByUserUser starts a query for related objects on users
func (o *UserBan) BannedByUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.BannedByUserID))),
	)...)
}

func (os UserBanSlice) BannedByUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkBannedByUserID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkBannedByUserID[i] = o.BannedByUserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkBannedByUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// BannedUserUser starts a query for related objects on users
func (o *UserBan) BannedUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.BannedUserID))),
	)...)
}

func (os UserBanSlice) BannedUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkBannedUserID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkBannedUserID[i] = o.BannedUserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkBannedUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Subforum starts a query for related objects on subforums
func (o *UserBan) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	return Subforums.Query(append(mods,
		sm.Where(SubforumColumns.SubforumID.EQ(psql.Arg(o.SubforumID))),
	)...)
}

func (os UserBanSlice) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	pkSubforumID := make(pgtypes.Array[int32], len(os))
	for i, o := range os {
		pkSubforumID[i] = o.SubforumID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkSubforumID), "integer[]")),
	))

	return Subforums.Query(append(mods,
		sm.Where(psql.Group(SubforumColumns.SubforumID).OP("IN", PKArgExpr)),
	)...)
}

func (o *UserBan) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "BannedByPseudonymPseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("userBan cannot load %T as %q", retrieved, name)
		}

		o.R.BannedByPseudonymPseudonym = rel

		if rel != nil {
			rel.R.BannedByPseudonymUserBans = UserBanSlice{o}
		}
		return nil
	case "BannedByUserUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userBan cannot load %T as %q", retrieved, name)
		}

		o.R.BannedByUserUser = rel

		if rel != nil {
			rel.R.BannedByUserUserBans = UserBanSlice{o}
		}
		return nil
	case "BannedUserUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userBan cannot load %T as %q", retrieved, name)
		}

		o.R.BannedUserUser = rel

		if rel != nil {
			rel.R.BannedUserUserBans = UserBanSlice{o}
		}
		return nil
	case "Subforum":
		rel, ok := retrieved.(*Subforum)
		if !ok {
			return fmt.Errorf("userBan cannot load %T as %q", retrieved, name)
		}

		o.R.Subforum = rel

		if rel != nil {
			rel.R.UserBans = UserBanSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("userBan has no relationship %q", name)
	}
}

type userBanPreloader struct {
	BannedByPseudonymPseudonym func(...psql.PreloadOption) psql.Preloader
	BannedByUserUser           func(...psql.PreloadOption) psql.Preloader
	BannedUserUser             func(...psql.PreloadOption) psql.Preloader
	Subforum                   func(...psql.PreloadOption) psql.Preloader
}

func buildUserBanPreloader() userBanPreloader {
	return userBanPreloader{
		BannedByPseudonymPseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "BannedByPseudonymPseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBans,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.UserBans.BannedByPseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
		BannedByUserUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "BannedByUserUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBans,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.UserBans.BannedByUserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
		BannedUserUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "BannedUserUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBans,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.UserBans.BannedUserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
		Subforum: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Subforum, SubforumSlice](orm.Relationship{
				Name: "Subforum",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBans,
						To:   TableNames.Subforums,
						FromColumns: []string{
							ColumnNames.UserBans.SubforumID,
						},
						ToColumns: []string{
							ColumnNames.Subforums.SubforumID,
						},
					},
				},
			}, Subforums.Columns().Names(), opts...)
		},
	}
}

type userBanThenLoader[Q orm.Loadable] struct {
	BannedByPseudonymPseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	BannedByUserUser           func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	BannedUserUser             func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Subforum                   func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserBanThenLoader[Q orm.Loadable]() userBanThenLoader[Q] {
	type BannedByPseudonymPseudonymLoadInterface interface {
		LoadBannedByPseudonymPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type BannedByUserUserLoadInterface interface {
		LoadBannedByUserUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type BannedUserUserLoadInterface interface {
		LoadBannedUserUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type SubforumLoadInterface interface {
		LoadSubforum(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userBanThenLoader[Q]{
		BannedByPseudonymPseudonym: thenLoadBuilder[Q](
			"BannedByPseudonymPseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved BannedByPseudonymPseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBannedByPseudonymPseudonym(ctx, exec, mods...)
			},
		),
		BannedByUserUser: thenLoadBuilder[Q](
			"BannedByUserUser",
			func(ctx context.Context, exec bob.Executor, retrieved BannedByUserUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBannedByUserUser(ctx, exec, mods...)
			},
		),
		BannedUserUser: thenLoadBuilder[Q](
			"BannedUserUser",
			func(ctx context.Context, exec bob.Executor, retrieved BannedUserUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBannedUserUser(ctx, exec, mods...)
			},
		),
		Subforum: thenLoadBuilder[Q](
			"Subforum",
			func(ctx context.Context, exec bob.Executor, retrieved SubforumLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadSubforum(ctx, exec, mods...)
			},
		),
	}
}

// LoadBannedByPseudonymPseudonym loads the userBan's BannedByPseudonymPseudonym into the .R struct
func (o *UserBan) LoadBannedByPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BannedByPseudonymPseudonym = nil

	related, err := o.BannedByPseudonymPseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.BannedByPseudonymUserBans = UserBanSlice{o}

	o.R.BannedByPseudonymPseudonym = related
	return nil
}

// LoadBannedByPseudonymPseudonym loads the userBan's BannedByPseudonymPseudonym into the .R struct
func (os UserBanSlice) LoadBannedByPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.BannedByPseudonymPseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.BannedByPseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.BannedByPseudonymUserBans = append(rel.R.BannedByPseudonymUserBans, o)

			o.R.BannedByPseudonymPseudonym = rel
			break
		}
	}

	return nil
}

// LoadBannedByUserUser loads the userBan's BannedByUserUser into the .R struct
func (o *UserBan) LoadBannedByUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BannedByUserUser = nil

	related, err := o.BannedByUserUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.BannedByUserUserBans = UserBanSlice{o}

	o.R.BannedByUserUser = related
	return nil
}

// LoadBannedByUserUser loads the userBan's BannedByUserUser into the .R struct
func (os UserBanSlice) LoadBannedByUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.BannedByUserUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.BannedByUserID != rel.UserID {
				continue
			}

			rel.R.BannedByUserUserBans = append(rel.R.BannedByUserUserBans, o)

			o.R.BannedByUserUser = rel
			break
		}
	}

	return nil
}

// LoadBannedUserUser loads the userBan's BannedUserUser into the .R struct
func (o *UserBan) LoadBannedUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BannedUserUser = nil

	related, err := o.BannedUserUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.BannedUserUserBans = UserBanSlice{o}

	o.R.BannedUserUser = related
	return nil
}

// LoadBannedUserUser loads the userBan's BannedUserUser into the .R struct
func (os UserBanSlice) LoadBannedUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.BannedUserUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.BannedUserID != rel.UserID {
				continue
			}

			rel.R.BannedUserUserBans = append(rel.R.BannedUserUserBans, o)

			o.R.BannedUserUser = rel
			break
		}
	}

	return nil
}

// LoadSubforum loads the userBan's Subforum into the .R struct
func (o *UserBan) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Subforum = nil

	related, err := o.Subforum(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UserBans = UserBanSlice{o}

	o.R.Subforum = related
	return nil
}

// LoadSubforum loads the userBan's Subforum into the .R struct
func (os UserBanSlice) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	subforums, err := os.Subforum(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range subforums {
			if o.SubforumID != rel.SubforumID {
				continue
			}

			rel.R.UserBans = append(rel.R.UserBans, o)

			o.R.Subforum = rel
			break
		}
	}

	return nil
}

func attachUserBanBannedByPseudonymPseudonym0(ctx context.Context, exec bob.Executor, count int, userBan0 *UserBan, pseudonym1 *Pseudonym) (*UserBan, error) {
	setter := &UserBanSetter{
		BannedByPseudonymID: &pseudonym1.PseudonymID,
	}

	err := userBan0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBanBannedByPseudonymPseudonym0: %w", err)
	}

	return userBan0, nil
}

func (userBan0 *UserBan) InsertBannedByPseudonymPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBanBannedByPseudonymPseudonym0(ctx, exec, 1, userBan0, pseudonym1)
	if err != nil {
		return err
	}

	userBan0.R.BannedByPseudonymPseudonym = pseudonym1

	pseudonym1.R.BannedByPseudonymUserBans = append(pseudonym1.R.BannedByPseudonymUserBans, userBan0)

	return nil
}

func (userBan0 *UserBan) AttachBannedByPseudonymPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachUserBanBannedByPseudonymPseudonym0(ctx, exec, 1, userBan0, pseudonym1)
	if err != nil {
		return err
	}

	userBan0.R.BannedByPseudonymPseudonym = pseudonym1

	pseudonym1.R.BannedByPseudonymUserBans = append(pseudonym1.R.BannedByPseudonymUserBans, userBan0)

	return nil
}

func attachUserBanBannedByUserUser0(ctx context.Context, exec bob.Executor, count int, userBan0 *UserBan, user1 *User) (*UserBan, error) {
	setter := &UserBanSetter{
		BannedByUserID: &user1.UserID,
	}

	err := userBan0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBanBannedByUserUser0: %w", err)
	}

	return userBan0, nil
}

func (userBan0 *UserBan) InsertBannedByUserUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBanBannedByUserUser0(ctx, exec, 1, userBan0, user1)
	if err != nil {
		return err
	}

	userBan0.R.BannedByUserUser = user1

	user1.R.BannedByUserUserBans = append(user1.R.BannedByUserUserBans, userBan0)

	return nil
}

func (userBan0 *UserBan) AttachBannedByUserUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserBanBannedByUserUser0(ctx, exec, 1, userBan0, user1)
	if err != nil {
		return err
	}

	userBan0.R.BannedByUserUser = user1

	user1.R.BannedByUserUserBans = append(user1.R.BannedByUserUserBans, userBan0)

	return nil
}

func attachUserBanBannedUserUser0(ctx context.Context, exec bob.Executor, count int, userBan0 *UserBan, user1 *User) (*UserBan, error) {
	setter := &UserBanSetter{
		BannedUserID: &user1.UserID,
	}

	err := userBan0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBanBannedUserUser0: %w", err)
	}

	return userBan0, nil
}

func (userBan0 *UserBan) InsertBannedUserUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBanBannedUserUser0(ctx, exec, 1, userBan0, user1)
	if err != nil {
		return err
	}

	userBan0.R.BannedUserUser = user1

	user1.R.BannedUserUserBans = append(user1.R.BannedUserUserBans, userBan0)

	return nil
}

func (userBan0 *UserBan) AttachBannedUserUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserBanBannedUserUser0(ctx, exec, 1, userBan0, user1)
	if err != nil {
		return err
	}

	userBan0.R.BannedUserUser = user1

	user1.R.BannedUserUserBans = append(user1.R.BannedUserUserBans, userBan0)

	return nil
}

func attachUserBanSubforum0(ctx context.Context, exec bob.Executor, count int, userBan0 *UserBan, subforum1 *Subforum) (*UserBan, error) {
	setter := &UserBanSetter{
		SubforumID: &subforum1.SubforumID,
	}

	err := userBan0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBanSubforum0: %w", err)
	}

	return userBan0, nil
}

func (userBan0 *UserBan) InsertSubforum(ctx context.Context, exec bob.Executor, related *SubforumSetter) error {
	subforum1, err := Subforums.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBanSubforum0(ctx, exec, 1, userBan0, subforum1)
	if err != nil {
		return err
	}

	userBan0.R.Subforum = subforum1

	subforum1.R.UserBans = append(subforum1.R.UserBans, userBan0)

	return nil
}

func (userBan0 *UserBan) AttachSubforum(ctx context.Context, exec bob.Executor, subforum1 *Subforum) error {
	var err error

	_, err = attachUserBanSubforum0(ctx, exec, 1, userBan0, subforum1)
	if err != nil {
		return err
	}

	userBan0.R.Subforum = subforum1

	subforum1.R.UserBans = append(subforum1.R.UserBans, userBan0)

	return nil
}
