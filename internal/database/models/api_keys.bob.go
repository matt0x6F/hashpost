// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// APIKey is an object representing the database table.
type APIKey struct {
	KeyID       int64                                 `db:"key_id,pk" scan:"key_id" json:"key_id"`
	KeyName     string                                `db:"key_name" scan:"key_name" json:"key_name"`
	KeyHash     string                                `db:"key_hash" scan:"key_hash" json:"key_hash"`
	Permissions sql.Null[types.JSON[json.RawMessage]] `db:"permissions" scan:"permissions" json:"permissions"`
	CreatedAt   sql.Null[time.Time]                   `db:"created_at" scan:"created_at" json:"created_at"`
	ExpiresAt   sql.Null[time.Time]                   `db:"expires_at" scan:"expires_at" json:"expires_at"`
	IsActive    sql.Null[bool]                        `db:"is_active" scan:"is_active" json:"is_active"`
	LastUsedAt  sql.Null[time.Time]                   `db:"last_used_at" scan:"last_used_at" json:"last_used_at"`
	PseudonymID sql.Null[string]                      `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`

	R apiKeyR `db:"-" scan:"rel" json:"rel"`
}

// APIKeySlice is an alias for a slice of pointers to APIKey.
// This should almost always be used instead of []*APIKey.
type APIKeySlice []*APIKey

// APIKeys contains methods to work with the api_keys table
var APIKeys = psql.NewTablex[*APIKey, APIKeySlice, *APIKeySetter]("", "api_keys")

// APIKeysQuery is a query on the api_keys table
type APIKeysQuery = *psql.ViewQuery[*APIKey, APIKeySlice]

// apiKeyR is where relationships are stored.
type apiKeyR struct {
	Pseudonym *Pseudonym `scan:"Pseudonym" json:"Pseudonym"` // api_keys.fk_api_keys_pseudonym
}

type apiKeyColumnNames struct {
	KeyID       string
	KeyName     string
	KeyHash     string
	Permissions string
	CreatedAt   string
	ExpiresAt   string
	IsActive    string
	LastUsedAt  string
	PseudonymID string
}

var APIKeyColumns = buildAPIKeyColumns("api_keys")

type apiKeyColumns struct {
	tableAlias  string
	KeyID       psql.Expression
	KeyName     psql.Expression
	KeyHash     psql.Expression
	Permissions psql.Expression
	CreatedAt   psql.Expression
	ExpiresAt   psql.Expression
	IsActive    psql.Expression
	LastUsedAt  psql.Expression
	PseudonymID psql.Expression
}

func (c apiKeyColumns) Alias() string {
	return c.tableAlias
}

func (apiKeyColumns) AliasedAs(alias string) apiKeyColumns {
	return buildAPIKeyColumns(alias)
}

func buildAPIKeyColumns(alias string) apiKeyColumns {
	return apiKeyColumns{
		tableAlias:  alias,
		KeyID:       psql.Quote(alias, "key_id"),
		KeyName:     psql.Quote(alias, "key_name"),
		KeyHash:     psql.Quote(alias, "key_hash"),
		Permissions: psql.Quote(alias, "permissions"),
		CreatedAt:   psql.Quote(alias, "created_at"),
		ExpiresAt:   psql.Quote(alias, "expires_at"),
		IsActive:    psql.Quote(alias, "is_active"),
		LastUsedAt:  psql.Quote(alias, "last_used_at"),
		PseudonymID: psql.Quote(alias, "pseudonym_id"),
	}
}

type apiKeyWhere[Q psql.Filterable] struct {
	KeyID       psql.WhereMod[Q, int64]
	KeyName     psql.WhereMod[Q, string]
	KeyHash     psql.WhereMod[Q, string]
	Permissions psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
	CreatedAt   psql.WhereNullMod[Q, time.Time]
	ExpiresAt   psql.WhereNullMod[Q, time.Time]
	IsActive    psql.WhereNullMod[Q, bool]
	LastUsedAt  psql.WhereNullMod[Q, time.Time]
	PseudonymID psql.WhereNullMod[Q, string]
}

func (apiKeyWhere[Q]) AliasedAs(alias string) apiKeyWhere[Q] {
	return buildAPIKeyWhere[Q](buildAPIKeyColumns(alias))
}

func buildAPIKeyWhere[Q psql.Filterable](cols apiKeyColumns) apiKeyWhere[Q] {
	return apiKeyWhere[Q]{
		KeyID:       psql.Where[Q, int64](cols.KeyID),
		KeyName:     psql.Where[Q, string](cols.KeyName),
		KeyHash:     psql.Where[Q, string](cols.KeyHash),
		Permissions: psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.Permissions),
		CreatedAt:   psql.WhereNull[Q, time.Time](cols.CreatedAt),
		ExpiresAt:   psql.WhereNull[Q, time.Time](cols.ExpiresAt),
		IsActive:    psql.WhereNull[Q, bool](cols.IsActive),
		LastUsedAt:  psql.WhereNull[Q, time.Time](cols.LastUsedAt),
		PseudonymID: psql.WhereNull[Q, string](cols.PseudonymID),
	}
}

var APIKeyErrors = &apiKeyErrors{
	ErrUniqueApiKeysPkey: &UniqueConstraintError{
		schema:  "",
		table:   "api_keys",
		columns: []string{"key_id"},
		s:       "api_keys_pkey",
	},
}

type apiKeyErrors struct {
	ErrUniqueApiKeysPkey *UniqueConstraintError
}

// APIKeySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type APIKeySetter struct {
	KeyID       *int64                                 `db:"key_id,pk" scan:"key_id" json:"key_id"`
	KeyName     *string                                `db:"key_name" scan:"key_name" json:"key_name"`
	KeyHash     *string                                `db:"key_hash" scan:"key_hash" json:"key_hash"`
	Permissions *sql.Null[types.JSON[json.RawMessage]] `db:"permissions" scan:"permissions" json:"permissions"`
	CreatedAt   *sql.Null[time.Time]                   `db:"created_at" scan:"created_at" json:"created_at"`
	ExpiresAt   *sql.Null[time.Time]                   `db:"expires_at" scan:"expires_at" json:"expires_at"`
	IsActive    *sql.Null[bool]                        `db:"is_active" scan:"is_active" json:"is_active"`
	LastUsedAt  *sql.Null[time.Time]                   `db:"last_used_at" scan:"last_used_at" json:"last_used_at"`
	PseudonymID *sql.Null[string]                      `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
}

func (s APIKeySetter) SetColumns() []string {
	vals := make([]string, 0, 9)
	if s.KeyID != nil {
		vals = append(vals, "key_id")
	}

	if s.KeyName != nil {
		vals = append(vals, "key_name")
	}

	if s.KeyHash != nil {
		vals = append(vals, "key_hash")
	}

	if s.Permissions != nil {
		vals = append(vals, "permissions")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.ExpiresAt != nil {
		vals = append(vals, "expires_at")
	}

	if s.IsActive != nil {
		vals = append(vals, "is_active")
	}

	if s.LastUsedAt != nil {
		vals = append(vals, "last_used_at")
	}

	if s.PseudonymID != nil {
		vals = append(vals, "pseudonym_id")
	}

	return vals
}

func (s APIKeySetter) Overwrite(t *APIKey) {
	if s.KeyID != nil {
		t.KeyID = *s.KeyID
	}
	if s.KeyName != nil {
		t.KeyName = *s.KeyName
	}
	if s.KeyHash != nil {
		t.KeyHash = *s.KeyHash
	}
	if s.Permissions != nil {
		t.Permissions = *s.Permissions
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.ExpiresAt != nil {
		t.ExpiresAt = *s.ExpiresAt
	}
	if s.IsActive != nil {
		t.IsActive = *s.IsActive
	}
	if s.LastUsedAt != nil {
		t.LastUsedAt = *s.LastUsedAt
	}
	if s.PseudonymID != nil {
		t.PseudonymID = *s.PseudonymID
	}
}

func (s *APIKeySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return APIKeys.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 9)
		if s.KeyID != nil {
			vals[0] = psql.Arg(*s.KeyID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.KeyName != nil {
			vals[1] = psql.Arg(*s.KeyName)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.KeyHash != nil {
			vals[2] = psql.Arg(*s.KeyHash)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Permissions != nil {
			vals[3] = psql.Arg(*s.Permissions)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[4] = psql.Arg(*s.CreatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.ExpiresAt != nil {
			vals[5] = psql.Arg(*s.ExpiresAt)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.IsActive != nil {
			vals[6] = psql.Arg(*s.IsActive)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.LastUsedAt != nil {
			vals[7] = psql.Arg(*s.LastUsedAt)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.PseudonymID != nil {
			vals[8] = psql.Arg(*s.PseudonymID)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s APIKeySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s APIKeySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 9)

	if s.KeyID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "key_id")...),
			psql.Arg(s.KeyID),
		}})
	}

	if s.KeyName != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "key_name")...),
			psql.Arg(s.KeyName),
		}})
	}

	if s.KeyHash != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "key_hash")...),
			psql.Arg(s.KeyHash),
		}})
	}

	if s.Permissions != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "permissions")...),
			psql.Arg(s.Permissions),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.ExpiresAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "expires_at")...),
			psql.Arg(s.ExpiresAt),
		}})
	}

	if s.IsActive != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_active")...),
			psql.Arg(s.IsActive),
		}})
	}

	if s.LastUsedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_used_at")...),
			psql.Arg(s.LastUsedAt),
		}})
	}

	if s.PseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pseudonym_id")...),
			psql.Arg(s.PseudonymID),
		}})
	}

	return exprs
}

// FindAPIKey retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAPIKey(ctx context.Context, exec bob.Executor, KeyIDPK int64, cols ...string) (*APIKey, error) {
	if len(cols) == 0 {
		return APIKeys.Query(
			SelectWhere.APIKeys.KeyID.EQ(KeyIDPK),
		).One(ctx, exec)
	}

	return APIKeys.Query(
		SelectWhere.APIKeys.KeyID.EQ(KeyIDPK),
		sm.Columns(APIKeys.Columns().Only(cols...)),
	).One(ctx, exec)
}

// APIKeyExists checks the presence of a single record by primary key
func APIKeyExists(ctx context.Context, exec bob.Executor, KeyIDPK int64) (bool, error) {
	return APIKeys.Query(
		SelectWhere.APIKeys.KeyID.EQ(KeyIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after APIKey is retrieved from the database
func (o *APIKey) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = APIKeys.AfterSelectHooks.RunHooks(ctx, exec, APIKeySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = APIKeys.AfterInsertHooks.RunHooks(ctx, exec, APIKeySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = APIKeys.AfterUpdateHooks.RunHooks(ctx, exec, APIKeySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = APIKeys.AfterDeleteHooks.RunHooks(ctx, exec, APIKeySlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the APIKey
func (o *APIKey) primaryKeyVals() bob.Expression {
	return psql.Arg(o.KeyID)
}

func (o *APIKey) pkEQ() dialect.Expression {
	return psql.Quote("api_keys", "key_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the APIKey
func (o *APIKey) Update(ctx context.Context, exec bob.Executor, s *APIKeySetter) error {
	v, err := APIKeys.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single APIKey record with an executor
func (o *APIKey) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := APIKeys.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the APIKey using the executor
func (o *APIKey) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := APIKeys.Query(
		SelectWhere.APIKeys.KeyID.EQ(o.KeyID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after APIKeySlice is retrieved from the database
func (o APIKeySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = APIKeys.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = APIKeys.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = APIKeys.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = APIKeys.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o APIKeySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("api_keys", "key_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o APIKeySlice) copyMatchingRows(from ...*APIKey) {
	for i, old := range o {
		for _, new := range from {
			if new.KeyID != old.KeyID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o APIKeySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return APIKeys.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *APIKey:
				o.copyMatchingRows(retrieved)
			case []*APIKey:
				o.copyMatchingRows(retrieved...)
			case APIKeySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a APIKey or a slice of APIKey
				// then run the AfterUpdateHooks on the slice
				_, err = APIKeys.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o APIKeySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return APIKeys.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *APIKey:
				o.copyMatchingRows(retrieved)
			case []*APIKey:
				o.copyMatchingRows(retrieved...)
			case APIKeySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a APIKey or a slice of APIKey
				// then run the AfterDeleteHooks on the slice
				_, err = APIKeys.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o APIKeySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals APIKeySetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := APIKeys.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o APIKeySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := APIKeys.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o APIKeySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := APIKeys.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type apiKeyJoins[Q dialect.Joinable] struct {
	typ       string
	Pseudonym modAs[Q, pseudonymColumns]
}

func (j apiKeyJoins[Q]) aliasedAs(alias string) apiKeyJoins[Q] {
	return buildAPIKeyJoins[Q](buildAPIKeyColumns(alias), j.typ)
}

func buildAPIKeyJoins[Q dialect.Joinable](cols apiKeyColumns, typ string) apiKeyJoins[Q] {
	return apiKeyJoins[Q]{
		typ: typ,
		Pseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.PseudonymID),
					))
				}

				return mods
			},
		},
	}
}

// Pseudonym starts a query for related objects on pseudonyms
func (o *APIKey) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.PseudonymID))),
	)...)
}

func (os APIKeySlice) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkPseudonymID := make(pgtypes.Array[sql.Null[string]], len(os))
	for i, o := range os {
		pkPseudonymID[i] = o.PseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

func (o *APIKey) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Pseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("apiKey cannot load %T as %q", retrieved, name)
		}

		o.R.Pseudonym = rel

		if rel != nil {
			rel.R.APIKeys = APIKeySlice{o}
		}
		return nil
	default:
		return fmt.Errorf("apiKey has no relationship %q", name)
	}
}

type apiKeyPreloader struct {
	Pseudonym func(...psql.PreloadOption) psql.Preloader
}

func buildAPIKeyPreloader() apiKeyPreloader {
	return apiKeyPreloader{
		Pseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "Pseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.APIKeys,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.APIKeys.PseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
	}
}

type apiKeyThenLoader[Q orm.Loadable] struct {
	Pseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildAPIKeyThenLoader[Q orm.Loadable]() apiKeyThenLoader[Q] {
	type PseudonymLoadInterface interface {
		LoadPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return apiKeyThenLoader[Q]{
		Pseudonym: thenLoadBuilder[Q](
			"Pseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved PseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPseudonym(ctx, exec, mods...)
			},
		),
	}
}

// LoadPseudonym loads the apiKey's Pseudonym into the .R struct
func (o *APIKey) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Pseudonym = nil

	related, err := o.Pseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.APIKeys = APIKeySlice{o}

	o.R.Pseudonym = related
	return nil
}

// LoadPseudonym loads the apiKey's Pseudonym into the .R struct
func (os APIKeySlice) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.Pseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.PseudonymID.V != rel.PseudonymID {
				continue
			}

			rel.R.APIKeys = append(rel.R.APIKeys, o)

			o.R.Pseudonym = rel
			break
		}
	}

	return nil
}

func attachAPIKeyPseudonym0(ctx context.Context, exec bob.Executor, count int, apiKey0 *APIKey, pseudonym1 *Pseudonym) (*APIKey, error) {
	setter := &APIKeySetter{
		PseudonymID: func() *sql.Null[string] {
			v := sql.Null[string]{V: pseudonym1.PseudonymID, Valid: true}
			return &v
		}(),
	}

	err := apiKey0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachAPIKeyPseudonym0: %w", err)
	}

	return apiKey0, nil
}

func (apiKey0 *APIKey) InsertPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachAPIKeyPseudonym0(ctx, exec, 1, apiKey0, pseudonym1)
	if err != nil {
		return err
	}

	apiKey0.R.Pseudonym = pseudonym1

	pseudonym1.R.APIKeys = append(pseudonym1.R.APIKeys, apiKey0)

	return nil
}

func (apiKey0 *APIKey) AttachPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachAPIKeyPseudonym0(ctx, exec, 1, apiKey0, pseudonym1)
	if err != nil {
		return err
	}

	apiKey0.R.Pseudonym = pseudonym1

	pseudonym1.R.APIKeys = append(pseudonym1.R.APIKeys, apiKey0)

	return nil
}
