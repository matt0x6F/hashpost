// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// UserPreference is an object representing the database table.
type UserPreference struct {
	UserID             int64               `db:"user_id,pk" scan:"user_id" json:"user_id"`
	Timezone           sql.Null[string]    `db:"timezone" scan:"timezone" json:"timezone"`
	Language           sql.Null[string]    `db:"language" scan:"language" json:"language"`
	Theme              sql.Null[string]    `db:"theme" scan:"theme" json:"theme"`
	EmailNotifications sql.Null[bool]      `db:"email_notifications" scan:"email_notifications" json:"email_notifications"`
	PushNotifications  sql.Null[bool]      `db:"push_notifications" scan:"push_notifications" json:"push_notifications"`
	AutoHideNSFW       sql.Null[bool]      `db:"auto_hide_nsfw" scan:"auto_hide_nsfw" json:"auto_hide_nsfw"`
	AutoHideSpoilers   sql.Null[bool]      `db:"auto_hide_spoilers" scan:"auto_hide_spoilers" json:"auto_hide_spoilers"`
	CreatedAt          sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
	UpdatedAt          sql.Null[time.Time] `db:"updated_at" scan:"updated_at" json:"updated_at"`

	R userPreferenceR `db:"-" scan:"rel" json:"rel"`
}

// UserPreferenceSlice is an alias for a slice of pointers to UserPreference.
// This should almost always be used instead of []*UserPreference.
type UserPreferenceSlice []*UserPreference

// UserPreferences contains methods to work with the user_preferences table
var UserPreferences = psql.NewTablex[*UserPreference, UserPreferenceSlice, *UserPreferenceSetter]("", "user_preferences")

// UserPreferencesQuery is a query on the user_preferences table
type UserPreferencesQuery = *psql.ViewQuery[*UserPreference, UserPreferenceSlice]

// userPreferenceR is where relationships are stored.
type userPreferenceR struct {
	User *User `scan:"User" json:"User"` // user_preferences.user_preferences_user_id_fkey
}

type userPreferenceColumnNames struct {
	UserID             string
	Timezone           string
	Language           string
	Theme              string
	EmailNotifications string
	PushNotifications  string
	AutoHideNSFW       string
	AutoHideSpoilers   string
	CreatedAt          string
	UpdatedAt          string
}

var UserPreferenceColumns = buildUserPreferenceColumns("user_preferences")

type userPreferenceColumns struct {
	tableAlias         string
	UserID             psql.Expression
	Timezone           psql.Expression
	Language           psql.Expression
	Theme              psql.Expression
	EmailNotifications psql.Expression
	PushNotifications  psql.Expression
	AutoHideNSFW       psql.Expression
	AutoHideSpoilers   psql.Expression
	CreatedAt          psql.Expression
	UpdatedAt          psql.Expression
}

func (c userPreferenceColumns) Alias() string {
	return c.tableAlias
}

func (userPreferenceColumns) AliasedAs(alias string) userPreferenceColumns {
	return buildUserPreferenceColumns(alias)
}

func buildUserPreferenceColumns(alias string) userPreferenceColumns {
	return userPreferenceColumns{
		tableAlias:         alias,
		UserID:             psql.Quote(alias, "user_id"),
		Timezone:           psql.Quote(alias, "timezone"),
		Language:           psql.Quote(alias, "language"),
		Theme:              psql.Quote(alias, "theme"),
		EmailNotifications: psql.Quote(alias, "email_notifications"),
		PushNotifications:  psql.Quote(alias, "push_notifications"),
		AutoHideNSFW:       psql.Quote(alias, "auto_hide_nsfw"),
		AutoHideSpoilers:   psql.Quote(alias, "auto_hide_spoilers"),
		CreatedAt:          psql.Quote(alias, "created_at"),
		UpdatedAt:          psql.Quote(alias, "updated_at"),
	}
}

type userPreferenceWhere[Q psql.Filterable] struct {
	UserID             psql.WhereMod[Q, int64]
	Timezone           psql.WhereNullMod[Q, string]
	Language           psql.WhereNullMod[Q, string]
	Theme              psql.WhereNullMod[Q, string]
	EmailNotifications psql.WhereNullMod[Q, bool]
	PushNotifications  psql.WhereNullMod[Q, bool]
	AutoHideNSFW       psql.WhereNullMod[Q, bool]
	AutoHideSpoilers   psql.WhereNullMod[Q, bool]
	CreatedAt          psql.WhereNullMod[Q, time.Time]
	UpdatedAt          psql.WhereNullMod[Q, time.Time]
}

func (userPreferenceWhere[Q]) AliasedAs(alias string) userPreferenceWhere[Q] {
	return buildUserPreferenceWhere[Q](buildUserPreferenceColumns(alias))
}

func buildUserPreferenceWhere[Q psql.Filterable](cols userPreferenceColumns) userPreferenceWhere[Q] {
	return userPreferenceWhere[Q]{
		UserID:             psql.Where[Q, int64](cols.UserID),
		Timezone:           psql.WhereNull[Q, string](cols.Timezone),
		Language:           psql.WhereNull[Q, string](cols.Language),
		Theme:              psql.WhereNull[Q, string](cols.Theme),
		EmailNotifications: psql.WhereNull[Q, bool](cols.EmailNotifications),
		PushNotifications:  psql.WhereNull[Q, bool](cols.PushNotifications),
		AutoHideNSFW:       psql.WhereNull[Q, bool](cols.AutoHideNSFW),
		AutoHideSpoilers:   psql.WhereNull[Q, bool](cols.AutoHideSpoilers),
		CreatedAt:          psql.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt:          psql.WhereNull[Q, time.Time](cols.UpdatedAt),
	}
}

var UserPreferenceErrors = &userPreferenceErrors{
	ErrUniqueUserPreferencesPkey: &UniqueConstraintError{
		schema:  "",
		table:   "user_preferences",
		columns: []string{"user_id"},
		s:       "user_preferences_pkey",
	},
}

type userPreferenceErrors struct {
	ErrUniqueUserPreferencesPkey *UniqueConstraintError
}

// UserPreferenceSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserPreferenceSetter struct {
	UserID             *int64               `db:"user_id,pk" scan:"user_id" json:"user_id"`
	Timezone           *sql.Null[string]    `db:"timezone" scan:"timezone" json:"timezone"`
	Language           *sql.Null[string]    `db:"language" scan:"language" json:"language"`
	Theme              *sql.Null[string]    `db:"theme" scan:"theme" json:"theme"`
	EmailNotifications *sql.Null[bool]      `db:"email_notifications" scan:"email_notifications" json:"email_notifications"`
	PushNotifications  *sql.Null[bool]      `db:"push_notifications" scan:"push_notifications" json:"push_notifications"`
	AutoHideNSFW       *sql.Null[bool]      `db:"auto_hide_nsfw" scan:"auto_hide_nsfw" json:"auto_hide_nsfw"`
	AutoHideSpoilers   *sql.Null[bool]      `db:"auto_hide_spoilers" scan:"auto_hide_spoilers" json:"auto_hide_spoilers"`
	CreatedAt          *sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
	UpdatedAt          *sql.Null[time.Time] `db:"updated_at" scan:"updated_at" json:"updated_at"`
}

func (s UserPreferenceSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.UserID != nil {
		vals = append(vals, "user_id")
	}

	if s.Timezone != nil {
		vals = append(vals, "timezone")
	}

	if s.Language != nil {
		vals = append(vals, "language")
	}

	if s.Theme != nil {
		vals = append(vals, "theme")
	}

	if s.EmailNotifications != nil {
		vals = append(vals, "email_notifications")
	}

	if s.PushNotifications != nil {
		vals = append(vals, "push_notifications")
	}

	if s.AutoHideNSFW != nil {
		vals = append(vals, "auto_hide_nsfw")
	}

	if s.AutoHideSpoilers != nil {
		vals = append(vals, "auto_hide_spoilers")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s UserPreferenceSetter) Overwrite(t *UserPreference) {
	if s.UserID != nil {
		t.UserID = *s.UserID
	}
	if s.Timezone != nil {
		t.Timezone = *s.Timezone
	}
	if s.Language != nil {
		t.Language = *s.Language
	}
	if s.Theme != nil {
		t.Theme = *s.Theme
	}
	if s.EmailNotifications != nil {
		t.EmailNotifications = *s.EmailNotifications
	}
	if s.PushNotifications != nil {
		t.PushNotifications = *s.PushNotifications
	}
	if s.AutoHideNSFW != nil {
		t.AutoHideNSFW = *s.AutoHideNSFW
	}
	if s.AutoHideSpoilers != nil {
		t.AutoHideSpoilers = *s.AutoHideSpoilers
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *UserPreferenceSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserPreferences.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.UserID != nil {
			vals[0] = psql.Arg(*s.UserID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Timezone != nil {
			vals[1] = psql.Arg(*s.Timezone)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Language != nil {
			vals[2] = psql.Arg(*s.Language)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Theme != nil {
			vals[3] = psql.Arg(*s.Theme)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.EmailNotifications != nil {
			vals[4] = psql.Arg(*s.EmailNotifications)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.PushNotifications != nil {
			vals[5] = psql.Arg(*s.PushNotifications)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.AutoHideNSFW != nil {
			vals[6] = psql.Arg(*s.AutoHideNSFW)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.AutoHideSpoilers != nil {
			vals[7] = psql.Arg(*s.AutoHideSpoilers)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[8] = psql.Arg(*s.CreatedAt)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[9] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserPreferenceSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserPreferenceSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.UserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if s.Timezone != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "timezone")...),
			psql.Arg(s.Timezone),
		}})
	}

	if s.Language != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "language")...),
			psql.Arg(s.Language),
		}})
	}

	if s.Theme != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "theme")...),
			psql.Arg(s.Theme),
		}})
	}

	if s.EmailNotifications != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email_notifications")...),
			psql.Arg(s.EmailNotifications),
		}})
	}

	if s.PushNotifications != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "push_notifications")...),
			psql.Arg(s.PushNotifications),
		}})
	}

	if s.AutoHideNSFW != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "auto_hide_nsfw")...),
			psql.Arg(s.AutoHideNSFW),
		}})
	}

	if s.AutoHideSpoilers != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "auto_hide_spoilers")...),
			psql.Arg(s.AutoHideSpoilers),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindUserPreference retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserPreference(ctx context.Context, exec bob.Executor, UserIDPK int64, cols ...string) (*UserPreference, error) {
	if len(cols) == 0 {
		return UserPreferences.Query(
			SelectWhere.UserPreferences.UserID.EQ(UserIDPK),
		).One(ctx, exec)
	}

	return UserPreferences.Query(
		SelectWhere.UserPreferences.UserID.EQ(UserIDPK),
		sm.Columns(UserPreferences.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserPreferenceExists checks the presence of a single record by primary key
func UserPreferenceExists(ctx context.Context, exec bob.Executor, UserIDPK int64) (bool, error) {
	return UserPreferences.Query(
		SelectWhere.UserPreferences.UserID.EQ(UserIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserPreference is retrieved from the database
func (o *UserPreference) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserPreferences.AfterSelectHooks.RunHooks(ctx, exec, UserPreferenceSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserPreferences.AfterInsertHooks.RunHooks(ctx, exec, UserPreferenceSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserPreferences.AfterUpdateHooks.RunHooks(ctx, exec, UserPreferenceSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserPreferences.AfterDeleteHooks.RunHooks(ctx, exec, UserPreferenceSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the UserPreference
func (o *UserPreference) primaryKeyVals() bob.Expression {
	return psql.Arg(o.UserID)
}

func (o *UserPreference) pkEQ() dialect.Expression {
	return psql.Quote("user_preferences", "user_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserPreference
func (o *UserPreference) Update(ctx context.Context, exec bob.Executor, s *UserPreferenceSetter) error {
	v, err := UserPreferences.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserPreference record with an executor
func (o *UserPreference) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserPreferences.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserPreference using the executor
func (o *UserPreference) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserPreferences.Query(
		SelectWhere.UserPreferences.UserID.EQ(o.UserID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserPreferenceSlice is retrieved from the database
func (o UserPreferenceSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserPreferences.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserPreferences.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserPreferences.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserPreferences.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserPreferenceSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_preferences", "user_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserPreferenceSlice) copyMatchingRows(from ...*UserPreference) {
	for i, old := range o {
		for _, new := range from {
			if new.UserID != old.UserID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserPreferenceSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserPreferences.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserPreference:
				o.copyMatchingRows(retrieved)
			case []*UserPreference:
				o.copyMatchingRows(retrieved...)
			case UserPreferenceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserPreference or a slice of UserPreference
				// then run the AfterUpdateHooks on the slice
				_, err = UserPreferences.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserPreferenceSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserPreferences.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserPreference:
				o.copyMatchingRows(retrieved)
			case []*UserPreference:
				o.copyMatchingRows(retrieved...)
			case UserPreferenceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserPreference or a slice of UserPreference
				// then run the AfterDeleteHooks on the slice
				_, err = UserPreferences.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserPreferenceSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserPreferenceSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserPreferences.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserPreferenceSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserPreferences.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserPreferenceSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserPreferences.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userPreferenceJoins[Q dialect.Joinable] struct {
	typ  string
	User modAs[Q, userColumns]
}

func (j userPreferenceJoins[Q]) aliasedAs(alias string) userPreferenceJoins[Q] {
	return buildUserPreferenceJoins[Q](buildUserPreferenceColumns(alias), j.typ)
}

func buildUserPreferenceJoins[Q dialect.Joinable](cols userPreferenceColumns, typ string) userPreferenceJoins[Q] {
	return userPreferenceJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}

// User starts a query for related objects on users
func (o *UserPreference) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os UserPreferenceSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkUserID[i] = o.UserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func (o *UserPreference) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userPreference cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.UserPreference = o
		}
		return nil
	default:
		return fmt.Errorf("userPreference has no relationship %q", name)
	}
}

type userPreferencePreloader struct {
	User func(...psql.PreloadOption) psql.Preloader
}

func buildUserPreferencePreloader() userPreferencePreloader {
	return userPreferencePreloader{
		User: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "User",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserPreferences,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.UserPreferences.UserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type userPreferenceThenLoader[Q orm.Loadable] struct {
	User func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserPreferenceThenLoader[Q orm.Loadable]() userPreferenceThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userPreferenceThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the userPreference's User into the .R struct
func (o *UserPreference) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UserPreference = o

	o.R.User = related
	return nil
}

// LoadUser loads the userPreference's User into the .R struct
func (os UserPreferenceSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.UserID {
				continue
			}

			rel.R.UserPreference = o

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachUserPreferenceUser0(ctx context.Context, exec bob.Executor, count int, userPreference0 *UserPreference, user1 *User) (*UserPreference, error) {
	setter := &UserPreferenceSetter{
		UserID: &user1.UserID,
	}

	err := userPreference0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserPreferenceUser0: %w", err)
	}

	return userPreference0, nil
}

func (userPreference0 *UserPreference) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserPreferenceUser0(ctx, exec, 1, userPreference0, user1)
	if err != nil {
		return err
	}

	userPreference0.R.User = user1

	user1.R.UserPreference = userPreference0

	return nil
}

func (userPreference0 *UserPreference) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserPreferenceUser0(ctx, exec, 1, userPreference0, user1)
	if err != nil {
		return err
	}

	userPreference0.R.User = user1

	user1.R.UserPreference = userPreference0

	return nil
}
