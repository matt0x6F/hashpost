// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// SubforumSubscription is an object representing the database table.
type SubforumSubscription struct {
	SubscriptionID int64               `db:"subscription_id,pk" scan:"subscription_id" json:"subscription_id"`
	PseudonymID    string              `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	SubforumID     int32               `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	SubscribedAt   sql.Null[time.Time] `db:"subscribed_at" scan:"subscribed_at" json:"subscribed_at"`
	IsFavorite     sql.Null[bool]      `db:"is_favorite" scan:"is_favorite" json:"is_favorite"`

	R subforumSubscriptionR `db:"-" scan:"rel" json:"rel"`
}

// SubforumSubscriptionSlice is an alias for a slice of pointers to SubforumSubscription.
// This should almost always be used instead of []*SubforumSubscription.
type SubforumSubscriptionSlice []*SubforumSubscription

// SubforumSubscriptions contains methods to work with the subforum_subscriptions table
var SubforumSubscriptions = psql.NewTablex[*SubforumSubscription, SubforumSubscriptionSlice, *SubforumSubscriptionSetter]("", "subforum_subscriptions")

// SubforumSubscriptionsQuery is a query on the subforum_subscriptions table
type SubforumSubscriptionsQuery = *psql.ViewQuery[*SubforumSubscription, SubforumSubscriptionSlice]

// subforumSubscriptionR is where relationships are stored.
type subforumSubscriptionR struct {
	Pseudonym *Pseudonym `scan:"Pseudonym" json:"Pseudonym"` // subforum_subscriptions.subforum_subscriptions_pseudonym_id_fkey
	Subforum  *Subforum  `scan:"Subforum" json:"Subforum"`   // subforum_subscriptions.subforum_subscriptions_subforum_id_fkey
}

type subforumSubscriptionColumnNames struct {
	SubscriptionID string
	PseudonymID    string
	SubforumID     string
	SubscribedAt   string
	IsFavorite     string
}

var SubforumSubscriptionColumns = buildSubforumSubscriptionColumns("subforum_subscriptions")

type subforumSubscriptionColumns struct {
	tableAlias     string
	SubscriptionID psql.Expression
	PseudonymID    psql.Expression
	SubforumID     psql.Expression
	SubscribedAt   psql.Expression
	IsFavorite     psql.Expression
}

func (c subforumSubscriptionColumns) Alias() string {
	return c.tableAlias
}

func (subforumSubscriptionColumns) AliasedAs(alias string) subforumSubscriptionColumns {
	return buildSubforumSubscriptionColumns(alias)
}

func buildSubforumSubscriptionColumns(alias string) subforumSubscriptionColumns {
	return subforumSubscriptionColumns{
		tableAlias:     alias,
		SubscriptionID: psql.Quote(alias, "subscription_id"),
		PseudonymID:    psql.Quote(alias, "pseudonym_id"),
		SubforumID:     psql.Quote(alias, "subforum_id"),
		SubscribedAt:   psql.Quote(alias, "subscribed_at"),
		IsFavorite:     psql.Quote(alias, "is_favorite"),
	}
}

type subforumSubscriptionWhere[Q psql.Filterable] struct {
	SubscriptionID psql.WhereMod[Q, int64]
	PseudonymID    psql.WhereMod[Q, string]
	SubforumID     psql.WhereMod[Q, int32]
	SubscribedAt   psql.WhereNullMod[Q, time.Time]
	IsFavorite     psql.WhereNullMod[Q, bool]
}

func (subforumSubscriptionWhere[Q]) AliasedAs(alias string) subforumSubscriptionWhere[Q] {
	return buildSubforumSubscriptionWhere[Q](buildSubforumSubscriptionColumns(alias))
}

func buildSubforumSubscriptionWhere[Q psql.Filterable](cols subforumSubscriptionColumns) subforumSubscriptionWhere[Q] {
	return subforumSubscriptionWhere[Q]{
		SubscriptionID: psql.Where[Q, int64](cols.SubscriptionID),
		PseudonymID:    psql.Where[Q, string](cols.PseudonymID),
		SubforumID:     psql.Where[Q, int32](cols.SubforumID),
		SubscribedAt:   psql.WhereNull[Q, time.Time](cols.SubscribedAt),
		IsFavorite:     psql.WhereNull[Q, bool](cols.IsFavorite),
	}
}

var SubforumSubscriptionErrors = &subforumSubscriptionErrors{
	ErrUniqueSubforumSubscriptionsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "subforum_subscriptions",
		columns: []string{"subscription_id"},
		s:       "subforum_subscriptions_pkey",
	},

	ErrUniqueSubforumSubscriptionsPseudonymIdSubforumIdKey: &UniqueConstraintError{
		schema:  "",
		table:   "subforum_subscriptions",
		columns: []string{"pseudonym_id", "subforum_id"},
		s:       "subforum_subscriptions_pseudonym_id_subforum_id_key",
	},
}

type subforumSubscriptionErrors struct {
	ErrUniqueSubforumSubscriptionsPkey *UniqueConstraintError

	ErrUniqueSubforumSubscriptionsPseudonymIdSubforumIdKey *UniqueConstraintError
}

// SubforumSubscriptionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SubforumSubscriptionSetter struct {
	SubscriptionID *int64               `db:"subscription_id,pk" scan:"subscription_id" json:"subscription_id"`
	PseudonymID    *string              `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	SubforumID     *int32               `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	SubscribedAt   *sql.Null[time.Time] `db:"subscribed_at" scan:"subscribed_at" json:"subscribed_at"`
	IsFavorite     *sql.Null[bool]      `db:"is_favorite" scan:"is_favorite" json:"is_favorite"`
}

func (s SubforumSubscriptionSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.SubscriptionID != nil {
		vals = append(vals, "subscription_id")
	}

	if s.PseudonymID != nil {
		vals = append(vals, "pseudonym_id")
	}

	if s.SubforumID != nil {
		vals = append(vals, "subforum_id")
	}

	if s.SubscribedAt != nil {
		vals = append(vals, "subscribed_at")
	}

	if s.IsFavorite != nil {
		vals = append(vals, "is_favorite")
	}

	return vals
}

func (s SubforumSubscriptionSetter) Overwrite(t *SubforumSubscription) {
	if s.SubscriptionID != nil {
		t.SubscriptionID = *s.SubscriptionID
	}
	if s.PseudonymID != nil {
		t.PseudonymID = *s.PseudonymID
	}
	if s.SubforumID != nil {
		t.SubforumID = *s.SubforumID
	}
	if s.SubscribedAt != nil {
		t.SubscribedAt = *s.SubscribedAt
	}
	if s.IsFavorite != nil {
		t.IsFavorite = *s.IsFavorite
	}
}

func (s *SubforumSubscriptionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return SubforumSubscriptions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.SubscriptionID != nil {
			vals[0] = psql.Arg(*s.SubscriptionID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.PseudonymID != nil {
			vals[1] = psql.Arg(*s.PseudonymID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.SubforumID != nil {
			vals[2] = psql.Arg(*s.SubforumID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.SubscribedAt != nil {
			vals[3] = psql.Arg(*s.SubscribedAt)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.IsFavorite != nil {
			vals[4] = psql.Arg(*s.IsFavorite)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s SubforumSubscriptionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s SubforumSubscriptionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.SubscriptionID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "subscription_id")...),
			psql.Arg(s.SubscriptionID),
		}})
	}

	if s.PseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pseudonym_id")...),
			psql.Arg(s.PseudonymID),
		}})
	}

	if s.SubforumID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "subforum_id")...),
			psql.Arg(s.SubforumID),
		}})
	}

	if s.SubscribedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "subscribed_at")...),
			psql.Arg(s.SubscribedAt),
		}})
	}

	if s.IsFavorite != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_favorite")...),
			psql.Arg(s.IsFavorite),
		}})
	}

	return exprs
}

// FindSubforumSubscription retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSubforumSubscription(ctx context.Context, exec bob.Executor, SubscriptionIDPK int64, cols ...string) (*SubforumSubscription, error) {
	if len(cols) == 0 {
		return SubforumSubscriptions.Query(
			SelectWhere.SubforumSubscriptions.SubscriptionID.EQ(SubscriptionIDPK),
		).One(ctx, exec)
	}

	return SubforumSubscriptions.Query(
		SelectWhere.SubforumSubscriptions.SubscriptionID.EQ(SubscriptionIDPK),
		sm.Columns(SubforumSubscriptions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SubforumSubscriptionExists checks the presence of a single record by primary key
func SubforumSubscriptionExists(ctx context.Context, exec bob.Executor, SubscriptionIDPK int64) (bool, error) {
	return SubforumSubscriptions.Query(
		SelectWhere.SubforumSubscriptions.SubscriptionID.EQ(SubscriptionIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after SubforumSubscription is retrieved from the database
func (o *SubforumSubscription) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SubforumSubscriptions.AfterSelectHooks.RunHooks(ctx, exec, SubforumSubscriptionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = SubforumSubscriptions.AfterInsertHooks.RunHooks(ctx, exec, SubforumSubscriptionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = SubforumSubscriptions.AfterUpdateHooks.RunHooks(ctx, exec, SubforumSubscriptionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = SubforumSubscriptions.AfterDeleteHooks.RunHooks(ctx, exec, SubforumSubscriptionSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the SubforumSubscription
func (o *SubforumSubscription) primaryKeyVals() bob.Expression {
	return psql.Arg(o.SubscriptionID)
}

func (o *SubforumSubscription) pkEQ() dialect.Expression {
	return psql.Quote("subforum_subscriptions", "subscription_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the SubforumSubscription
func (o *SubforumSubscription) Update(ctx context.Context, exec bob.Executor, s *SubforumSubscriptionSetter) error {
	v, err := SubforumSubscriptions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single SubforumSubscription record with an executor
func (o *SubforumSubscription) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := SubforumSubscriptions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the SubforumSubscription using the executor
func (o *SubforumSubscription) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := SubforumSubscriptions.Query(
		SelectWhere.SubforumSubscriptions.SubscriptionID.EQ(o.SubscriptionID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after SubforumSubscriptionSlice is retrieved from the database
func (o SubforumSubscriptionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SubforumSubscriptions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = SubforumSubscriptions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = SubforumSubscriptions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = SubforumSubscriptions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SubforumSubscriptionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("subforum_subscriptions", "subscription_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SubforumSubscriptionSlice) copyMatchingRows(from ...*SubforumSubscription) {
	for i, old := range o {
		for _, new := range from {
			if new.SubscriptionID != old.SubscriptionID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SubforumSubscriptionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SubforumSubscriptions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SubforumSubscription:
				o.copyMatchingRows(retrieved)
			case []*SubforumSubscription:
				o.copyMatchingRows(retrieved...)
			case SubforumSubscriptionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SubforumSubscription or a slice of SubforumSubscription
				// then run the AfterUpdateHooks on the slice
				_, err = SubforumSubscriptions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SubforumSubscriptionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SubforumSubscriptions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SubforumSubscription:
				o.copyMatchingRows(retrieved)
			case []*SubforumSubscription:
				o.copyMatchingRows(retrieved...)
			case SubforumSubscriptionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SubforumSubscription or a slice of SubforumSubscription
				// then run the AfterDeleteHooks on the slice
				_, err = SubforumSubscriptions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SubforumSubscriptionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SubforumSubscriptionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SubforumSubscriptions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o SubforumSubscriptionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SubforumSubscriptions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SubforumSubscriptionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := SubforumSubscriptions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type subforumSubscriptionJoins[Q dialect.Joinable] struct {
	typ       string
	Pseudonym modAs[Q, pseudonymColumns]
	Subforum  modAs[Q, subforumColumns]
}

func (j subforumSubscriptionJoins[Q]) aliasedAs(alias string) subforumSubscriptionJoins[Q] {
	return buildSubforumSubscriptionJoins[Q](buildSubforumSubscriptionColumns(alias), j.typ)
}

func buildSubforumSubscriptionJoins[Q dialect.Joinable](cols subforumSubscriptionColumns, typ string) subforumSubscriptionJoins[Q] {
	return subforumSubscriptionJoins[Q]{
		typ: typ,
		Pseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.PseudonymID),
					))
				}

				return mods
			},
		},
		Subforum: modAs[Q, subforumColumns]{
			c: SubforumColumns,
			f: func(to subforumColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Subforums.Name().As(to.Alias())).On(
						to.SubforumID.EQ(cols.SubforumID),
					))
				}

				return mods
			},
		},
	}
}

// Pseudonym starts a query for related objects on pseudonyms
func (o *SubforumSubscription) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.PseudonymID))),
	)...)
}

func (os SubforumSubscriptionSlice) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkPseudonymID[i] = o.PseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

// Subforum starts a query for related objects on subforums
func (o *SubforumSubscription) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	return Subforums.Query(append(mods,
		sm.Where(SubforumColumns.SubforumID.EQ(psql.Arg(o.SubforumID))),
	)...)
}

func (os SubforumSubscriptionSlice) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	pkSubforumID := make(pgtypes.Array[int32], len(os))
	for i, o := range os {
		pkSubforumID[i] = o.SubforumID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkSubforumID), "integer[]")),
	))

	return Subforums.Query(append(mods,
		sm.Where(psql.Group(SubforumColumns.SubforumID).OP("IN", PKArgExpr)),
	)...)
}

func (o *SubforumSubscription) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Pseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("subforumSubscription cannot load %T as %q", retrieved, name)
		}

		o.R.Pseudonym = rel

		if rel != nil {
			rel.R.SubforumSubscriptions = SubforumSubscriptionSlice{o}
		}
		return nil
	case "Subforum":
		rel, ok := retrieved.(*Subforum)
		if !ok {
			return fmt.Errorf("subforumSubscription cannot load %T as %q", retrieved, name)
		}

		o.R.Subforum = rel

		if rel != nil {
			rel.R.SubforumSubscriptions = SubforumSubscriptionSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("subforumSubscription has no relationship %q", name)
	}
}

type subforumSubscriptionPreloader struct {
	Pseudonym func(...psql.PreloadOption) psql.Preloader
	Subforum  func(...psql.PreloadOption) psql.Preloader
}

func buildSubforumSubscriptionPreloader() subforumSubscriptionPreloader {
	return subforumSubscriptionPreloader{
		Pseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "Pseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.SubforumSubscriptions,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.SubforumSubscriptions.PseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
		Subforum: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Subforum, SubforumSlice](orm.Relationship{
				Name: "Subforum",
				Sides: []orm.RelSide{
					{
						From: TableNames.SubforumSubscriptions,
						To:   TableNames.Subforums,
						FromColumns: []string{
							ColumnNames.SubforumSubscriptions.SubforumID,
						},
						ToColumns: []string{
							ColumnNames.Subforums.SubforumID,
						},
					},
				},
			}, Subforums.Columns().Names(), opts...)
		},
	}
}

type subforumSubscriptionThenLoader[Q orm.Loadable] struct {
	Pseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Subforum  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildSubforumSubscriptionThenLoader[Q orm.Loadable]() subforumSubscriptionThenLoader[Q] {
	type PseudonymLoadInterface interface {
		LoadPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type SubforumLoadInterface interface {
		LoadSubforum(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return subforumSubscriptionThenLoader[Q]{
		Pseudonym: thenLoadBuilder[Q](
			"Pseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved PseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPseudonym(ctx, exec, mods...)
			},
		),
		Subforum: thenLoadBuilder[Q](
			"Subforum",
			func(ctx context.Context, exec bob.Executor, retrieved SubforumLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadSubforum(ctx, exec, mods...)
			},
		),
	}
}

// LoadPseudonym loads the subforumSubscription's Pseudonym into the .R struct
func (o *SubforumSubscription) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Pseudonym = nil

	related, err := o.Pseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SubforumSubscriptions = SubforumSubscriptionSlice{o}

	o.R.Pseudonym = related
	return nil
}

// LoadPseudonym loads the subforumSubscription's Pseudonym into the .R struct
func (os SubforumSubscriptionSlice) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.Pseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.PseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.SubforumSubscriptions = append(rel.R.SubforumSubscriptions, o)

			o.R.Pseudonym = rel
			break
		}
	}

	return nil
}

// LoadSubforum loads the subforumSubscription's Subforum into the .R struct
func (o *SubforumSubscription) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Subforum = nil

	related, err := o.Subforum(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SubforumSubscriptions = SubforumSubscriptionSlice{o}

	o.R.Subforum = related
	return nil
}

// LoadSubforum loads the subforumSubscription's Subforum into the .R struct
func (os SubforumSubscriptionSlice) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	subforums, err := os.Subforum(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range subforums {
			if o.SubforumID != rel.SubforumID {
				continue
			}

			rel.R.SubforumSubscriptions = append(rel.R.SubforumSubscriptions, o)

			o.R.Subforum = rel
			break
		}
	}

	return nil
}

func attachSubforumSubscriptionPseudonym0(ctx context.Context, exec bob.Executor, count int, subforumSubscription0 *SubforumSubscription, pseudonym1 *Pseudonym) (*SubforumSubscription, error) {
	setter := &SubforumSubscriptionSetter{
		PseudonymID: &pseudonym1.PseudonymID,
	}

	err := subforumSubscription0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSubforumSubscriptionPseudonym0: %w", err)
	}

	return subforumSubscription0, nil
}

func (subforumSubscription0 *SubforumSubscription) InsertPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSubforumSubscriptionPseudonym0(ctx, exec, 1, subforumSubscription0, pseudonym1)
	if err != nil {
		return err
	}

	subforumSubscription0.R.Pseudonym = pseudonym1

	pseudonym1.R.SubforumSubscriptions = append(pseudonym1.R.SubforumSubscriptions, subforumSubscription0)

	return nil
}

func (subforumSubscription0 *SubforumSubscription) AttachPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachSubforumSubscriptionPseudonym0(ctx, exec, 1, subforumSubscription0, pseudonym1)
	if err != nil {
		return err
	}

	subforumSubscription0.R.Pseudonym = pseudonym1

	pseudonym1.R.SubforumSubscriptions = append(pseudonym1.R.SubforumSubscriptions, subforumSubscription0)

	return nil
}

func attachSubforumSubscriptionSubforum0(ctx context.Context, exec bob.Executor, count int, subforumSubscription0 *SubforumSubscription, subforum1 *Subforum) (*SubforumSubscription, error) {
	setter := &SubforumSubscriptionSetter{
		SubforumID: &subforum1.SubforumID,
	}

	err := subforumSubscription0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSubforumSubscriptionSubforum0: %w", err)
	}

	return subforumSubscription0, nil
}

func (subforumSubscription0 *SubforumSubscription) InsertSubforum(ctx context.Context, exec bob.Executor, related *SubforumSetter) error {
	subforum1, err := Subforums.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSubforumSubscriptionSubforum0(ctx, exec, 1, subforumSubscription0, subforum1)
	if err != nil {
		return err
	}

	subforumSubscription0.R.Subforum = subforum1

	subforum1.R.SubforumSubscriptions = append(subforum1.R.SubforumSubscriptions, subforumSubscription0)

	return nil
}

func (subforumSubscription0 *SubforumSubscription) AttachSubforum(ctx context.Context, exec bob.Executor, subforum1 *Subforum) error {
	var err error

	_, err = attachSubforumSubscriptionSubforum0(ctx, exec, 1, subforumSubscription0, subforum1)
	if err != nil {
		return err
	}

	subforumSubscription0.R.Subforum = subforum1

	subforum1.R.SubforumSubscriptions = append(subforum1.R.SubforumSubscriptions, subforumSubscription0)

	return nil
}
