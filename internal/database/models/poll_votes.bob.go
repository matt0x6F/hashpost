// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// PollVote is an object representing the database table.
type PollVote struct {
	VoteID          int64                       `db:"vote_id,pk" scan:"vote_id" json:"vote_id"`
	PollID          int64                       `db:"poll_id" scan:"poll_id" json:"poll_id"`
	PseudonymID     string                      `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	SelectedOptions types.JSON[json.RawMessage] `db:"selected_options" scan:"selected_options" json:"selected_options"`
	CreatedAt       sql.Null[time.Time]         `db:"created_at" scan:"created_at" json:"created_at"`

	R pollVoteR `db:"-" scan:"rel" json:"rel"`
}

// PollVoteSlice is an alias for a slice of pointers to PollVote.
// This should almost always be used instead of []*PollVote.
type PollVoteSlice []*PollVote

// PollVotes contains methods to work with the poll_votes table
var PollVotes = psql.NewTablex[*PollVote, PollVoteSlice, *PollVoteSetter]("", "poll_votes")

// PollVotesQuery is a query on the poll_votes table
type PollVotesQuery = *psql.ViewQuery[*PollVote, PollVoteSlice]

// pollVoteR is where relationships are stored.
type pollVoteR struct {
	Poll      *Poll      `scan:"Poll" json:"Poll"`           // poll_votes.poll_votes_poll_id_fkey
	Pseudonym *Pseudonym `scan:"Pseudonym" json:"Pseudonym"` // poll_votes.poll_votes_pseudonym_id_fkey
}

type pollVoteColumnNames struct {
	VoteID          string
	PollID          string
	PseudonymID     string
	SelectedOptions string
	CreatedAt       string
}

var PollVoteColumns = buildPollVoteColumns("poll_votes")

type pollVoteColumns struct {
	tableAlias      string
	VoteID          psql.Expression
	PollID          psql.Expression
	PseudonymID     psql.Expression
	SelectedOptions psql.Expression
	CreatedAt       psql.Expression
}

func (c pollVoteColumns) Alias() string {
	return c.tableAlias
}

func (pollVoteColumns) AliasedAs(alias string) pollVoteColumns {
	return buildPollVoteColumns(alias)
}

func buildPollVoteColumns(alias string) pollVoteColumns {
	return pollVoteColumns{
		tableAlias:      alias,
		VoteID:          psql.Quote(alias, "vote_id"),
		PollID:          psql.Quote(alias, "poll_id"),
		PseudonymID:     psql.Quote(alias, "pseudonym_id"),
		SelectedOptions: psql.Quote(alias, "selected_options"),
		CreatedAt:       psql.Quote(alias, "created_at"),
	}
}

type pollVoteWhere[Q psql.Filterable] struct {
	VoteID          psql.WhereMod[Q, int64]
	PollID          psql.WhereMod[Q, int64]
	PseudonymID     psql.WhereMod[Q, string]
	SelectedOptions psql.WhereMod[Q, types.JSON[json.RawMessage]]
	CreatedAt       psql.WhereNullMod[Q, time.Time]
}

func (pollVoteWhere[Q]) AliasedAs(alias string) pollVoteWhere[Q] {
	return buildPollVoteWhere[Q](buildPollVoteColumns(alias))
}

func buildPollVoteWhere[Q psql.Filterable](cols pollVoteColumns) pollVoteWhere[Q] {
	return pollVoteWhere[Q]{
		VoteID:          psql.Where[Q, int64](cols.VoteID),
		PollID:          psql.Where[Q, int64](cols.PollID),
		PseudonymID:     psql.Where[Q, string](cols.PseudonymID),
		SelectedOptions: psql.Where[Q, types.JSON[json.RawMessage]](cols.SelectedOptions),
		CreatedAt:       psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var PollVoteErrors = &pollVoteErrors{
	ErrUniquePollVotesPkey: &UniqueConstraintError{
		schema:  "",
		table:   "poll_votes",
		columns: []string{"vote_id"},
		s:       "poll_votes_pkey",
	},

	ErrUniquePollVotesPollIdPseudonymIdKey: &UniqueConstraintError{
		schema:  "",
		table:   "poll_votes",
		columns: []string{"poll_id", "pseudonym_id"},
		s:       "poll_votes_poll_id_pseudonym_id_key",
	},
}

type pollVoteErrors struct {
	ErrUniquePollVotesPkey *UniqueConstraintError

	ErrUniquePollVotesPollIdPseudonymIdKey *UniqueConstraintError
}

// PollVoteSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PollVoteSetter struct {
	VoteID          *int64                       `db:"vote_id,pk" scan:"vote_id" json:"vote_id"`
	PollID          *int64                       `db:"poll_id" scan:"poll_id" json:"poll_id"`
	PseudonymID     *string                      `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	SelectedOptions *types.JSON[json.RawMessage] `db:"selected_options" scan:"selected_options" json:"selected_options"`
	CreatedAt       *sql.Null[time.Time]         `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s PollVoteSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.VoteID != nil {
		vals = append(vals, "vote_id")
	}

	if s.PollID != nil {
		vals = append(vals, "poll_id")
	}

	if s.PseudonymID != nil {
		vals = append(vals, "pseudonym_id")
	}

	if s.SelectedOptions != nil {
		vals = append(vals, "selected_options")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s PollVoteSetter) Overwrite(t *PollVote) {
	if s.VoteID != nil {
		t.VoteID = *s.VoteID
	}
	if s.PollID != nil {
		t.PollID = *s.PollID
	}
	if s.PseudonymID != nil {
		t.PseudonymID = *s.PseudonymID
	}
	if s.SelectedOptions != nil {
		t.SelectedOptions = *s.SelectedOptions
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *PollVoteSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return PollVotes.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.VoteID != nil {
			vals[0] = psql.Arg(*s.VoteID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.PollID != nil {
			vals[1] = psql.Arg(*s.PollID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.PseudonymID != nil {
			vals[2] = psql.Arg(*s.PseudonymID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.SelectedOptions != nil {
			vals[3] = psql.Arg(*s.SelectedOptions)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[4] = psql.Arg(*s.CreatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PollVoteSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s PollVoteSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.VoteID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "vote_id")...),
			psql.Arg(s.VoteID),
		}})
	}

	if s.PollID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "poll_id")...),
			psql.Arg(s.PollID),
		}})
	}

	if s.PseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pseudonym_id")...),
			psql.Arg(s.PseudonymID),
		}})
	}

	if s.SelectedOptions != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "selected_options")...),
			psql.Arg(s.SelectedOptions),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindPollVote retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPollVote(ctx context.Context, exec bob.Executor, VoteIDPK int64, cols ...string) (*PollVote, error) {
	if len(cols) == 0 {
		return PollVotes.Query(
			SelectWhere.PollVotes.VoteID.EQ(VoteIDPK),
		).One(ctx, exec)
	}

	return PollVotes.Query(
		SelectWhere.PollVotes.VoteID.EQ(VoteIDPK),
		sm.Columns(PollVotes.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PollVoteExists checks the presence of a single record by primary key
func PollVoteExists(ctx context.Context, exec bob.Executor, VoteIDPK int64) (bool, error) {
	return PollVotes.Query(
		SelectWhere.PollVotes.VoteID.EQ(VoteIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after PollVote is retrieved from the database
func (o *PollVote) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PollVotes.AfterSelectHooks.RunHooks(ctx, exec, PollVoteSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = PollVotes.AfterInsertHooks.RunHooks(ctx, exec, PollVoteSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = PollVotes.AfterUpdateHooks.RunHooks(ctx, exec, PollVoteSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = PollVotes.AfterDeleteHooks.RunHooks(ctx, exec, PollVoteSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the PollVote
func (o *PollVote) primaryKeyVals() bob.Expression {
	return psql.Arg(o.VoteID)
}

func (o *PollVote) pkEQ() dialect.Expression {
	return psql.Quote("poll_votes", "vote_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the PollVote
func (o *PollVote) Update(ctx context.Context, exec bob.Executor, s *PollVoteSetter) error {
	v, err := PollVotes.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single PollVote record with an executor
func (o *PollVote) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := PollVotes.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the PollVote using the executor
func (o *PollVote) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := PollVotes.Query(
		SelectWhere.PollVotes.VoteID.EQ(o.VoteID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after PollVoteSlice is retrieved from the database
func (o PollVoteSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PollVotes.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = PollVotes.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = PollVotes.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = PollVotes.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PollVoteSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("poll_votes", "vote_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PollVoteSlice) copyMatchingRows(from ...*PollVote) {
	for i, old := range o {
		for _, new := range from {
			if new.VoteID != old.VoteID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PollVoteSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PollVotes.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PollVote:
				o.copyMatchingRows(retrieved)
			case []*PollVote:
				o.copyMatchingRows(retrieved...)
			case PollVoteSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PollVote or a slice of PollVote
				// then run the AfterUpdateHooks on the slice
				_, err = PollVotes.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PollVoteSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PollVotes.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PollVote:
				o.copyMatchingRows(retrieved)
			case []*PollVote:
				o.copyMatchingRows(retrieved...)
			case PollVoteSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PollVote or a slice of PollVote
				// then run the AfterDeleteHooks on the slice
				_, err = PollVotes.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PollVoteSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PollVoteSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PollVotes.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o PollVoteSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PollVotes.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PollVoteSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := PollVotes.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type pollVoteJoins[Q dialect.Joinable] struct {
	typ       string
	Poll      modAs[Q, pollColumns]
	Pseudonym modAs[Q, pseudonymColumns]
}

func (j pollVoteJoins[Q]) aliasedAs(alias string) pollVoteJoins[Q] {
	return buildPollVoteJoins[Q](buildPollVoteColumns(alias), j.typ)
}

func buildPollVoteJoins[Q dialect.Joinable](cols pollVoteColumns, typ string) pollVoteJoins[Q] {
	return pollVoteJoins[Q]{
		typ: typ,
		Poll: modAs[Q, pollColumns]{
			c: PollColumns,
			f: func(to pollColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Polls.Name().As(to.Alias())).On(
						to.PollID.EQ(cols.PollID),
					))
				}

				return mods
			},
		},
		Pseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.PseudonymID),
					))
				}

				return mods
			},
		},
	}
}

// Poll starts a query for related objects on polls
func (o *PollVote) Poll(mods ...bob.Mod[*dialect.SelectQuery]) PollsQuery {
	return Polls.Query(append(mods,
		sm.Where(PollColumns.PollID.EQ(psql.Arg(o.PollID))),
	)...)
}

func (os PollVoteSlice) Poll(mods ...bob.Mod[*dialect.SelectQuery]) PollsQuery {
	pkPollID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkPollID[i] = o.PollID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPollID), "bigint[]")),
	))

	return Polls.Query(append(mods,
		sm.Where(psql.Group(PollColumns.PollID).OP("IN", PKArgExpr)),
	)...)
}

// Pseudonym starts a query for related objects on pseudonyms
func (o *PollVote) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.PseudonymID))),
	)...)
}

func (os PollVoteSlice) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkPseudonymID[i] = o.PseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

func (o *PollVote) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Poll":
		rel, ok := retrieved.(*Poll)
		if !ok {
			return fmt.Errorf("pollVote cannot load %T as %q", retrieved, name)
		}

		o.R.Poll = rel

		if rel != nil {
			rel.R.PollVotes = PollVoteSlice{o}
		}
		return nil
	case "Pseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("pollVote cannot load %T as %q", retrieved, name)
		}

		o.R.Pseudonym = rel

		if rel != nil {
			rel.R.PollVotes = PollVoteSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("pollVote has no relationship %q", name)
	}
}

type pollVotePreloader struct {
	Poll      func(...psql.PreloadOption) psql.Preloader
	Pseudonym func(...psql.PreloadOption) psql.Preloader
}

func buildPollVotePreloader() pollVotePreloader {
	return pollVotePreloader{
		Poll: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Poll, PollSlice](orm.Relationship{
				Name: "Poll",
				Sides: []orm.RelSide{
					{
						From: TableNames.PollVotes,
						To:   TableNames.Polls,
						FromColumns: []string{
							ColumnNames.PollVotes.PollID,
						},
						ToColumns: []string{
							ColumnNames.Polls.PollID,
						},
					},
				},
			}, Polls.Columns().Names(), opts...)
		},
		Pseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "Pseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.PollVotes,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.PollVotes.PseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
	}
}

type pollVoteThenLoader[Q orm.Loadable] struct {
	Poll      func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Pseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildPollVoteThenLoader[Q orm.Loadable]() pollVoteThenLoader[Q] {
	type PollLoadInterface interface {
		LoadPoll(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type PseudonymLoadInterface interface {
		LoadPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return pollVoteThenLoader[Q]{
		Poll: thenLoadBuilder[Q](
			"Poll",
			func(ctx context.Context, exec bob.Executor, retrieved PollLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPoll(ctx, exec, mods...)
			},
		),
		Pseudonym: thenLoadBuilder[Q](
			"Pseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved PseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPseudonym(ctx, exec, mods...)
			},
		),
	}
}

// LoadPoll loads the pollVote's Poll into the .R struct
func (o *PollVote) LoadPoll(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Poll = nil

	related, err := o.Poll(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.PollVotes = PollVoteSlice{o}

	o.R.Poll = related
	return nil
}

// LoadPoll loads the pollVote's Poll into the .R struct
func (os PollVoteSlice) LoadPoll(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	polls, err := os.Poll(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range polls {
			if o.PollID != rel.PollID {
				continue
			}

			rel.R.PollVotes = append(rel.R.PollVotes, o)

			o.R.Poll = rel
			break
		}
	}

	return nil
}

// LoadPseudonym loads the pollVote's Pseudonym into the .R struct
func (o *PollVote) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Pseudonym = nil

	related, err := o.Pseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.PollVotes = PollVoteSlice{o}

	o.R.Pseudonym = related
	return nil
}

// LoadPseudonym loads the pollVote's Pseudonym into the .R struct
func (os PollVoteSlice) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.Pseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.PseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.PollVotes = append(rel.R.PollVotes, o)

			o.R.Pseudonym = rel
			break
		}
	}

	return nil
}

func attachPollVotePoll0(ctx context.Context, exec bob.Executor, count int, pollVote0 *PollVote, poll1 *Poll) (*PollVote, error) {
	setter := &PollVoteSetter{
		PollID: &poll1.PollID,
	}

	err := pollVote0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPollVotePoll0: %w", err)
	}

	return pollVote0, nil
}

func (pollVote0 *PollVote) InsertPoll(ctx context.Context, exec bob.Executor, related *PollSetter) error {
	poll1, err := Polls.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPollVotePoll0(ctx, exec, 1, pollVote0, poll1)
	if err != nil {
		return err
	}

	pollVote0.R.Poll = poll1

	poll1.R.PollVotes = append(poll1.R.PollVotes, pollVote0)

	return nil
}

func (pollVote0 *PollVote) AttachPoll(ctx context.Context, exec bob.Executor, poll1 *Poll) error {
	var err error

	_, err = attachPollVotePoll0(ctx, exec, 1, pollVote0, poll1)
	if err != nil {
		return err
	}

	pollVote0.R.Poll = poll1

	poll1.R.PollVotes = append(poll1.R.PollVotes, pollVote0)

	return nil
}

func attachPollVotePseudonym0(ctx context.Context, exec bob.Executor, count int, pollVote0 *PollVote, pseudonym1 *Pseudonym) (*PollVote, error) {
	setter := &PollVoteSetter{
		PseudonymID: &pseudonym1.PseudonymID,
	}

	err := pollVote0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPollVotePseudonym0: %w", err)
	}

	return pollVote0, nil
}

func (pollVote0 *PollVote) InsertPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPollVotePseudonym0(ctx, exec, 1, pollVote0, pseudonym1)
	if err != nil {
		return err
	}

	pollVote0.R.Pseudonym = pseudonym1

	pseudonym1.R.PollVotes = append(pseudonym1.R.PollVotes, pollVote0)

	return nil
}

func (pollVote0 *PollVote) AttachPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachPollVotePseudonym0(ctx, exec, 1, pollVote0, pseudonym1)
	if err != nil {
		return err
	}

	pollVote0.R.Pseudonym = pseudonym1

	pseudonym1.R.PollVotes = append(pseudonym1.R.PollVotes, pollVote0)

	return nil
}
