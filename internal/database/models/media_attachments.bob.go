// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// MediaAttachment is an object representing the database table.
type MediaAttachment struct {
	AttachmentID    int64               `db:"attachment_id,pk" scan:"attachment_id" json:"attachment_id"`
	PostID          int64               `db:"post_id" scan:"post_id" json:"post_id"`
	FileName        string              `db:"file_name" scan:"file_name" json:"file_name"`
	FilePath        string              `db:"file_path" scan:"file_path" json:"file_path"`
	FileSize        int64               `db:"file_size" scan:"file_size" json:"file_size"`
	MimeType        string              `db:"mime_type" scan:"mime_type" json:"mime_type"`
	Width           sql.Null[int32]     `db:"width" scan:"width" json:"width"`
	Height          sql.Null[int32]     `db:"height" scan:"height" json:"height"`
	DurationSeconds sql.Null[int32]     `db:"duration_seconds" scan:"duration_seconds" json:"duration_seconds"`
	CreatedAt       sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`

	R mediaAttachmentR `db:"-" scan:"rel" json:"rel"`
}

// MediaAttachmentSlice is an alias for a slice of pointers to MediaAttachment.
// This should almost always be used instead of []*MediaAttachment.
type MediaAttachmentSlice []*MediaAttachment

// MediaAttachments contains methods to work with the media_attachments table
var MediaAttachments = psql.NewTablex[*MediaAttachment, MediaAttachmentSlice, *MediaAttachmentSetter]("", "media_attachments")

// MediaAttachmentsQuery is a query on the media_attachments table
type MediaAttachmentsQuery = *psql.ViewQuery[*MediaAttachment, MediaAttachmentSlice]

// mediaAttachmentR is where relationships are stored.
type mediaAttachmentR struct {
	Post *Post `scan:"Post" json:"Post"` // media_attachments.media_attachments_post_id_fkey
}

type mediaAttachmentColumnNames struct {
	AttachmentID    string
	PostID          string
	FileName        string
	FilePath        string
	FileSize        string
	MimeType        string
	Width           string
	Height          string
	DurationSeconds string
	CreatedAt       string
}

var MediaAttachmentColumns = buildMediaAttachmentColumns("media_attachments")

type mediaAttachmentColumns struct {
	tableAlias      string
	AttachmentID    psql.Expression
	PostID          psql.Expression
	FileName        psql.Expression
	FilePath        psql.Expression
	FileSize        psql.Expression
	MimeType        psql.Expression
	Width           psql.Expression
	Height          psql.Expression
	DurationSeconds psql.Expression
	CreatedAt       psql.Expression
}

func (c mediaAttachmentColumns) Alias() string {
	return c.tableAlias
}

func (mediaAttachmentColumns) AliasedAs(alias string) mediaAttachmentColumns {
	return buildMediaAttachmentColumns(alias)
}

func buildMediaAttachmentColumns(alias string) mediaAttachmentColumns {
	return mediaAttachmentColumns{
		tableAlias:      alias,
		AttachmentID:    psql.Quote(alias, "attachment_id"),
		PostID:          psql.Quote(alias, "post_id"),
		FileName:        psql.Quote(alias, "file_name"),
		FilePath:        psql.Quote(alias, "file_path"),
		FileSize:        psql.Quote(alias, "file_size"),
		MimeType:        psql.Quote(alias, "mime_type"),
		Width:           psql.Quote(alias, "width"),
		Height:          psql.Quote(alias, "height"),
		DurationSeconds: psql.Quote(alias, "duration_seconds"),
		CreatedAt:       psql.Quote(alias, "created_at"),
	}
}

type mediaAttachmentWhere[Q psql.Filterable] struct {
	AttachmentID    psql.WhereMod[Q, int64]
	PostID          psql.WhereMod[Q, int64]
	FileName        psql.WhereMod[Q, string]
	FilePath        psql.WhereMod[Q, string]
	FileSize        psql.WhereMod[Q, int64]
	MimeType        psql.WhereMod[Q, string]
	Width           psql.WhereNullMod[Q, int32]
	Height          psql.WhereNullMod[Q, int32]
	DurationSeconds psql.WhereNullMod[Q, int32]
	CreatedAt       psql.WhereNullMod[Q, time.Time]
}

func (mediaAttachmentWhere[Q]) AliasedAs(alias string) mediaAttachmentWhere[Q] {
	return buildMediaAttachmentWhere[Q](buildMediaAttachmentColumns(alias))
}

func buildMediaAttachmentWhere[Q psql.Filterable](cols mediaAttachmentColumns) mediaAttachmentWhere[Q] {
	return mediaAttachmentWhere[Q]{
		AttachmentID:    psql.Where[Q, int64](cols.AttachmentID),
		PostID:          psql.Where[Q, int64](cols.PostID),
		FileName:        psql.Where[Q, string](cols.FileName),
		FilePath:        psql.Where[Q, string](cols.FilePath),
		FileSize:        psql.Where[Q, int64](cols.FileSize),
		MimeType:        psql.Where[Q, string](cols.MimeType),
		Width:           psql.WhereNull[Q, int32](cols.Width),
		Height:          psql.WhereNull[Q, int32](cols.Height),
		DurationSeconds: psql.WhereNull[Q, int32](cols.DurationSeconds),
		CreatedAt:       psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var MediaAttachmentErrors = &mediaAttachmentErrors{
	ErrUniqueMediaAttachmentsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "media_attachments",
		columns: []string{"attachment_id"},
		s:       "media_attachments_pkey",
	},
}

type mediaAttachmentErrors struct {
	ErrUniqueMediaAttachmentsPkey *UniqueConstraintError
}

// MediaAttachmentSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type MediaAttachmentSetter struct {
	AttachmentID    *int64               `db:"attachment_id,pk" scan:"attachment_id" json:"attachment_id"`
	PostID          *int64               `db:"post_id" scan:"post_id" json:"post_id"`
	FileName        *string              `db:"file_name" scan:"file_name" json:"file_name"`
	FilePath        *string              `db:"file_path" scan:"file_path" json:"file_path"`
	FileSize        *int64               `db:"file_size" scan:"file_size" json:"file_size"`
	MimeType        *string              `db:"mime_type" scan:"mime_type" json:"mime_type"`
	Width           *sql.Null[int32]     `db:"width" scan:"width" json:"width"`
	Height          *sql.Null[int32]     `db:"height" scan:"height" json:"height"`
	DurationSeconds *sql.Null[int32]     `db:"duration_seconds" scan:"duration_seconds" json:"duration_seconds"`
	CreatedAt       *sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s MediaAttachmentSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.AttachmentID != nil {
		vals = append(vals, "attachment_id")
	}

	if s.PostID != nil {
		vals = append(vals, "post_id")
	}

	if s.FileName != nil {
		vals = append(vals, "file_name")
	}

	if s.FilePath != nil {
		vals = append(vals, "file_path")
	}

	if s.FileSize != nil {
		vals = append(vals, "file_size")
	}

	if s.MimeType != nil {
		vals = append(vals, "mime_type")
	}

	if s.Width != nil {
		vals = append(vals, "width")
	}

	if s.Height != nil {
		vals = append(vals, "height")
	}

	if s.DurationSeconds != nil {
		vals = append(vals, "duration_seconds")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s MediaAttachmentSetter) Overwrite(t *MediaAttachment) {
	if s.AttachmentID != nil {
		t.AttachmentID = *s.AttachmentID
	}
	if s.PostID != nil {
		t.PostID = *s.PostID
	}
	if s.FileName != nil {
		t.FileName = *s.FileName
	}
	if s.FilePath != nil {
		t.FilePath = *s.FilePath
	}
	if s.FileSize != nil {
		t.FileSize = *s.FileSize
	}
	if s.MimeType != nil {
		t.MimeType = *s.MimeType
	}
	if s.Width != nil {
		t.Width = *s.Width
	}
	if s.Height != nil {
		t.Height = *s.Height
	}
	if s.DurationSeconds != nil {
		t.DurationSeconds = *s.DurationSeconds
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *MediaAttachmentSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return MediaAttachments.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.AttachmentID != nil {
			vals[0] = psql.Arg(*s.AttachmentID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.PostID != nil {
			vals[1] = psql.Arg(*s.PostID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.FileName != nil {
			vals[2] = psql.Arg(*s.FileName)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.FilePath != nil {
			vals[3] = psql.Arg(*s.FilePath)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.FileSize != nil {
			vals[4] = psql.Arg(*s.FileSize)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.MimeType != nil {
			vals[5] = psql.Arg(*s.MimeType)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Width != nil {
			vals[6] = psql.Arg(*s.Width)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Height != nil {
			vals[7] = psql.Arg(*s.Height)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.DurationSeconds != nil {
			vals[8] = psql.Arg(*s.DurationSeconds)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[9] = psql.Arg(*s.CreatedAt)
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s MediaAttachmentSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s MediaAttachmentSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.AttachmentID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "attachment_id")...),
			psql.Arg(s.AttachmentID),
		}})
	}

	if s.PostID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "post_id")...),
			psql.Arg(s.PostID),
		}})
	}

	if s.FileName != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "file_name")...),
			psql.Arg(s.FileName),
		}})
	}

	if s.FilePath != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "file_path")...),
			psql.Arg(s.FilePath),
		}})
	}

	if s.FileSize != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "file_size")...),
			psql.Arg(s.FileSize),
		}})
	}

	if s.MimeType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "mime_type")...),
			psql.Arg(s.MimeType),
		}})
	}

	if s.Width != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "width")...),
			psql.Arg(s.Width),
		}})
	}

	if s.Height != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "height")...),
			psql.Arg(s.Height),
		}})
	}

	if s.DurationSeconds != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "duration_seconds")...),
			psql.Arg(s.DurationSeconds),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindMediaAttachment retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindMediaAttachment(ctx context.Context, exec bob.Executor, AttachmentIDPK int64, cols ...string) (*MediaAttachment, error) {
	if len(cols) == 0 {
		return MediaAttachments.Query(
			SelectWhere.MediaAttachments.AttachmentID.EQ(AttachmentIDPK),
		).One(ctx, exec)
	}

	return MediaAttachments.Query(
		SelectWhere.MediaAttachments.AttachmentID.EQ(AttachmentIDPK),
		sm.Columns(MediaAttachments.Columns().Only(cols...)),
	).One(ctx, exec)
}

// MediaAttachmentExists checks the presence of a single record by primary key
func MediaAttachmentExists(ctx context.Context, exec bob.Executor, AttachmentIDPK int64) (bool, error) {
	return MediaAttachments.Query(
		SelectWhere.MediaAttachments.AttachmentID.EQ(AttachmentIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after MediaAttachment is retrieved from the database
func (o *MediaAttachment) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = MediaAttachments.AfterSelectHooks.RunHooks(ctx, exec, MediaAttachmentSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = MediaAttachments.AfterInsertHooks.RunHooks(ctx, exec, MediaAttachmentSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = MediaAttachments.AfterUpdateHooks.RunHooks(ctx, exec, MediaAttachmentSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = MediaAttachments.AfterDeleteHooks.RunHooks(ctx, exec, MediaAttachmentSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the MediaAttachment
func (o *MediaAttachment) primaryKeyVals() bob.Expression {
	return psql.Arg(o.AttachmentID)
}

func (o *MediaAttachment) pkEQ() dialect.Expression {
	return psql.Quote("media_attachments", "attachment_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the MediaAttachment
func (o *MediaAttachment) Update(ctx context.Context, exec bob.Executor, s *MediaAttachmentSetter) error {
	v, err := MediaAttachments.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single MediaAttachment record with an executor
func (o *MediaAttachment) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := MediaAttachments.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the MediaAttachment using the executor
func (o *MediaAttachment) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := MediaAttachments.Query(
		SelectWhere.MediaAttachments.AttachmentID.EQ(o.AttachmentID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after MediaAttachmentSlice is retrieved from the database
func (o MediaAttachmentSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = MediaAttachments.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = MediaAttachments.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = MediaAttachments.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = MediaAttachments.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o MediaAttachmentSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("media_attachments", "attachment_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o MediaAttachmentSlice) copyMatchingRows(from ...*MediaAttachment) {
	for i, old := range o {
		for _, new := range from {
			if new.AttachmentID != old.AttachmentID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o MediaAttachmentSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return MediaAttachments.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *MediaAttachment:
				o.copyMatchingRows(retrieved)
			case []*MediaAttachment:
				o.copyMatchingRows(retrieved...)
			case MediaAttachmentSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a MediaAttachment or a slice of MediaAttachment
				// then run the AfterUpdateHooks on the slice
				_, err = MediaAttachments.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o MediaAttachmentSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return MediaAttachments.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *MediaAttachment:
				o.copyMatchingRows(retrieved)
			case []*MediaAttachment:
				o.copyMatchingRows(retrieved...)
			case MediaAttachmentSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a MediaAttachment or a slice of MediaAttachment
				// then run the AfterDeleteHooks on the slice
				_, err = MediaAttachments.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o MediaAttachmentSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals MediaAttachmentSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := MediaAttachments.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o MediaAttachmentSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := MediaAttachments.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o MediaAttachmentSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := MediaAttachments.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type mediaAttachmentJoins[Q dialect.Joinable] struct {
	typ  string
	Post modAs[Q, postColumns]
}

func (j mediaAttachmentJoins[Q]) aliasedAs(alias string) mediaAttachmentJoins[Q] {
	return buildMediaAttachmentJoins[Q](buildMediaAttachmentColumns(alias), j.typ)
}

func buildMediaAttachmentJoins[Q dialect.Joinable](cols mediaAttachmentColumns, typ string) mediaAttachmentJoins[Q] {
	return mediaAttachmentJoins[Q]{
		typ: typ,
		Post: modAs[Q, postColumns]{
			c: PostColumns,
			f: func(to postColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Posts.Name().As(to.Alias())).On(
						to.PostID.EQ(cols.PostID),
					))
				}

				return mods
			},
		},
	}
}

// Post starts a query for related objects on posts
func (o *MediaAttachment) Post(mods ...bob.Mod[*dialect.SelectQuery]) PostsQuery {
	return Posts.Query(append(mods,
		sm.Where(PostColumns.PostID.EQ(psql.Arg(o.PostID))),
	)...)
}

func (os MediaAttachmentSlice) Post(mods ...bob.Mod[*dialect.SelectQuery]) PostsQuery {
	pkPostID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkPostID[i] = o.PostID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPostID), "bigint[]")),
	))

	return Posts.Query(append(mods,
		sm.Where(psql.Group(PostColumns.PostID).OP("IN", PKArgExpr)),
	)...)
}

func (o *MediaAttachment) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Post":
		rel, ok := retrieved.(*Post)
		if !ok {
			return fmt.Errorf("mediaAttachment cannot load %T as %q", retrieved, name)
		}

		o.R.Post = rel

		if rel != nil {
			rel.R.MediaAttachments = MediaAttachmentSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("mediaAttachment has no relationship %q", name)
	}
}

type mediaAttachmentPreloader struct {
	Post func(...psql.PreloadOption) psql.Preloader
}

func buildMediaAttachmentPreloader() mediaAttachmentPreloader {
	return mediaAttachmentPreloader{
		Post: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Post, PostSlice](orm.Relationship{
				Name: "Post",
				Sides: []orm.RelSide{
					{
						From: TableNames.MediaAttachments,
						To:   TableNames.Posts,
						FromColumns: []string{
							ColumnNames.MediaAttachments.PostID,
						},
						ToColumns: []string{
							ColumnNames.Posts.PostID,
						},
					},
				},
			}, Posts.Columns().Names(), opts...)
		},
	}
}

type mediaAttachmentThenLoader[Q orm.Loadable] struct {
	Post func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildMediaAttachmentThenLoader[Q orm.Loadable]() mediaAttachmentThenLoader[Q] {
	type PostLoadInterface interface {
		LoadPost(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return mediaAttachmentThenLoader[Q]{
		Post: thenLoadBuilder[Q](
			"Post",
			func(ctx context.Context, exec bob.Executor, retrieved PostLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPost(ctx, exec, mods...)
			},
		),
	}
}

// LoadPost loads the mediaAttachment's Post into the .R struct
func (o *MediaAttachment) LoadPost(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Post = nil

	related, err := o.Post(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.MediaAttachments = MediaAttachmentSlice{o}

	o.R.Post = related
	return nil
}

// LoadPost loads the mediaAttachment's Post into the .R struct
func (os MediaAttachmentSlice) LoadPost(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	posts, err := os.Post(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range posts {
			if o.PostID != rel.PostID {
				continue
			}

			rel.R.MediaAttachments = append(rel.R.MediaAttachments, o)

			o.R.Post = rel
			break
		}
	}

	return nil
}

func attachMediaAttachmentPost0(ctx context.Context, exec bob.Executor, count int, mediaAttachment0 *MediaAttachment, post1 *Post) (*MediaAttachment, error) {
	setter := &MediaAttachmentSetter{
		PostID: &post1.PostID,
	}

	err := mediaAttachment0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachMediaAttachmentPost0: %w", err)
	}

	return mediaAttachment0, nil
}

func (mediaAttachment0 *MediaAttachment) InsertPost(ctx context.Context, exec bob.Executor, related *PostSetter) error {
	post1, err := Posts.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachMediaAttachmentPost0(ctx, exec, 1, mediaAttachment0, post1)
	if err != nil {
		return err
	}

	mediaAttachment0.R.Post = post1

	post1.R.MediaAttachments = append(post1.R.MediaAttachments, mediaAttachment0)

	return nil
}

func (mediaAttachment0 *MediaAttachment) AttachPost(ctx context.Context, exec bob.Executor, post1 *Post) error {
	var err error

	_, err = attachMediaAttachmentPost0(ctx, exec, 1, mediaAttachment0, post1)
	if err != nil {
		return err
	}

	mediaAttachment0.R.Post = post1

	post1.R.MediaAttachments = append(post1.R.MediaAttachments, mediaAttachment0)

	return nil
}
