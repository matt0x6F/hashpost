// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Poll is an object representing the database table.
type Poll struct {
	PollID             int64                       `db:"poll_id,pk" scan:"poll_id" json:"poll_id"`
	PostID             int64                       `db:"post_id" scan:"post_id" json:"post_id"`
	Question           string                      `db:"question" scan:"question" json:"question"`
	Options            types.JSON[json.RawMessage] `db:"options" scan:"options" json:"options"`
	AllowMultipleVotes sql.Null[bool]              `db:"allow_multiple_votes" scan:"allow_multiple_votes" json:"allow_multiple_votes"`
	ExpiresAt          sql.Null[time.Time]         `db:"expires_at" scan:"expires_at" json:"expires_at"`
	CreatedAt          sql.Null[time.Time]         `db:"created_at" scan:"created_at" json:"created_at"`

	R pollR `db:"-" scan:"rel" json:"rel"`
}

// PollSlice is an alias for a slice of pointers to Poll.
// This should almost always be used instead of []*Poll.
type PollSlice []*Poll

// Polls contains methods to work with the polls table
var Polls = psql.NewTablex[*Poll, PollSlice, *PollSetter]("", "polls")

// PollsQuery is a query on the polls table
type PollsQuery = *psql.ViewQuery[*Poll, PollSlice]

// pollR is where relationships are stored.
type pollR struct {
	PollVotes PollVoteSlice `scan:"PollVotes" json:"PollVotes"` // poll_votes.poll_votes_poll_id_fkey
	Post      *Post         `scan:"Post" json:"Post"`           // polls.polls_post_id_fkey
}

type pollColumnNames struct {
	PollID             string
	PostID             string
	Question           string
	Options            string
	AllowMultipleVotes string
	ExpiresAt          string
	CreatedAt          string
}

var PollColumns = buildPollColumns("polls")

type pollColumns struct {
	tableAlias         string
	PollID             psql.Expression
	PostID             psql.Expression
	Question           psql.Expression
	Options            psql.Expression
	AllowMultipleVotes psql.Expression
	ExpiresAt          psql.Expression
	CreatedAt          psql.Expression
}

func (c pollColumns) Alias() string {
	return c.tableAlias
}

func (pollColumns) AliasedAs(alias string) pollColumns {
	return buildPollColumns(alias)
}

func buildPollColumns(alias string) pollColumns {
	return pollColumns{
		tableAlias:         alias,
		PollID:             psql.Quote(alias, "poll_id"),
		PostID:             psql.Quote(alias, "post_id"),
		Question:           psql.Quote(alias, "question"),
		Options:            psql.Quote(alias, "options"),
		AllowMultipleVotes: psql.Quote(alias, "allow_multiple_votes"),
		ExpiresAt:          psql.Quote(alias, "expires_at"),
		CreatedAt:          psql.Quote(alias, "created_at"),
	}
}

type pollWhere[Q psql.Filterable] struct {
	PollID             psql.WhereMod[Q, int64]
	PostID             psql.WhereMod[Q, int64]
	Question           psql.WhereMod[Q, string]
	Options            psql.WhereMod[Q, types.JSON[json.RawMessage]]
	AllowMultipleVotes psql.WhereNullMod[Q, bool]
	ExpiresAt          psql.WhereNullMod[Q, time.Time]
	CreatedAt          psql.WhereNullMod[Q, time.Time]
}

func (pollWhere[Q]) AliasedAs(alias string) pollWhere[Q] {
	return buildPollWhere[Q](buildPollColumns(alias))
}

func buildPollWhere[Q psql.Filterable](cols pollColumns) pollWhere[Q] {
	return pollWhere[Q]{
		PollID:             psql.Where[Q, int64](cols.PollID),
		PostID:             psql.Where[Q, int64](cols.PostID),
		Question:           psql.Where[Q, string](cols.Question),
		Options:            psql.Where[Q, types.JSON[json.RawMessage]](cols.Options),
		AllowMultipleVotes: psql.WhereNull[Q, bool](cols.AllowMultipleVotes),
		ExpiresAt:          psql.WhereNull[Q, time.Time](cols.ExpiresAt),
		CreatedAt:          psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var PollErrors = &pollErrors{
	ErrUniquePollsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "polls",
		columns: []string{"poll_id"},
		s:       "polls_pkey",
	},

	ErrUniquePollsPostIdKey: &UniqueConstraintError{
		schema:  "",
		table:   "polls",
		columns: []string{"post_id"},
		s:       "polls_post_id_key",
	},
}

type pollErrors struct {
	ErrUniquePollsPkey *UniqueConstraintError

	ErrUniquePollsPostIdKey *UniqueConstraintError
}

// PollSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PollSetter struct {
	PollID             *int64                       `db:"poll_id,pk" scan:"poll_id" json:"poll_id"`
	PostID             *int64                       `db:"post_id" scan:"post_id" json:"post_id"`
	Question           *string                      `db:"question" scan:"question" json:"question"`
	Options            *types.JSON[json.RawMessage] `db:"options" scan:"options" json:"options"`
	AllowMultipleVotes *sql.Null[bool]              `db:"allow_multiple_votes" scan:"allow_multiple_votes" json:"allow_multiple_votes"`
	ExpiresAt          *sql.Null[time.Time]         `db:"expires_at" scan:"expires_at" json:"expires_at"`
	CreatedAt          *sql.Null[time.Time]         `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s PollSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.PollID != nil {
		vals = append(vals, "poll_id")
	}

	if s.PostID != nil {
		vals = append(vals, "post_id")
	}

	if s.Question != nil {
		vals = append(vals, "question")
	}

	if s.Options != nil {
		vals = append(vals, "options")
	}

	if s.AllowMultipleVotes != nil {
		vals = append(vals, "allow_multiple_votes")
	}

	if s.ExpiresAt != nil {
		vals = append(vals, "expires_at")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s PollSetter) Overwrite(t *Poll) {
	if s.PollID != nil {
		t.PollID = *s.PollID
	}
	if s.PostID != nil {
		t.PostID = *s.PostID
	}
	if s.Question != nil {
		t.Question = *s.Question
	}
	if s.Options != nil {
		t.Options = *s.Options
	}
	if s.AllowMultipleVotes != nil {
		t.AllowMultipleVotes = *s.AllowMultipleVotes
	}
	if s.ExpiresAt != nil {
		t.ExpiresAt = *s.ExpiresAt
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *PollSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Polls.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.PollID != nil {
			vals[0] = psql.Arg(*s.PollID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.PostID != nil {
			vals[1] = psql.Arg(*s.PostID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Question != nil {
			vals[2] = psql.Arg(*s.Question)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Options != nil {
			vals[3] = psql.Arg(*s.Options)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.AllowMultipleVotes != nil {
			vals[4] = psql.Arg(*s.AllowMultipleVotes)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.ExpiresAt != nil {
			vals[5] = psql.Arg(*s.ExpiresAt)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[6] = psql.Arg(*s.CreatedAt)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PollSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s PollSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.PollID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "poll_id")...),
			psql.Arg(s.PollID),
		}})
	}

	if s.PostID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "post_id")...),
			psql.Arg(s.PostID),
		}})
	}

	if s.Question != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "question")...),
			psql.Arg(s.Question),
		}})
	}

	if s.Options != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "options")...),
			psql.Arg(s.Options),
		}})
	}

	if s.AllowMultipleVotes != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "allow_multiple_votes")...),
			psql.Arg(s.AllowMultipleVotes),
		}})
	}

	if s.ExpiresAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "expires_at")...),
			psql.Arg(s.ExpiresAt),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindPoll retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPoll(ctx context.Context, exec bob.Executor, PollIDPK int64, cols ...string) (*Poll, error) {
	if len(cols) == 0 {
		return Polls.Query(
			SelectWhere.Polls.PollID.EQ(PollIDPK),
		).One(ctx, exec)
	}

	return Polls.Query(
		SelectWhere.Polls.PollID.EQ(PollIDPK),
		sm.Columns(Polls.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PollExists checks the presence of a single record by primary key
func PollExists(ctx context.Context, exec bob.Executor, PollIDPK int64) (bool, error) {
	return Polls.Query(
		SelectWhere.Polls.PollID.EQ(PollIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Poll is retrieved from the database
func (o *Poll) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Polls.AfterSelectHooks.RunHooks(ctx, exec, PollSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Polls.AfterInsertHooks.RunHooks(ctx, exec, PollSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Polls.AfterUpdateHooks.RunHooks(ctx, exec, PollSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Polls.AfterDeleteHooks.RunHooks(ctx, exec, PollSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Poll
func (o *Poll) primaryKeyVals() bob.Expression {
	return psql.Arg(o.PollID)
}

func (o *Poll) pkEQ() dialect.Expression {
	return psql.Quote("polls", "poll_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Poll
func (o *Poll) Update(ctx context.Context, exec bob.Executor, s *PollSetter) error {
	v, err := Polls.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Poll record with an executor
func (o *Poll) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Polls.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Poll using the executor
func (o *Poll) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Polls.Query(
		SelectWhere.Polls.PollID.EQ(o.PollID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after PollSlice is retrieved from the database
func (o PollSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Polls.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Polls.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Polls.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Polls.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PollSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("polls", "poll_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PollSlice) copyMatchingRows(from ...*Poll) {
	for i, old := range o {
		for _, new := range from {
			if new.PollID != old.PollID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PollSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Polls.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Poll:
				o.copyMatchingRows(retrieved)
			case []*Poll:
				o.copyMatchingRows(retrieved...)
			case PollSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Poll or a slice of Poll
				// then run the AfterUpdateHooks on the slice
				_, err = Polls.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PollSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Polls.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Poll:
				o.copyMatchingRows(retrieved)
			case []*Poll:
				o.copyMatchingRows(retrieved...)
			case PollSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Poll or a slice of Poll
				// then run the AfterDeleteHooks on the slice
				_, err = Polls.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PollSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PollSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Polls.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o PollSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Polls.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PollSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Polls.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type pollJoins[Q dialect.Joinable] struct {
	typ       string
	PollVotes modAs[Q, pollVoteColumns]
	Post      modAs[Q, postColumns]
}

func (j pollJoins[Q]) aliasedAs(alias string) pollJoins[Q] {
	return buildPollJoins[Q](buildPollColumns(alias), j.typ)
}

func buildPollJoins[Q dialect.Joinable](cols pollColumns, typ string) pollJoins[Q] {
	return pollJoins[Q]{
		typ: typ,
		PollVotes: modAs[Q, pollVoteColumns]{
			c: PollVoteColumns,
			f: func(to pollVoteColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, PollVotes.Name().As(to.Alias())).On(
						to.PollID.EQ(cols.PollID),
					))
				}

				return mods
			},
		},
		Post: modAs[Q, postColumns]{
			c: PostColumns,
			f: func(to postColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Posts.Name().As(to.Alias())).On(
						to.PostID.EQ(cols.PostID),
					))
				}

				return mods
			},
		},
	}
}

// PollVotes starts a query for related objects on poll_votes
func (o *Poll) PollVotes(mods ...bob.Mod[*dialect.SelectQuery]) PollVotesQuery {
	return PollVotes.Query(append(mods,
		sm.Where(PollVoteColumns.PollID.EQ(psql.Arg(o.PollID))),
	)...)
}

func (os PollSlice) PollVotes(mods ...bob.Mod[*dialect.SelectQuery]) PollVotesQuery {
	pkPollID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkPollID[i] = o.PollID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPollID), "bigint[]")),
	))

	return PollVotes.Query(append(mods,
		sm.Where(psql.Group(PollVoteColumns.PollID).OP("IN", PKArgExpr)),
	)...)
}

// Post starts a query for related objects on posts
func (o *Poll) Post(mods ...bob.Mod[*dialect.SelectQuery]) PostsQuery {
	return Posts.Query(append(mods,
		sm.Where(PostColumns.PostID.EQ(psql.Arg(o.PostID))),
	)...)
}

func (os PollSlice) Post(mods ...bob.Mod[*dialect.SelectQuery]) PostsQuery {
	pkPostID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkPostID[i] = o.PostID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPostID), "bigint[]")),
	))

	return Posts.Query(append(mods,
		sm.Where(psql.Group(PostColumns.PostID).OP("IN", PKArgExpr)),
	)...)
}

func (o *Poll) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "PollVotes":
		rels, ok := retrieved.(PollVoteSlice)
		if !ok {
			return fmt.Errorf("poll cannot load %T as %q", retrieved, name)
		}

		o.R.PollVotes = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Poll = o
			}
		}
		return nil
	case "Post":
		rel, ok := retrieved.(*Post)
		if !ok {
			return fmt.Errorf("poll cannot load %T as %q", retrieved, name)
		}

		o.R.Post = rel

		if rel != nil {
			rel.R.Poll = o
		}
		return nil
	default:
		return fmt.Errorf("poll has no relationship %q", name)
	}
}

type pollPreloader struct {
	Post func(...psql.PreloadOption) psql.Preloader
}

func buildPollPreloader() pollPreloader {
	return pollPreloader{
		Post: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Post, PostSlice](orm.Relationship{
				Name: "Post",
				Sides: []orm.RelSide{
					{
						From: TableNames.Polls,
						To:   TableNames.Posts,
						FromColumns: []string{
							ColumnNames.Polls.PostID,
						},
						ToColumns: []string{
							ColumnNames.Posts.PostID,
						},
					},
				},
			}, Posts.Columns().Names(), opts...)
		},
	}
}

type pollThenLoader[Q orm.Loadable] struct {
	PollVotes func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Post      func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildPollThenLoader[Q orm.Loadable]() pollThenLoader[Q] {
	type PollVotesLoadInterface interface {
		LoadPollVotes(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type PostLoadInterface interface {
		LoadPost(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return pollThenLoader[Q]{
		PollVotes: thenLoadBuilder[Q](
			"PollVotes",
			func(ctx context.Context, exec bob.Executor, retrieved PollVotesLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPollVotes(ctx, exec, mods...)
			},
		),
		Post: thenLoadBuilder[Q](
			"Post",
			func(ctx context.Context, exec bob.Executor, retrieved PostLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPost(ctx, exec, mods...)
			},
		),
	}
}

// LoadPollVotes loads the poll's PollVotes into the .R struct
func (o *Poll) LoadPollVotes(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PollVotes = nil

	related, err := o.PollVotes(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Poll = o
	}

	o.R.PollVotes = related
	return nil
}

// LoadPollVotes loads the poll's PollVotes into the .R struct
func (os PollSlice) LoadPollVotes(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pollVotes, err := os.PollVotes(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.PollVotes = nil
	}

	for _, o := range os {
		for _, rel := range pollVotes {
			if o.PollID != rel.PollID {
				continue
			}

			rel.R.Poll = o

			o.R.PollVotes = append(o.R.PollVotes, rel)
		}
	}

	return nil
}

// LoadPost loads the poll's Post into the .R struct
func (o *Poll) LoadPost(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Post = nil

	related, err := o.Post(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Poll = o

	o.R.Post = related
	return nil
}

// LoadPost loads the poll's Post into the .R struct
func (os PollSlice) LoadPost(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	posts, err := os.Post(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range posts {
			if o.PostID != rel.PostID {
				continue
			}

			rel.R.Poll = o

			o.R.Post = rel
			break
		}
	}

	return nil
}

func insertPollPollVotes0(ctx context.Context, exec bob.Executor, pollVotes1 []*PollVoteSetter, poll0 *Poll) (PollVoteSlice, error) {
	for i := range pollVotes1 {
		pollVotes1[i].PollID = &poll0.PollID
	}

	ret, err := PollVotes.Insert(bob.ToMods(pollVotes1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertPollPollVotes0: %w", err)
	}

	return ret, nil
}

func attachPollPollVotes0(ctx context.Context, exec bob.Executor, count int, pollVotes1 PollVoteSlice, poll0 *Poll) (PollVoteSlice, error) {
	setter := &PollVoteSetter{
		PollID: &poll0.PollID,
	}

	err := pollVotes1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachPollPollVotes0: %w", err)
	}

	return pollVotes1, nil
}

func (poll0 *Poll) InsertPollVotes(ctx context.Context, exec bob.Executor, related ...*PollVoteSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	pollVotes1, err := insertPollPollVotes0(ctx, exec, related, poll0)
	if err != nil {
		return err
	}

	poll0.R.PollVotes = append(poll0.R.PollVotes, pollVotes1...)

	for _, rel := range pollVotes1 {
		rel.R.Poll = poll0
	}
	return nil
}

func (poll0 *Poll) AttachPollVotes(ctx context.Context, exec bob.Executor, related ...*PollVote) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	pollVotes1 := PollVoteSlice(related)

	_, err = attachPollPollVotes0(ctx, exec, len(related), pollVotes1, poll0)
	if err != nil {
		return err
	}

	poll0.R.PollVotes = append(poll0.R.PollVotes, pollVotes1...)

	for _, rel := range related {
		rel.R.Poll = poll0
	}

	return nil
}

func attachPollPost0(ctx context.Context, exec bob.Executor, count int, poll0 *Poll, post1 *Post) (*Poll, error) {
	setter := &PollSetter{
		PostID: &post1.PostID,
	}

	err := poll0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPollPost0: %w", err)
	}

	return poll0, nil
}

func (poll0 *Poll) InsertPost(ctx context.Context, exec bob.Executor, related *PostSetter) error {
	post1, err := Posts.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPollPost0(ctx, exec, 1, poll0, post1)
	if err != nil {
		return err
	}

	poll0.R.Post = post1

	post1.R.Poll = poll0

	return nil
}

func (poll0 *Poll) AttachPost(ctx context.Context, exec bob.Executor, post1 *Post) error {
	var err error

	_, err = attachPollPost0(ctx, exec, 1, poll0, post1)
	if err != nil {
		return err
	}

	poll0.R.Post = post1

	post1.R.Poll = poll0

	return nil
}
