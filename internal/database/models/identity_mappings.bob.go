// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// IdentityMapping is an object representing the database table.
type IdentityMapping struct {
	MappingID                 uuid.UUID           `db:"mapping_id,pk" scan:"mapping_id" json:"mapping_id"`
	Fingerprint               string              `db:"fingerprint" scan:"fingerprint" json:"fingerprint"`
	PseudonymID               string              `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	EncryptedRealIdentity     []byte              `db:"encrypted_real_identity" scan:"encrypted_real_identity" json:"encrypted_real_identity"`
	EncryptedPseudonymMapping []byte              `db:"encrypted_pseudonym_mapping" scan:"encrypted_pseudonym_mapping" json:"encrypted_pseudonym_mapping"`
	KeyVersion                int32               `db:"key_version" scan:"key_version" json:"key_version"`
	CreatedAt                 sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
	UpdatedAt                 sql.Null[time.Time] `db:"updated_at" scan:"updated_at" json:"updated_at"`
	IsActive                  sql.Null[bool]      `db:"is_active" scan:"is_active" json:"is_active"`
	UserID                    int64               `db:"user_id" scan:"user_id" json:"user_id"`

	R identityMappingR `db:"-" scan:"rel" json:"rel"`
}

// IdentityMappingSlice is an alias for a slice of pointers to IdentityMapping.
// This should almost always be used instead of []*IdentityMapping.
type IdentityMappingSlice []*IdentityMapping

// IdentityMappings contains methods to work with the identity_mappings table
var IdentityMappings = psql.NewTablex[*IdentityMapping, IdentityMappingSlice, *IdentityMappingSetter]("", "identity_mappings")

// IdentityMappingsQuery is a query on the identity_mappings table
type IdentityMappingsQuery = *psql.ViewQuery[*IdentityMapping, IdentityMappingSlice]

// identityMappingR is where relationships are stored.
type identityMappingR struct {
	User *User `scan:"User" json:"User"` // identity_mappings.identity_mappings_user_id_fkey
}

type identityMappingColumnNames struct {
	MappingID                 string
	Fingerprint               string
	PseudonymID               string
	EncryptedRealIdentity     string
	EncryptedPseudonymMapping string
	KeyVersion                string
	CreatedAt                 string
	UpdatedAt                 string
	IsActive                  string
	UserID                    string
}

var IdentityMappingColumns = buildIdentityMappingColumns("identity_mappings")

type identityMappingColumns struct {
	tableAlias                string
	MappingID                 psql.Expression
	Fingerprint               psql.Expression
	PseudonymID               psql.Expression
	EncryptedRealIdentity     psql.Expression
	EncryptedPseudonymMapping psql.Expression
	KeyVersion                psql.Expression
	CreatedAt                 psql.Expression
	UpdatedAt                 psql.Expression
	IsActive                  psql.Expression
	UserID                    psql.Expression
}

func (c identityMappingColumns) Alias() string {
	return c.tableAlias
}

func (identityMappingColumns) AliasedAs(alias string) identityMappingColumns {
	return buildIdentityMappingColumns(alias)
}

func buildIdentityMappingColumns(alias string) identityMappingColumns {
	return identityMappingColumns{
		tableAlias:                alias,
		MappingID:                 psql.Quote(alias, "mapping_id"),
		Fingerprint:               psql.Quote(alias, "fingerprint"),
		PseudonymID:               psql.Quote(alias, "pseudonym_id"),
		EncryptedRealIdentity:     psql.Quote(alias, "encrypted_real_identity"),
		EncryptedPseudonymMapping: psql.Quote(alias, "encrypted_pseudonym_mapping"),
		KeyVersion:                psql.Quote(alias, "key_version"),
		CreatedAt:                 psql.Quote(alias, "created_at"),
		UpdatedAt:                 psql.Quote(alias, "updated_at"),
		IsActive:                  psql.Quote(alias, "is_active"),
		UserID:                    psql.Quote(alias, "user_id"),
	}
}

type identityMappingWhere[Q psql.Filterable] struct {
	MappingID                 psql.WhereMod[Q, uuid.UUID]
	Fingerprint               psql.WhereMod[Q, string]
	PseudonymID               psql.WhereMod[Q, string]
	EncryptedRealIdentity     psql.WhereMod[Q, []byte]
	EncryptedPseudonymMapping psql.WhereMod[Q, []byte]
	KeyVersion                psql.WhereMod[Q, int32]
	CreatedAt                 psql.WhereNullMod[Q, time.Time]
	UpdatedAt                 psql.WhereNullMod[Q, time.Time]
	IsActive                  psql.WhereNullMod[Q, bool]
	UserID                    psql.WhereMod[Q, int64]
}

func (identityMappingWhere[Q]) AliasedAs(alias string) identityMappingWhere[Q] {
	return buildIdentityMappingWhere[Q](buildIdentityMappingColumns(alias))
}

func buildIdentityMappingWhere[Q psql.Filterable](cols identityMappingColumns) identityMappingWhere[Q] {
	return identityMappingWhere[Q]{
		MappingID:                 psql.Where[Q, uuid.UUID](cols.MappingID),
		Fingerprint:               psql.Where[Q, string](cols.Fingerprint),
		PseudonymID:               psql.Where[Q, string](cols.PseudonymID),
		EncryptedRealIdentity:     psql.Where[Q, []byte](cols.EncryptedRealIdentity),
		EncryptedPseudonymMapping: psql.Where[Q, []byte](cols.EncryptedPseudonymMapping),
		KeyVersion:                psql.Where[Q, int32](cols.KeyVersion),
		CreatedAt:                 psql.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt:                 psql.WhereNull[Q, time.Time](cols.UpdatedAt),
		IsActive:                  psql.WhereNull[Q, bool](cols.IsActive),
		UserID:                    psql.Where[Q, int64](cols.UserID),
	}
}

var IdentityMappingErrors = &identityMappingErrors{
	ErrUniqueIdentityMappingsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "identity_mappings",
		columns: []string{"mapping_id"},
		s:       "identity_mappings_pkey",
	},
}

type identityMappingErrors struct {
	ErrUniqueIdentityMappingsPkey *UniqueConstraintError
}

// IdentityMappingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type IdentityMappingSetter struct {
	MappingID                 *uuid.UUID           `db:"mapping_id,pk" scan:"mapping_id" json:"mapping_id"`
	Fingerprint               *string              `db:"fingerprint" scan:"fingerprint" json:"fingerprint"`
	PseudonymID               *string              `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	EncryptedRealIdentity     *[]byte              `db:"encrypted_real_identity" scan:"encrypted_real_identity" json:"encrypted_real_identity"`
	EncryptedPseudonymMapping *[]byte              `db:"encrypted_pseudonym_mapping" scan:"encrypted_pseudonym_mapping" json:"encrypted_pseudonym_mapping"`
	KeyVersion                *int32               `db:"key_version" scan:"key_version" json:"key_version"`
	CreatedAt                 *sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
	UpdatedAt                 *sql.Null[time.Time] `db:"updated_at" scan:"updated_at" json:"updated_at"`
	IsActive                  *sql.Null[bool]      `db:"is_active" scan:"is_active" json:"is_active"`
	UserID                    *int64               `db:"user_id" scan:"user_id" json:"user_id"`
}

func (s IdentityMappingSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.MappingID != nil {
		vals = append(vals, "mapping_id")
	}

	if s.Fingerprint != nil {
		vals = append(vals, "fingerprint")
	}

	if s.PseudonymID != nil {
		vals = append(vals, "pseudonym_id")
	}

	if s.EncryptedRealIdentity != nil {
		vals = append(vals, "encrypted_real_identity")
	}

	if s.EncryptedPseudonymMapping != nil {
		vals = append(vals, "encrypted_pseudonym_mapping")
	}

	if s.KeyVersion != nil {
		vals = append(vals, "key_version")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	if s.IsActive != nil {
		vals = append(vals, "is_active")
	}

	if s.UserID != nil {
		vals = append(vals, "user_id")
	}

	return vals
}

func (s IdentityMappingSetter) Overwrite(t *IdentityMapping) {
	if s.MappingID != nil {
		t.MappingID = *s.MappingID
	}
	if s.Fingerprint != nil {
		t.Fingerprint = *s.Fingerprint
	}
	if s.PseudonymID != nil {
		t.PseudonymID = *s.PseudonymID
	}
	if s.EncryptedRealIdentity != nil {
		t.EncryptedRealIdentity = *s.EncryptedRealIdentity
	}
	if s.EncryptedPseudonymMapping != nil {
		t.EncryptedPseudonymMapping = *s.EncryptedPseudonymMapping
	}
	if s.KeyVersion != nil {
		t.KeyVersion = *s.KeyVersion
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
	if s.IsActive != nil {
		t.IsActive = *s.IsActive
	}
	if s.UserID != nil {
		t.UserID = *s.UserID
	}
}

func (s *IdentityMappingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return IdentityMappings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.MappingID != nil {
			vals[0] = psql.Arg(*s.MappingID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Fingerprint != nil {
			vals[1] = psql.Arg(*s.Fingerprint)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.PseudonymID != nil {
			vals[2] = psql.Arg(*s.PseudonymID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.EncryptedRealIdentity != nil {
			vals[3] = psql.Arg(*s.EncryptedRealIdentity)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.EncryptedPseudonymMapping != nil {
			vals[4] = psql.Arg(*s.EncryptedPseudonymMapping)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.KeyVersion != nil {
			vals[5] = psql.Arg(*s.KeyVersion)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[6] = psql.Arg(*s.CreatedAt)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[7] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.IsActive != nil {
			vals[8] = psql.Arg(*s.IsActive)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.UserID != nil {
			vals[9] = psql.Arg(*s.UserID)
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s IdentityMappingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s IdentityMappingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.MappingID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "mapping_id")...),
			psql.Arg(s.MappingID),
		}})
	}

	if s.Fingerprint != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fingerprint")...),
			psql.Arg(s.Fingerprint),
		}})
	}

	if s.PseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pseudonym_id")...),
			psql.Arg(s.PseudonymID),
		}})
	}

	if s.EncryptedRealIdentity != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "encrypted_real_identity")...),
			psql.Arg(s.EncryptedRealIdentity),
		}})
	}

	if s.EncryptedPseudonymMapping != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "encrypted_pseudonym_mapping")...),
			psql.Arg(s.EncryptedPseudonymMapping),
		}})
	}

	if s.KeyVersion != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "key_version")...),
			psql.Arg(s.KeyVersion),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	if s.IsActive != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_active")...),
			psql.Arg(s.IsActive),
		}})
	}

	if s.UserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	return exprs
}

// FindIdentityMapping retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindIdentityMapping(ctx context.Context, exec bob.Executor, MappingIDPK uuid.UUID, cols ...string) (*IdentityMapping, error) {
	if len(cols) == 0 {
		return IdentityMappings.Query(
			SelectWhere.IdentityMappings.MappingID.EQ(MappingIDPK),
		).One(ctx, exec)
	}

	return IdentityMappings.Query(
		SelectWhere.IdentityMappings.MappingID.EQ(MappingIDPK),
		sm.Columns(IdentityMappings.Columns().Only(cols...)),
	).One(ctx, exec)
}

// IdentityMappingExists checks the presence of a single record by primary key
func IdentityMappingExists(ctx context.Context, exec bob.Executor, MappingIDPK uuid.UUID) (bool, error) {
	return IdentityMappings.Query(
		SelectWhere.IdentityMappings.MappingID.EQ(MappingIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after IdentityMapping is retrieved from the database
func (o *IdentityMapping) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IdentityMappings.AfterSelectHooks.RunHooks(ctx, exec, IdentityMappingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = IdentityMappings.AfterInsertHooks.RunHooks(ctx, exec, IdentityMappingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = IdentityMappings.AfterUpdateHooks.RunHooks(ctx, exec, IdentityMappingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = IdentityMappings.AfterDeleteHooks.RunHooks(ctx, exec, IdentityMappingSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the IdentityMapping
func (o *IdentityMapping) primaryKeyVals() bob.Expression {
	return psql.Arg(o.MappingID)
}

func (o *IdentityMapping) pkEQ() dialect.Expression {
	return psql.Quote("identity_mappings", "mapping_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the IdentityMapping
func (o *IdentityMapping) Update(ctx context.Context, exec bob.Executor, s *IdentityMappingSetter) error {
	v, err := IdentityMappings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single IdentityMapping record with an executor
func (o *IdentityMapping) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := IdentityMappings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the IdentityMapping using the executor
func (o *IdentityMapping) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := IdentityMappings.Query(
		SelectWhere.IdentityMappings.MappingID.EQ(o.MappingID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after IdentityMappingSlice is retrieved from the database
func (o IdentityMappingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IdentityMappings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = IdentityMappings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = IdentityMappings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = IdentityMappings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o IdentityMappingSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("identity_mappings", "mapping_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o IdentityMappingSlice) copyMatchingRows(from ...*IdentityMapping) {
	for i, old := range o {
		for _, new := range from {
			if new.MappingID != old.MappingID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o IdentityMappingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return IdentityMappings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *IdentityMapping:
				o.copyMatchingRows(retrieved)
			case []*IdentityMapping:
				o.copyMatchingRows(retrieved...)
			case IdentityMappingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a IdentityMapping or a slice of IdentityMapping
				// then run the AfterUpdateHooks on the slice
				_, err = IdentityMappings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o IdentityMappingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return IdentityMappings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *IdentityMapping:
				o.copyMatchingRows(retrieved)
			case []*IdentityMapping:
				o.copyMatchingRows(retrieved...)
			case IdentityMappingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a IdentityMapping or a slice of IdentityMapping
				// then run the AfterDeleteHooks on the slice
				_, err = IdentityMappings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o IdentityMappingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals IdentityMappingSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := IdentityMappings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o IdentityMappingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := IdentityMappings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o IdentityMappingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := IdentityMappings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type identityMappingJoins[Q dialect.Joinable] struct {
	typ  string
	User modAs[Q, userColumns]
}

func (j identityMappingJoins[Q]) aliasedAs(alias string) identityMappingJoins[Q] {
	return buildIdentityMappingJoins[Q](buildIdentityMappingColumns(alias), j.typ)
}

func buildIdentityMappingJoins[Q dialect.Joinable](cols identityMappingColumns, typ string) identityMappingJoins[Q] {
	return identityMappingJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}

// User starts a query for related objects on users
func (o *IdentityMapping) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os IdentityMappingSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkUserID[i] = o.UserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func (o *IdentityMapping) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("identityMapping cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.IdentityMappings = IdentityMappingSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("identityMapping has no relationship %q", name)
	}
}

type identityMappingPreloader struct {
	User func(...psql.PreloadOption) psql.Preloader
}

func buildIdentityMappingPreloader() identityMappingPreloader {
	return identityMappingPreloader{
		User: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "User",
				Sides: []orm.RelSide{
					{
						From: TableNames.IdentityMappings,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.IdentityMappings.UserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type identityMappingThenLoader[Q orm.Loadable] struct {
	User func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildIdentityMappingThenLoader[Q orm.Loadable]() identityMappingThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return identityMappingThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the identityMapping's User into the .R struct
func (o *IdentityMapping) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.IdentityMappings = IdentityMappingSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the identityMapping's User into the .R struct
func (os IdentityMappingSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.UserID {
				continue
			}

			rel.R.IdentityMappings = append(rel.R.IdentityMappings, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachIdentityMappingUser0(ctx context.Context, exec bob.Executor, count int, identityMapping0 *IdentityMapping, user1 *User) (*IdentityMapping, error) {
	setter := &IdentityMappingSetter{
		UserID: &user1.UserID,
	}

	err := identityMapping0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachIdentityMappingUser0: %w", err)
	}

	return identityMapping0, nil
}

func (identityMapping0 *IdentityMapping) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachIdentityMappingUser0(ctx, exec, 1, identityMapping0, user1)
	if err != nil {
		return err
	}

	identityMapping0.R.User = user1

	user1.R.IdentityMappings = append(user1.R.IdentityMappings, identityMapping0)

	return nil
}

func (identityMapping0 *IdentityMapping) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachIdentityMappingUser0(ctx, exec, 1, identityMapping0, user1)
	if err != nil {
		return err
	}

	identityMapping0.R.User = user1

	user1.R.IdentityMappings = append(user1.R.IdentityMappings, identityMapping0)

	return nil
}
