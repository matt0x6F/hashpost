// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// UserBlock is an object representing the database table.
type UserBlock struct {
	BlockID            int64               `db:"block_id,pk" scan:"block_id" json:"block_id"`
	BlockerPseudonymID string              `db:"blocker_pseudonym_id" scan:"blocker_pseudonym_id" json:"blocker_pseudonym_id"`
	BlockedPseudonymID sql.Null[string]    `db:"blocked_pseudonym_id" scan:"blocked_pseudonym_id" json:"blocked_pseudonym_id"`
	BlockedUserID      sql.Null[int64]     `db:"blocked_user_id" scan:"blocked_user_id" json:"blocked_user_id"`
	CreatedAt          sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`

	R userBlockR `db:"-" scan:"rel" json:"rel"`
}

// UserBlockSlice is an alias for a slice of pointers to UserBlock.
// This should almost always be used instead of []*UserBlock.
type UserBlockSlice []*UserBlock

// UserBlocks contains methods to work with the user_blocks table
var UserBlocks = psql.NewTablex[*UserBlock, UserBlockSlice, *UserBlockSetter]("", "user_blocks")

// UserBlocksQuery is a query on the user_blocks table
type UserBlocksQuery = *psql.ViewQuery[*UserBlock, UserBlockSlice]

// userBlockR is where relationships are stored.
type userBlockR struct {
	BlockedPseudonymPseudonym *Pseudonym `scan:"BlockedPseudonymPseudonym" json:"BlockedPseudonymPseudonym"` // user_blocks.user_blocks_blocked_pseudonym_id_fkey
	BlockedUserUser           *User      `scan:"BlockedUserUser" json:"BlockedUserUser"`                     // user_blocks.user_blocks_blocked_user_id_fkey
	BlockerPseudonymPseudonym *Pseudonym `scan:"BlockerPseudonymPseudonym" json:"BlockerPseudonymPseudonym"` // user_blocks.user_blocks_blocker_pseudonym_id_fkey
}

type userBlockColumnNames struct {
	BlockID            string
	BlockerPseudonymID string
	BlockedPseudonymID string
	BlockedUserID      string
	CreatedAt          string
}

var UserBlockColumns = buildUserBlockColumns("user_blocks")

type userBlockColumns struct {
	tableAlias         string
	BlockID            psql.Expression
	BlockerPseudonymID psql.Expression
	BlockedPseudonymID psql.Expression
	BlockedUserID      psql.Expression
	CreatedAt          psql.Expression
}

func (c userBlockColumns) Alias() string {
	return c.tableAlias
}

func (userBlockColumns) AliasedAs(alias string) userBlockColumns {
	return buildUserBlockColumns(alias)
}

func buildUserBlockColumns(alias string) userBlockColumns {
	return userBlockColumns{
		tableAlias:         alias,
		BlockID:            psql.Quote(alias, "block_id"),
		BlockerPseudonymID: psql.Quote(alias, "blocker_pseudonym_id"),
		BlockedPseudonymID: psql.Quote(alias, "blocked_pseudonym_id"),
		BlockedUserID:      psql.Quote(alias, "blocked_user_id"),
		CreatedAt:          psql.Quote(alias, "created_at"),
	}
}

type userBlockWhere[Q psql.Filterable] struct {
	BlockID            psql.WhereMod[Q, int64]
	BlockerPseudonymID psql.WhereMod[Q, string]
	BlockedPseudonymID psql.WhereNullMod[Q, string]
	BlockedUserID      psql.WhereNullMod[Q, int64]
	CreatedAt          psql.WhereNullMod[Q, time.Time]
}

func (userBlockWhere[Q]) AliasedAs(alias string) userBlockWhere[Q] {
	return buildUserBlockWhere[Q](buildUserBlockColumns(alias))
}

func buildUserBlockWhere[Q psql.Filterable](cols userBlockColumns) userBlockWhere[Q] {
	return userBlockWhere[Q]{
		BlockID:            psql.Where[Q, int64](cols.BlockID),
		BlockerPseudonymID: psql.Where[Q, string](cols.BlockerPseudonymID),
		BlockedPseudonymID: psql.WhereNull[Q, string](cols.BlockedPseudonymID),
		BlockedUserID:      psql.WhereNull[Q, int64](cols.BlockedUserID),
		CreatedAt:          psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var UserBlockErrors = &userBlockErrors{
	ErrUniqueUserBlocksPkey: &UniqueConstraintError{
		schema:  "",
		table:   "user_blocks",
		columns: []string{"block_id"},
		s:       "user_blocks_pkey",
	},

	ErrUniqueUserBlocksBlockerPseudonymIdBlockedPseudonymIdBlockKey: &UniqueConstraintError{
		schema:  "",
		table:   "user_blocks",
		columns: []string{"blocker_pseudonym_id", "blocked_pseudonym_id", "blocked_user_id"},
		s:       "user_blocks_blocker_pseudonym_id_blocked_pseudonym_id_block_key",
	},
}

type userBlockErrors struct {
	ErrUniqueUserBlocksPkey *UniqueConstraintError

	ErrUniqueUserBlocksBlockerPseudonymIdBlockedPseudonymIdBlockKey *UniqueConstraintError
}

// UserBlockSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserBlockSetter struct {
	BlockID            *int64               `db:"block_id,pk" scan:"block_id" json:"block_id"`
	BlockerPseudonymID *string              `db:"blocker_pseudonym_id" scan:"blocker_pseudonym_id" json:"blocker_pseudonym_id"`
	BlockedPseudonymID *sql.Null[string]    `db:"blocked_pseudonym_id" scan:"blocked_pseudonym_id" json:"blocked_pseudonym_id"`
	BlockedUserID      *sql.Null[int64]     `db:"blocked_user_id" scan:"blocked_user_id" json:"blocked_user_id"`
	CreatedAt          *sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s UserBlockSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.BlockID != nil {
		vals = append(vals, "block_id")
	}

	if s.BlockerPseudonymID != nil {
		vals = append(vals, "blocker_pseudonym_id")
	}

	if s.BlockedPseudonymID != nil {
		vals = append(vals, "blocked_pseudonym_id")
	}

	if s.BlockedUserID != nil {
		vals = append(vals, "blocked_user_id")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s UserBlockSetter) Overwrite(t *UserBlock) {
	if s.BlockID != nil {
		t.BlockID = *s.BlockID
	}
	if s.BlockerPseudonymID != nil {
		t.BlockerPseudonymID = *s.BlockerPseudonymID
	}
	if s.BlockedPseudonymID != nil {
		t.BlockedPseudonymID = *s.BlockedPseudonymID
	}
	if s.BlockedUserID != nil {
		t.BlockedUserID = *s.BlockedUserID
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *UserBlockSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserBlocks.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.BlockID != nil {
			vals[0] = psql.Arg(*s.BlockID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.BlockerPseudonymID != nil {
			vals[1] = psql.Arg(*s.BlockerPseudonymID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.BlockedPseudonymID != nil {
			vals[2] = psql.Arg(*s.BlockedPseudonymID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.BlockedUserID != nil {
			vals[3] = psql.Arg(*s.BlockedUserID)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[4] = psql.Arg(*s.CreatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserBlockSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserBlockSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.BlockID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "block_id")...),
			psql.Arg(s.BlockID),
		}})
	}

	if s.BlockerPseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "blocker_pseudonym_id")...),
			psql.Arg(s.BlockerPseudonymID),
		}})
	}

	if s.BlockedPseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "blocked_pseudonym_id")...),
			psql.Arg(s.BlockedPseudonymID),
		}})
	}

	if s.BlockedUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "blocked_user_id")...),
			psql.Arg(s.BlockedUserID),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindUserBlock retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserBlock(ctx context.Context, exec bob.Executor, BlockIDPK int64, cols ...string) (*UserBlock, error) {
	if len(cols) == 0 {
		return UserBlocks.Query(
			SelectWhere.UserBlocks.BlockID.EQ(BlockIDPK),
		).One(ctx, exec)
	}

	return UserBlocks.Query(
		SelectWhere.UserBlocks.BlockID.EQ(BlockIDPK),
		sm.Columns(UserBlocks.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserBlockExists checks the presence of a single record by primary key
func UserBlockExists(ctx context.Context, exec bob.Executor, BlockIDPK int64) (bool, error) {
	return UserBlocks.Query(
		SelectWhere.UserBlocks.BlockID.EQ(BlockIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserBlock is retrieved from the database
func (o *UserBlock) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserBlocks.AfterSelectHooks.RunHooks(ctx, exec, UserBlockSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserBlocks.AfterInsertHooks.RunHooks(ctx, exec, UserBlockSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserBlocks.AfterUpdateHooks.RunHooks(ctx, exec, UserBlockSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserBlocks.AfterDeleteHooks.RunHooks(ctx, exec, UserBlockSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the UserBlock
func (o *UserBlock) primaryKeyVals() bob.Expression {
	return psql.Arg(o.BlockID)
}

func (o *UserBlock) pkEQ() dialect.Expression {
	return psql.Quote("user_blocks", "block_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserBlock
func (o *UserBlock) Update(ctx context.Context, exec bob.Executor, s *UserBlockSetter) error {
	v, err := UserBlocks.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserBlock record with an executor
func (o *UserBlock) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserBlocks.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserBlock using the executor
func (o *UserBlock) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserBlocks.Query(
		SelectWhere.UserBlocks.BlockID.EQ(o.BlockID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserBlockSlice is retrieved from the database
func (o UserBlockSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserBlocks.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserBlocks.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserBlocks.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserBlocks.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserBlockSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_blocks", "block_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserBlockSlice) copyMatchingRows(from ...*UserBlock) {
	for i, old := range o {
		for _, new := range from {
			if new.BlockID != old.BlockID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserBlockSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserBlocks.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserBlock:
				o.copyMatchingRows(retrieved)
			case []*UserBlock:
				o.copyMatchingRows(retrieved...)
			case UserBlockSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserBlock or a slice of UserBlock
				// then run the AfterUpdateHooks on the slice
				_, err = UserBlocks.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserBlockSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserBlocks.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserBlock:
				o.copyMatchingRows(retrieved)
			case []*UserBlock:
				o.copyMatchingRows(retrieved...)
			case UserBlockSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserBlock or a slice of UserBlock
				// then run the AfterDeleteHooks on the slice
				_, err = UserBlocks.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserBlockSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserBlockSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserBlocks.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserBlockSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserBlocks.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserBlockSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserBlocks.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userBlockJoins[Q dialect.Joinable] struct {
	typ                       string
	BlockedPseudonymPseudonym modAs[Q, pseudonymColumns]
	BlockedUserUser           modAs[Q, userColumns]
	BlockerPseudonymPseudonym modAs[Q, pseudonymColumns]
}

func (j userBlockJoins[Q]) aliasedAs(alias string) userBlockJoins[Q] {
	return buildUserBlockJoins[Q](buildUserBlockColumns(alias), j.typ)
}

func buildUserBlockJoins[Q dialect.Joinable](cols userBlockColumns, typ string) userBlockJoins[Q] {
	return userBlockJoins[Q]{
		typ: typ,
		BlockedPseudonymPseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.BlockedPseudonymID),
					))
				}

				return mods
			},
		},
		BlockedUserUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.BlockedUserID),
					))
				}

				return mods
			},
		},
		BlockerPseudonymPseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.BlockerPseudonymID),
					))
				}

				return mods
			},
		},
	}
}

// BlockedPseudonymPseudonym starts a query for related objects on pseudonyms
func (o *UserBlock) BlockedPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.BlockedPseudonymID))),
	)...)
}

func (os UserBlockSlice) BlockedPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkBlockedPseudonymID := make(pgtypes.Array[sql.Null[string]], len(os))
	for i, o := range os {
		pkBlockedPseudonymID[i] = o.BlockedPseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkBlockedPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

// BlockedUserUser starts a query for related objects on users
func (o *UserBlock) BlockedUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.BlockedUserID))),
	)...)
}

func (os UserBlockSlice) BlockedUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkBlockedUserID := make(pgtypes.Array[sql.Null[int64]], len(os))
	for i, o := range os {
		pkBlockedUserID[i] = o.BlockedUserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkBlockedUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// BlockerPseudonymPseudonym starts a query for related objects on pseudonyms
func (o *UserBlock) BlockerPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.BlockerPseudonymID))),
	)...)
}

func (os UserBlockSlice) BlockerPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkBlockerPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkBlockerPseudonymID[i] = o.BlockerPseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkBlockerPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

func (o *UserBlock) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "BlockedPseudonymPseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("userBlock cannot load %T as %q", retrieved, name)
		}

		o.R.BlockedPseudonymPseudonym = rel

		if rel != nil {
			rel.R.BlockedPseudonymUserBlocks = UserBlockSlice{o}
		}
		return nil
	case "BlockedUserUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userBlock cannot load %T as %q", retrieved, name)
		}

		o.R.BlockedUserUser = rel

		if rel != nil {
			rel.R.BlockedUserUserBlocks = UserBlockSlice{o}
		}
		return nil
	case "BlockerPseudonymPseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("userBlock cannot load %T as %q", retrieved, name)
		}

		o.R.BlockerPseudonymPseudonym = rel

		if rel != nil {
			rel.R.BlockerPseudonymUserBlocks = UserBlockSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("userBlock has no relationship %q", name)
	}
}

type userBlockPreloader struct {
	BlockedPseudonymPseudonym func(...psql.PreloadOption) psql.Preloader
	BlockedUserUser           func(...psql.PreloadOption) psql.Preloader
	BlockerPseudonymPseudonym func(...psql.PreloadOption) psql.Preloader
}

func buildUserBlockPreloader() userBlockPreloader {
	return userBlockPreloader{
		BlockedPseudonymPseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "BlockedPseudonymPseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBlocks,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.UserBlocks.BlockedPseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
		BlockedUserUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "BlockedUserUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBlocks,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.UserBlocks.BlockedUserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
		BlockerPseudonymPseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "BlockerPseudonymPseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBlocks,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.UserBlocks.BlockerPseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
	}
}

type userBlockThenLoader[Q orm.Loadable] struct {
	BlockedPseudonymPseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	BlockedUserUser           func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	BlockerPseudonymPseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserBlockThenLoader[Q orm.Loadable]() userBlockThenLoader[Q] {
	type BlockedPseudonymPseudonymLoadInterface interface {
		LoadBlockedPseudonymPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type BlockedUserUserLoadInterface interface {
		LoadBlockedUserUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type BlockerPseudonymPseudonymLoadInterface interface {
		LoadBlockerPseudonymPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userBlockThenLoader[Q]{
		BlockedPseudonymPseudonym: thenLoadBuilder[Q](
			"BlockedPseudonymPseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved BlockedPseudonymPseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBlockedPseudonymPseudonym(ctx, exec, mods...)
			},
		),
		BlockedUserUser: thenLoadBuilder[Q](
			"BlockedUserUser",
			func(ctx context.Context, exec bob.Executor, retrieved BlockedUserUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBlockedUserUser(ctx, exec, mods...)
			},
		),
		BlockerPseudonymPseudonym: thenLoadBuilder[Q](
			"BlockerPseudonymPseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved BlockerPseudonymPseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBlockerPseudonymPseudonym(ctx, exec, mods...)
			},
		),
	}
}

// LoadBlockedPseudonymPseudonym loads the userBlock's BlockedPseudonymPseudonym into the .R struct
func (o *UserBlock) LoadBlockedPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BlockedPseudonymPseudonym = nil

	related, err := o.BlockedPseudonymPseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.BlockedPseudonymUserBlocks = UserBlockSlice{o}

	o.R.BlockedPseudonymPseudonym = related
	return nil
}

// LoadBlockedPseudonymPseudonym loads the userBlock's BlockedPseudonymPseudonym into the .R struct
func (os UserBlockSlice) LoadBlockedPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.BlockedPseudonymPseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.BlockedPseudonymID.V != rel.PseudonymID {
				continue
			}

			rel.R.BlockedPseudonymUserBlocks = append(rel.R.BlockedPseudonymUserBlocks, o)

			o.R.BlockedPseudonymPseudonym = rel
			break
		}
	}

	return nil
}

// LoadBlockedUserUser loads the userBlock's BlockedUserUser into the .R struct
func (o *UserBlock) LoadBlockedUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BlockedUserUser = nil

	related, err := o.BlockedUserUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.BlockedUserUserBlocks = UserBlockSlice{o}

	o.R.BlockedUserUser = related
	return nil
}

// LoadBlockedUserUser loads the userBlock's BlockedUserUser into the .R struct
func (os UserBlockSlice) LoadBlockedUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.BlockedUserUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.BlockedUserID.V != rel.UserID {
				continue
			}

			rel.R.BlockedUserUserBlocks = append(rel.R.BlockedUserUserBlocks, o)

			o.R.BlockedUserUser = rel
			break
		}
	}

	return nil
}

// LoadBlockerPseudonymPseudonym loads the userBlock's BlockerPseudonymPseudonym into the .R struct
func (o *UserBlock) LoadBlockerPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BlockerPseudonymPseudonym = nil

	related, err := o.BlockerPseudonymPseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.BlockerPseudonymUserBlocks = UserBlockSlice{o}

	o.R.BlockerPseudonymPseudonym = related
	return nil
}

// LoadBlockerPseudonymPseudonym loads the userBlock's BlockerPseudonymPseudonym into the .R struct
func (os UserBlockSlice) LoadBlockerPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.BlockerPseudonymPseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.BlockerPseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.BlockerPseudonymUserBlocks = append(rel.R.BlockerPseudonymUserBlocks, o)

			o.R.BlockerPseudonymPseudonym = rel
			break
		}
	}

	return nil
}

func attachUserBlockBlockedPseudonymPseudonym0(ctx context.Context, exec bob.Executor, count int, userBlock0 *UserBlock, pseudonym1 *Pseudonym) (*UserBlock, error) {
	setter := &UserBlockSetter{
		BlockedPseudonymID: func() *sql.Null[string] {
			v := sql.Null[string]{V: pseudonym1.PseudonymID, Valid: true}
			return &v
		}(),
	}

	err := userBlock0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBlockBlockedPseudonymPseudonym0: %w", err)
	}

	return userBlock0, nil
}

func (userBlock0 *UserBlock) InsertBlockedPseudonymPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBlockBlockedPseudonymPseudonym0(ctx, exec, 1, userBlock0, pseudonym1)
	if err != nil {
		return err
	}

	userBlock0.R.BlockedPseudonymPseudonym = pseudonym1

	pseudonym1.R.BlockedPseudonymUserBlocks = append(pseudonym1.R.BlockedPseudonymUserBlocks, userBlock0)

	return nil
}

func (userBlock0 *UserBlock) AttachBlockedPseudonymPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachUserBlockBlockedPseudonymPseudonym0(ctx, exec, 1, userBlock0, pseudonym1)
	if err != nil {
		return err
	}

	userBlock0.R.BlockedPseudonymPseudonym = pseudonym1

	pseudonym1.R.BlockedPseudonymUserBlocks = append(pseudonym1.R.BlockedPseudonymUserBlocks, userBlock0)

	return nil
}

func attachUserBlockBlockedUserUser0(ctx context.Context, exec bob.Executor, count int, userBlock0 *UserBlock, user1 *User) (*UserBlock, error) {
	setter := &UserBlockSetter{
		BlockedUserID: func() *sql.Null[int64] {
			v := sql.Null[int64]{V: user1.UserID, Valid: true}
			return &v
		}(),
	}

	err := userBlock0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBlockBlockedUserUser0: %w", err)
	}

	return userBlock0, nil
}

func (userBlock0 *UserBlock) InsertBlockedUserUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBlockBlockedUserUser0(ctx, exec, 1, userBlock0, user1)
	if err != nil {
		return err
	}

	userBlock0.R.BlockedUserUser = user1

	user1.R.BlockedUserUserBlocks = append(user1.R.BlockedUserUserBlocks, userBlock0)

	return nil
}

func (userBlock0 *UserBlock) AttachBlockedUserUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserBlockBlockedUserUser0(ctx, exec, 1, userBlock0, user1)
	if err != nil {
		return err
	}

	userBlock0.R.BlockedUserUser = user1

	user1.R.BlockedUserUserBlocks = append(user1.R.BlockedUserUserBlocks, userBlock0)

	return nil
}

func attachUserBlockBlockerPseudonymPseudonym0(ctx context.Context, exec bob.Executor, count int, userBlock0 *UserBlock, pseudonym1 *Pseudonym) (*UserBlock, error) {
	setter := &UserBlockSetter{
		BlockerPseudonymID: &pseudonym1.PseudonymID,
	}

	err := userBlock0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBlockBlockerPseudonymPseudonym0: %w", err)
	}

	return userBlock0, nil
}

func (userBlock0 *UserBlock) InsertBlockerPseudonymPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBlockBlockerPseudonymPseudonym0(ctx, exec, 1, userBlock0, pseudonym1)
	if err != nil {
		return err
	}

	userBlock0.R.BlockerPseudonymPseudonym = pseudonym1

	pseudonym1.R.BlockerPseudonymUserBlocks = append(pseudonym1.R.BlockerPseudonymUserBlocks, userBlock0)

	return nil
}

func (userBlock0 *UserBlock) AttachBlockerPseudonymPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachUserBlockBlockerPseudonymPseudonym0(ctx, exec, 1, userBlock0, pseudonym1)
	if err != nil {
		return err
	}

	userBlock0.R.BlockerPseudonymPseudonym = pseudonym1

	pseudonym1.R.BlockerPseudonymUserBlocks = append(pseudonym1.R.BlockerPseudonymUserBlocks, userBlock0)

	return nil
}
