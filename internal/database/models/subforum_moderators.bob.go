// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// SubforumModerator is an object representing the database table.
type SubforumModerator struct {
	ModeratorID   int64                                 `db:"moderator_id,pk" scan:"moderator_id" json:"moderator_id"`
	SubforumID    int32                                 `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	UserID        int64                                 `db:"user_id" scan:"user_id" json:"user_id"`
	PseudonymID   string                                `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	Role          string                                `db:"role" scan:"role" json:"role"`
	AddedAt       sql.Null[time.Time]                   `db:"added_at" scan:"added_at" json:"added_at"`
	AddedByUserID sql.Null[int64]                       `db:"added_by_user_id" scan:"added_by_user_id" json:"added_by_user_id"`
	Permissions   sql.Null[types.JSON[json.RawMessage]] `db:"permissions" scan:"permissions" json:"permissions"`

	R subforumModeratorR `db:"-" scan:"rel" json:"rel"`
}

// SubforumModeratorSlice is an alias for a slice of pointers to SubforumModerator.
// This should almost always be used instead of []*SubforumModerator.
type SubforumModeratorSlice []*SubforumModerator

// SubforumModerators contains methods to work with the subforum_moderators table
var SubforumModerators = psql.NewTablex[*SubforumModerator, SubforumModeratorSlice, *SubforumModeratorSetter]("", "subforum_moderators")

// SubforumModeratorsQuery is a query on the subforum_moderators table
type SubforumModeratorsQuery = *psql.ViewQuery[*SubforumModerator, SubforumModeratorSlice]

// subforumModeratorR is where relationships are stored.
type subforumModeratorR struct {
	AddedByUserUser *User      `scan:"AddedByUserUser" json:"AddedByUserUser"` // subforum_moderators.subforum_moderators_added_by_user_id_fkey
	Pseudonym       *Pseudonym `scan:"Pseudonym" json:"Pseudonym"`             // subforum_moderators.subforum_moderators_pseudonym_id_fkey
	Subforum        *Subforum  `scan:"Subforum" json:"Subforum"`               // subforum_moderators.subforum_moderators_subforum_id_fkey
	User            *User      `scan:"User" json:"User"`                       // subforum_moderators.subforum_moderators_user_id_fkey
}

type subforumModeratorColumnNames struct {
	ModeratorID   string
	SubforumID    string
	UserID        string
	PseudonymID   string
	Role          string
	AddedAt       string
	AddedByUserID string
	Permissions   string
}

var SubforumModeratorColumns = buildSubforumModeratorColumns("subforum_moderators")

type subforumModeratorColumns struct {
	tableAlias    string
	ModeratorID   psql.Expression
	SubforumID    psql.Expression
	UserID        psql.Expression
	PseudonymID   psql.Expression
	Role          psql.Expression
	AddedAt       psql.Expression
	AddedByUserID psql.Expression
	Permissions   psql.Expression
}

func (c subforumModeratorColumns) Alias() string {
	return c.tableAlias
}

func (subforumModeratorColumns) AliasedAs(alias string) subforumModeratorColumns {
	return buildSubforumModeratorColumns(alias)
}

func buildSubforumModeratorColumns(alias string) subforumModeratorColumns {
	return subforumModeratorColumns{
		tableAlias:    alias,
		ModeratorID:   psql.Quote(alias, "moderator_id"),
		SubforumID:    psql.Quote(alias, "subforum_id"),
		UserID:        psql.Quote(alias, "user_id"),
		PseudonymID:   psql.Quote(alias, "pseudonym_id"),
		Role:          psql.Quote(alias, "role"),
		AddedAt:       psql.Quote(alias, "added_at"),
		AddedByUserID: psql.Quote(alias, "added_by_user_id"),
		Permissions:   psql.Quote(alias, "permissions"),
	}
}

type subforumModeratorWhere[Q psql.Filterable] struct {
	ModeratorID   psql.WhereMod[Q, int64]
	SubforumID    psql.WhereMod[Q, int32]
	UserID        psql.WhereMod[Q, int64]
	PseudonymID   psql.WhereMod[Q, string]
	Role          psql.WhereMod[Q, string]
	AddedAt       psql.WhereNullMod[Q, time.Time]
	AddedByUserID psql.WhereNullMod[Q, int64]
	Permissions   psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
}

func (subforumModeratorWhere[Q]) AliasedAs(alias string) subforumModeratorWhere[Q] {
	return buildSubforumModeratorWhere[Q](buildSubforumModeratorColumns(alias))
}

func buildSubforumModeratorWhere[Q psql.Filterable](cols subforumModeratorColumns) subforumModeratorWhere[Q] {
	return subforumModeratorWhere[Q]{
		ModeratorID:   psql.Where[Q, int64](cols.ModeratorID),
		SubforumID:    psql.Where[Q, int32](cols.SubforumID),
		UserID:        psql.Where[Q, int64](cols.UserID),
		PseudonymID:   psql.Where[Q, string](cols.PseudonymID),
		Role:          psql.Where[Q, string](cols.Role),
		AddedAt:       psql.WhereNull[Q, time.Time](cols.AddedAt),
		AddedByUserID: psql.WhereNull[Q, int64](cols.AddedByUserID),
		Permissions:   psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.Permissions),
	}
}

var SubforumModeratorErrors = &subforumModeratorErrors{
	ErrUniqueSubforumModeratorsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "subforum_moderators",
		columns: []string{"moderator_id"},
		s:       "subforum_moderators_pkey",
	},

	ErrUniqueSubforumModeratorsSubforumIdPseudonymIdKey: &UniqueConstraintError{
		schema:  "",
		table:   "subforum_moderators",
		columns: []string{"subforum_id", "pseudonym_id"},
		s:       "subforum_moderators_subforum_id_pseudonym_id_key",
	},

	ErrUniqueSubforumModeratorsSubforumIdUserIdKey: &UniqueConstraintError{
		schema:  "",
		table:   "subforum_moderators",
		columns: []string{"subforum_id", "user_id"},
		s:       "subforum_moderators_subforum_id_user_id_key",
	},
}

type subforumModeratorErrors struct {
	ErrUniqueSubforumModeratorsPkey *UniqueConstraintError

	ErrUniqueSubforumModeratorsSubforumIdPseudonymIdKey *UniqueConstraintError

	ErrUniqueSubforumModeratorsSubforumIdUserIdKey *UniqueConstraintError
}

// SubforumModeratorSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SubforumModeratorSetter struct {
	ModeratorID   *int64                                 `db:"moderator_id,pk" scan:"moderator_id" json:"moderator_id"`
	SubforumID    *int32                                 `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	UserID        *int64                                 `db:"user_id" scan:"user_id" json:"user_id"`
	PseudonymID   *string                                `db:"pseudonym_id" scan:"pseudonym_id" json:"pseudonym_id"`
	Role          *string                                `db:"role" scan:"role" json:"role"`
	AddedAt       *sql.Null[time.Time]                   `db:"added_at" scan:"added_at" json:"added_at"`
	AddedByUserID *sql.Null[int64]                       `db:"added_by_user_id" scan:"added_by_user_id" json:"added_by_user_id"`
	Permissions   *sql.Null[types.JSON[json.RawMessage]] `db:"permissions" scan:"permissions" json:"permissions"`
}

func (s SubforumModeratorSetter) SetColumns() []string {
	vals := make([]string, 0, 8)
	if s.ModeratorID != nil {
		vals = append(vals, "moderator_id")
	}

	if s.SubforumID != nil {
		vals = append(vals, "subforum_id")
	}

	if s.UserID != nil {
		vals = append(vals, "user_id")
	}

	if s.PseudonymID != nil {
		vals = append(vals, "pseudonym_id")
	}

	if s.Role != nil {
		vals = append(vals, "role")
	}

	if s.AddedAt != nil {
		vals = append(vals, "added_at")
	}

	if s.AddedByUserID != nil {
		vals = append(vals, "added_by_user_id")
	}

	if s.Permissions != nil {
		vals = append(vals, "permissions")
	}

	return vals
}

func (s SubforumModeratorSetter) Overwrite(t *SubforumModerator) {
	if s.ModeratorID != nil {
		t.ModeratorID = *s.ModeratorID
	}
	if s.SubforumID != nil {
		t.SubforumID = *s.SubforumID
	}
	if s.UserID != nil {
		t.UserID = *s.UserID
	}
	if s.PseudonymID != nil {
		t.PseudonymID = *s.PseudonymID
	}
	if s.Role != nil {
		t.Role = *s.Role
	}
	if s.AddedAt != nil {
		t.AddedAt = *s.AddedAt
	}
	if s.AddedByUserID != nil {
		t.AddedByUserID = *s.AddedByUserID
	}
	if s.Permissions != nil {
		t.Permissions = *s.Permissions
	}
}

func (s *SubforumModeratorSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return SubforumModerators.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 8)
		if s.ModeratorID != nil {
			vals[0] = psql.Arg(*s.ModeratorID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.SubforumID != nil {
			vals[1] = psql.Arg(*s.SubforumID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.UserID != nil {
			vals[2] = psql.Arg(*s.UserID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.PseudonymID != nil {
			vals[3] = psql.Arg(*s.PseudonymID)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Role != nil {
			vals[4] = psql.Arg(*s.Role)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.AddedAt != nil {
			vals[5] = psql.Arg(*s.AddedAt)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.AddedByUserID != nil {
			vals[6] = psql.Arg(*s.AddedByUserID)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Permissions != nil {
			vals[7] = psql.Arg(*s.Permissions)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s SubforumModeratorSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s SubforumModeratorSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 8)

	if s.ModeratorID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "moderator_id")...),
			psql.Arg(s.ModeratorID),
		}})
	}

	if s.SubforumID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "subforum_id")...),
			psql.Arg(s.SubforumID),
		}})
	}

	if s.UserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if s.PseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pseudonym_id")...),
			psql.Arg(s.PseudonymID),
		}})
	}

	if s.Role != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role")...),
			psql.Arg(s.Role),
		}})
	}

	if s.AddedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "added_at")...),
			psql.Arg(s.AddedAt),
		}})
	}

	if s.AddedByUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "added_by_user_id")...),
			psql.Arg(s.AddedByUserID),
		}})
	}

	if s.Permissions != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "permissions")...),
			psql.Arg(s.Permissions),
		}})
	}

	return exprs
}

// FindSubforumModerator retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSubforumModerator(ctx context.Context, exec bob.Executor, ModeratorIDPK int64, cols ...string) (*SubforumModerator, error) {
	if len(cols) == 0 {
		return SubforumModerators.Query(
			SelectWhere.SubforumModerators.ModeratorID.EQ(ModeratorIDPK),
		).One(ctx, exec)
	}

	return SubforumModerators.Query(
		SelectWhere.SubforumModerators.ModeratorID.EQ(ModeratorIDPK),
		sm.Columns(SubforumModerators.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SubforumModeratorExists checks the presence of a single record by primary key
func SubforumModeratorExists(ctx context.Context, exec bob.Executor, ModeratorIDPK int64) (bool, error) {
	return SubforumModerators.Query(
		SelectWhere.SubforumModerators.ModeratorID.EQ(ModeratorIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after SubforumModerator is retrieved from the database
func (o *SubforumModerator) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SubforumModerators.AfterSelectHooks.RunHooks(ctx, exec, SubforumModeratorSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = SubforumModerators.AfterInsertHooks.RunHooks(ctx, exec, SubforumModeratorSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = SubforumModerators.AfterUpdateHooks.RunHooks(ctx, exec, SubforumModeratorSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = SubforumModerators.AfterDeleteHooks.RunHooks(ctx, exec, SubforumModeratorSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the SubforumModerator
func (o *SubforumModerator) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ModeratorID)
}

func (o *SubforumModerator) pkEQ() dialect.Expression {
	return psql.Quote("subforum_moderators", "moderator_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the SubforumModerator
func (o *SubforumModerator) Update(ctx context.Context, exec bob.Executor, s *SubforumModeratorSetter) error {
	v, err := SubforumModerators.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single SubforumModerator record with an executor
func (o *SubforumModerator) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := SubforumModerators.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the SubforumModerator using the executor
func (o *SubforumModerator) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := SubforumModerators.Query(
		SelectWhere.SubforumModerators.ModeratorID.EQ(o.ModeratorID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after SubforumModeratorSlice is retrieved from the database
func (o SubforumModeratorSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SubforumModerators.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = SubforumModerators.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = SubforumModerators.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = SubforumModerators.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SubforumModeratorSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("subforum_moderators", "moderator_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SubforumModeratorSlice) copyMatchingRows(from ...*SubforumModerator) {
	for i, old := range o {
		for _, new := range from {
			if new.ModeratorID != old.ModeratorID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SubforumModeratorSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SubforumModerators.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SubforumModerator:
				o.copyMatchingRows(retrieved)
			case []*SubforumModerator:
				o.copyMatchingRows(retrieved...)
			case SubforumModeratorSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SubforumModerator or a slice of SubforumModerator
				// then run the AfterUpdateHooks on the slice
				_, err = SubforumModerators.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SubforumModeratorSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SubforumModerators.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SubforumModerator:
				o.copyMatchingRows(retrieved)
			case []*SubforumModerator:
				o.copyMatchingRows(retrieved...)
			case SubforumModeratorSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SubforumModerator or a slice of SubforumModerator
				// then run the AfterDeleteHooks on the slice
				_, err = SubforumModerators.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SubforumModeratorSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SubforumModeratorSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SubforumModerators.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o SubforumModeratorSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SubforumModerators.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SubforumModeratorSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := SubforumModerators.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type subforumModeratorJoins[Q dialect.Joinable] struct {
	typ             string
	AddedByUserUser modAs[Q, userColumns]
	Pseudonym       modAs[Q, pseudonymColumns]
	Subforum        modAs[Q, subforumColumns]
	User            modAs[Q, userColumns]
}

func (j subforumModeratorJoins[Q]) aliasedAs(alias string) subforumModeratorJoins[Q] {
	return buildSubforumModeratorJoins[Q](buildSubforumModeratorColumns(alias), j.typ)
}

func buildSubforumModeratorJoins[Q dialect.Joinable](cols subforumModeratorColumns, typ string) subforumModeratorJoins[Q] {
	return subforumModeratorJoins[Q]{
		typ: typ,
		AddedByUserUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.AddedByUserID),
					))
				}

				return mods
			},
		},
		Pseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.PseudonymID),
					))
				}

				return mods
			},
		},
		Subforum: modAs[Q, subforumColumns]{
			c: SubforumColumns,
			f: func(to subforumColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Subforums.Name().As(to.Alias())).On(
						to.SubforumID.EQ(cols.SubforumID),
					))
				}

				return mods
			},
		},
		User: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}

// AddedByUserUser starts a query for related objects on users
func (o *SubforumModerator) AddedByUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.AddedByUserID))),
	)...)
}

func (os SubforumModeratorSlice) AddedByUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkAddedByUserID := make(pgtypes.Array[sql.Null[int64]], len(os))
	for i, o := range os {
		pkAddedByUserID[i] = o.AddedByUserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkAddedByUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Pseudonym starts a query for related objects on pseudonyms
func (o *SubforumModerator) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.PseudonymID))),
	)...)
}

func (os SubforumModeratorSlice) Pseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkPseudonymID[i] = o.PseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

// Subforum starts a query for related objects on subforums
func (o *SubforumModerator) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	return Subforums.Query(append(mods,
		sm.Where(SubforumColumns.SubforumID.EQ(psql.Arg(o.SubforumID))),
	)...)
}

func (os SubforumModeratorSlice) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	pkSubforumID := make(pgtypes.Array[int32], len(os))
	for i, o := range os {
		pkSubforumID[i] = o.SubforumID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkSubforumID), "integer[]")),
	))

	return Subforums.Query(append(mods,
		sm.Where(psql.Group(SubforumColumns.SubforumID).OP("IN", PKArgExpr)),
	)...)
}

// User starts a query for related objects on users
func (o *SubforumModerator) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os SubforumModeratorSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkUserID[i] = o.UserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func (o *SubforumModerator) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "AddedByUserUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("subforumModerator cannot load %T as %q", retrieved, name)
		}

		o.R.AddedByUserUser = rel

		if rel != nil {
			rel.R.AddedByUserSubforumModerators = SubforumModeratorSlice{o}
		}
		return nil
	case "Pseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("subforumModerator cannot load %T as %q", retrieved, name)
		}

		o.R.Pseudonym = rel

		if rel != nil {
			rel.R.SubforumModerators = SubforumModeratorSlice{o}
		}
		return nil
	case "Subforum":
		rel, ok := retrieved.(*Subforum)
		if !ok {
			return fmt.Errorf("subforumModerator cannot load %T as %q", retrieved, name)
		}

		o.R.Subforum = rel

		if rel != nil {
			rel.R.SubforumModerators = SubforumModeratorSlice{o}
		}
		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("subforumModerator cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.SubforumModerators = SubforumModeratorSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("subforumModerator has no relationship %q", name)
	}
}

type subforumModeratorPreloader struct {
	AddedByUserUser func(...psql.PreloadOption) psql.Preloader
	Pseudonym       func(...psql.PreloadOption) psql.Preloader
	Subforum        func(...psql.PreloadOption) psql.Preloader
	User            func(...psql.PreloadOption) psql.Preloader
}

func buildSubforumModeratorPreloader() subforumModeratorPreloader {
	return subforumModeratorPreloader{
		AddedByUserUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "AddedByUserUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.SubforumModerators,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.SubforumModerators.AddedByUserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
		Pseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "Pseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.SubforumModerators,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.SubforumModerators.PseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
		Subforum: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Subforum, SubforumSlice](orm.Relationship{
				Name: "Subforum",
				Sides: []orm.RelSide{
					{
						From: TableNames.SubforumModerators,
						To:   TableNames.Subforums,
						FromColumns: []string{
							ColumnNames.SubforumModerators.SubforumID,
						},
						ToColumns: []string{
							ColumnNames.Subforums.SubforumID,
						},
					},
				},
			}, Subforums.Columns().Names(), opts...)
		},
		User: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "User",
				Sides: []orm.RelSide{
					{
						From: TableNames.SubforumModerators,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.SubforumModerators.UserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type subforumModeratorThenLoader[Q orm.Loadable] struct {
	AddedByUserUser func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Pseudonym       func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Subforum        func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	User            func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildSubforumModeratorThenLoader[Q orm.Loadable]() subforumModeratorThenLoader[Q] {
	type AddedByUserUserLoadInterface interface {
		LoadAddedByUserUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type PseudonymLoadInterface interface {
		LoadPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type SubforumLoadInterface interface {
		LoadSubforum(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return subforumModeratorThenLoader[Q]{
		AddedByUserUser: thenLoadBuilder[Q](
			"AddedByUserUser",
			func(ctx context.Context, exec bob.Executor, retrieved AddedByUserUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadAddedByUserUser(ctx, exec, mods...)
			},
		),
		Pseudonym: thenLoadBuilder[Q](
			"Pseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved PseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPseudonym(ctx, exec, mods...)
			},
		),
		Subforum: thenLoadBuilder[Q](
			"Subforum",
			func(ctx context.Context, exec bob.Executor, retrieved SubforumLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadSubforum(ctx, exec, mods...)
			},
		),
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadAddedByUserUser loads the subforumModerator's AddedByUserUser into the .R struct
func (o *SubforumModerator) LoadAddedByUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AddedByUserUser = nil

	related, err := o.AddedByUserUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AddedByUserSubforumModerators = SubforumModeratorSlice{o}

	o.R.AddedByUserUser = related
	return nil
}

// LoadAddedByUserUser loads the subforumModerator's AddedByUserUser into the .R struct
func (os SubforumModeratorSlice) LoadAddedByUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.AddedByUserUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.AddedByUserID.V != rel.UserID {
				continue
			}

			rel.R.AddedByUserSubforumModerators = append(rel.R.AddedByUserSubforumModerators, o)

			o.R.AddedByUserUser = rel
			break
		}
	}

	return nil
}

// LoadPseudonym loads the subforumModerator's Pseudonym into the .R struct
func (o *SubforumModerator) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Pseudonym = nil

	related, err := o.Pseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SubforumModerators = SubforumModeratorSlice{o}

	o.R.Pseudonym = related
	return nil
}

// LoadPseudonym loads the subforumModerator's Pseudonym into the .R struct
func (os SubforumModeratorSlice) LoadPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.Pseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.PseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.SubforumModerators = append(rel.R.SubforumModerators, o)

			o.R.Pseudonym = rel
			break
		}
	}

	return nil
}

// LoadSubforum loads the subforumModerator's Subforum into the .R struct
func (o *SubforumModerator) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Subforum = nil

	related, err := o.Subforum(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SubforumModerators = SubforumModeratorSlice{o}

	o.R.Subforum = related
	return nil
}

// LoadSubforum loads the subforumModerator's Subforum into the .R struct
func (os SubforumModeratorSlice) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	subforums, err := os.Subforum(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range subforums {
			if o.SubforumID != rel.SubforumID {
				continue
			}

			rel.R.SubforumModerators = append(rel.R.SubforumModerators, o)

			o.R.Subforum = rel
			break
		}
	}

	return nil
}

// LoadUser loads the subforumModerator's User into the .R struct
func (o *SubforumModerator) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SubforumModerators = SubforumModeratorSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the subforumModerator's User into the .R struct
func (os SubforumModeratorSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.UserID {
				continue
			}

			rel.R.SubforumModerators = append(rel.R.SubforumModerators, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachSubforumModeratorAddedByUserUser0(ctx context.Context, exec bob.Executor, count int, subforumModerator0 *SubforumModerator, user1 *User) (*SubforumModerator, error) {
	setter := &SubforumModeratorSetter{
		AddedByUserID: func() *sql.Null[int64] {
			v := sql.Null[int64]{V: user1.UserID, Valid: true}
			return &v
		}(),
	}

	err := subforumModerator0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSubforumModeratorAddedByUserUser0: %w", err)
	}

	return subforumModerator0, nil
}

func (subforumModerator0 *SubforumModerator) InsertAddedByUserUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSubforumModeratorAddedByUserUser0(ctx, exec, 1, subforumModerator0, user1)
	if err != nil {
		return err
	}

	subforumModerator0.R.AddedByUserUser = user1

	user1.R.AddedByUserSubforumModerators = append(user1.R.AddedByUserSubforumModerators, subforumModerator0)

	return nil
}

func (subforumModerator0 *SubforumModerator) AttachAddedByUserUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachSubforumModeratorAddedByUserUser0(ctx, exec, 1, subforumModerator0, user1)
	if err != nil {
		return err
	}

	subforumModerator0.R.AddedByUserUser = user1

	user1.R.AddedByUserSubforumModerators = append(user1.R.AddedByUserSubforumModerators, subforumModerator0)

	return nil
}

func attachSubforumModeratorPseudonym0(ctx context.Context, exec bob.Executor, count int, subforumModerator0 *SubforumModerator, pseudonym1 *Pseudonym) (*SubforumModerator, error) {
	setter := &SubforumModeratorSetter{
		PseudonymID: &pseudonym1.PseudonymID,
	}

	err := subforumModerator0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSubforumModeratorPseudonym0: %w", err)
	}

	return subforumModerator0, nil
}

func (subforumModerator0 *SubforumModerator) InsertPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSubforumModeratorPseudonym0(ctx, exec, 1, subforumModerator0, pseudonym1)
	if err != nil {
		return err
	}

	subforumModerator0.R.Pseudonym = pseudonym1

	pseudonym1.R.SubforumModerators = append(pseudonym1.R.SubforumModerators, subforumModerator0)

	return nil
}

func (subforumModerator0 *SubforumModerator) AttachPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachSubforumModeratorPseudonym0(ctx, exec, 1, subforumModerator0, pseudonym1)
	if err != nil {
		return err
	}

	subforumModerator0.R.Pseudonym = pseudonym1

	pseudonym1.R.SubforumModerators = append(pseudonym1.R.SubforumModerators, subforumModerator0)

	return nil
}

func attachSubforumModeratorSubforum0(ctx context.Context, exec bob.Executor, count int, subforumModerator0 *SubforumModerator, subforum1 *Subforum) (*SubforumModerator, error) {
	setter := &SubforumModeratorSetter{
		SubforumID: &subforum1.SubforumID,
	}

	err := subforumModerator0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSubforumModeratorSubforum0: %w", err)
	}

	return subforumModerator0, nil
}

func (subforumModerator0 *SubforumModerator) InsertSubforum(ctx context.Context, exec bob.Executor, related *SubforumSetter) error {
	subforum1, err := Subforums.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSubforumModeratorSubforum0(ctx, exec, 1, subforumModerator0, subforum1)
	if err != nil {
		return err
	}

	subforumModerator0.R.Subforum = subforum1

	subforum1.R.SubforumModerators = append(subforum1.R.SubforumModerators, subforumModerator0)

	return nil
}

func (subforumModerator0 *SubforumModerator) AttachSubforum(ctx context.Context, exec bob.Executor, subforum1 *Subforum) error {
	var err error

	_, err = attachSubforumModeratorSubforum0(ctx, exec, 1, subforumModerator0, subforum1)
	if err != nil {
		return err
	}

	subforumModerator0.R.Subforum = subforum1

	subforum1.R.SubforumModerators = append(subforum1.R.SubforumModerators, subforumModerator0)

	return nil
}

func attachSubforumModeratorUser0(ctx context.Context, exec bob.Executor, count int, subforumModerator0 *SubforumModerator, user1 *User) (*SubforumModerator, error) {
	setter := &SubforumModeratorSetter{
		UserID: &user1.UserID,
	}

	err := subforumModerator0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSubforumModeratorUser0: %w", err)
	}

	return subforumModerator0, nil
}

func (subforumModerator0 *SubforumModerator) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSubforumModeratorUser0(ctx, exec, 1, subforumModerator0, user1)
	if err != nil {
		return err
	}

	subforumModerator0.R.User = user1

	user1.R.SubforumModerators = append(user1.R.SubforumModerators, subforumModerator0)

	return nil
}

func (subforumModerator0 *SubforumModerator) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachSubforumModeratorUser0(ctx, exec, 1, subforumModerator0, user1)
	if err != nil {
		return err
	}

	subforumModerator0.R.User = user1

	user1.R.SubforumModerators = append(user1.R.SubforumModerators, subforumModerator0)

	return nil
}
