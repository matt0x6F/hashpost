// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// SystemSetting is an object representing the database table.
type SystemSetting struct {
	SettingKey   string              `db:"setting_key,pk" scan:"setting_key" json:"setting_key"`
	SettingValue string              `db:"setting_value" scan:"setting_value" json:"setting_value"`
	SettingType  string              `db:"setting_type" scan:"setting_type" json:"setting_type"`
	Description  sql.Null[string]    `db:"description" scan:"description" json:"description"`
	UpdatedAt    sql.Null[time.Time] `db:"updated_at" scan:"updated_at" json:"updated_at"`
	UpdatedBy    sql.Null[int64]     `db:"updated_by" scan:"updated_by" json:"updated_by"`

	R systemSettingR `db:"-" scan:"rel" json:"rel"`
}

// SystemSettingSlice is an alias for a slice of pointers to SystemSetting.
// This should almost always be used instead of []*SystemSetting.
type SystemSettingSlice []*SystemSetting

// SystemSettings contains methods to work with the system_settings table
var SystemSettings = psql.NewTablex[*SystemSetting, SystemSettingSlice, *SystemSettingSetter]("", "system_settings")

// SystemSettingsQuery is a query on the system_settings table
type SystemSettingsQuery = *psql.ViewQuery[*SystemSetting, SystemSettingSlice]

// systemSettingR is where relationships are stored.
type systemSettingR struct {
	UpdatedByUser *User `scan:"UpdatedByUser" json:"UpdatedByUser"` // system_settings.system_settings_updated_by_fkey
}

type systemSettingColumnNames struct {
	SettingKey   string
	SettingValue string
	SettingType  string
	Description  string
	UpdatedAt    string
	UpdatedBy    string
}

var SystemSettingColumns = buildSystemSettingColumns("system_settings")

type systemSettingColumns struct {
	tableAlias   string
	SettingKey   psql.Expression
	SettingValue psql.Expression
	SettingType  psql.Expression
	Description  psql.Expression
	UpdatedAt    psql.Expression
	UpdatedBy    psql.Expression
}

func (c systemSettingColumns) Alias() string {
	return c.tableAlias
}

func (systemSettingColumns) AliasedAs(alias string) systemSettingColumns {
	return buildSystemSettingColumns(alias)
}

func buildSystemSettingColumns(alias string) systemSettingColumns {
	return systemSettingColumns{
		tableAlias:   alias,
		SettingKey:   psql.Quote(alias, "setting_key"),
		SettingValue: psql.Quote(alias, "setting_value"),
		SettingType:  psql.Quote(alias, "setting_type"),
		Description:  psql.Quote(alias, "description"),
		UpdatedAt:    psql.Quote(alias, "updated_at"),
		UpdatedBy:    psql.Quote(alias, "updated_by"),
	}
}

type systemSettingWhere[Q psql.Filterable] struct {
	SettingKey   psql.WhereMod[Q, string]
	SettingValue psql.WhereMod[Q, string]
	SettingType  psql.WhereMod[Q, string]
	Description  psql.WhereNullMod[Q, string]
	UpdatedAt    psql.WhereNullMod[Q, time.Time]
	UpdatedBy    psql.WhereNullMod[Q, int64]
}

func (systemSettingWhere[Q]) AliasedAs(alias string) systemSettingWhere[Q] {
	return buildSystemSettingWhere[Q](buildSystemSettingColumns(alias))
}

func buildSystemSettingWhere[Q psql.Filterable](cols systemSettingColumns) systemSettingWhere[Q] {
	return systemSettingWhere[Q]{
		SettingKey:   psql.Where[Q, string](cols.SettingKey),
		SettingValue: psql.Where[Q, string](cols.SettingValue),
		SettingType:  psql.Where[Q, string](cols.SettingType),
		Description:  psql.WhereNull[Q, string](cols.Description),
		UpdatedAt:    psql.WhereNull[Q, time.Time](cols.UpdatedAt),
		UpdatedBy:    psql.WhereNull[Q, int64](cols.UpdatedBy),
	}
}

var SystemSettingErrors = &systemSettingErrors{
	ErrUniqueSystemSettingsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "system_settings",
		columns: []string{"setting_key"},
		s:       "system_settings_pkey",
	},
}

type systemSettingErrors struct {
	ErrUniqueSystemSettingsPkey *UniqueConstraintError
}

// SystemSettingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SystemSettingSetter struct {
	SettingKey   *string              `db:"setting_key,pk" scan:"setting_key" json:"setting_key"`
	SettingValue *string              `db:"setting_value" scan:"setting_value" json:"setting_value"`
	SettingType  *string              `db:"setting_type" scan:"setting_type" json:"setting_type"`
	Description  *sql.Null[string]    `db:"description" scan:"description" json:"description"`
	UpdatedAt    *sql.Null[time.Time] `db:"updated_at" scan:"updated_at" json:"updated_at"`
	UpdatedBy    *sql.Null[int64]     `db:"updated_by" scan:"updated_by" json:"updated_by"`
}

func (s SystemSettingSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.SettingKey != nil {
		vals = append(vals, "setting_key")
	}

	if s.SettingValue != nil {
		vals = append(vals, "setting_value")
	}

	if s.SettingType != nil {
		vals = append(vals, "setting_type")
	}

	if s.Description != nil {
		vals = append(vals, "description")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	if s.UpdatedBy != nil {
		vals = append(vals, "updated_by")
	}

	return vals
}

func (s SystemSettingSetter) Overwrite(t *SystemSetting) {
	if s.SettingKey != nil {
		t.SettingKey = *s.SettingKey
	}
	if s.SettingValue != nil {
		t.SettingValue = *s.SettingValue
	}
	if s.SettingType != nil {
		t.SettingType = *s.SettingType
	}
	if s.Description != nil {
		t.Description = *s.Description
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
	if s.UpdatedBy != nil {
		t.UpdatedBy = *s.UpdatedBy
	}
}

func (s *SystemSettingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return SystemSettings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.SettingKey != nil {
			vals[0] = psql.Arg(*s.SettingKey)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.SettingValue != nil {
			vals[1] = psql.Arg(*s.SettingValue)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.SettingType != nil {
			vals[2] = psql.Arg(*s.SettingType)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Description != nil {
			vals[3] = psql.Arg(*s.Description)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[4] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.UpdatedBy != nil {
			vals[5] = psql.Arg(*s.UpdatedBy)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s SystemSettingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s SystemSettingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.SettingKey != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "setting_key")...),
			psql.Arg(s.SettingKey),
		}})
	}

	if s.SettingValue != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "setting_value")...),
			psql.Arg(s.SettingValue),
		}})
	}

	if s.SettingType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "setting_type")...),
			psql.Arg(s.SettingType),
		}})
	}

	if s.Description != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	if s.UpdatedBy != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_by")...),
			psql.Arg(s.UpdatedBy),
		}})
	}

	return exprs
}

// FindSystemSetting retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSystemSetting(ctx context.Context, exec bob.Executor, SettingKeyPK string, cols ...string) (*SystemSetting, error) {
	if len(cols) == 0 {
		return SystemSettings.Query(
			SelectWhere.SystemSettings.SettingKey.EQ(SettingKeyPK),
		).One(ctx, exec)
	}

	return SystemSettings.Query(
		SelectWhere.SystemSettings.SettingKey.EQ(SettingKeyPK),
		sm.Columns(SystemSettings.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SystemSettingExists checks the presence of a single record by primary key
func SystemSettingExists(ctx context.Context, exec bob.Executor, SettingKeyPK string) (bool, error) {
	return SystemSettings.Query(
		SelectWhere.SystemSettings.SettingKey.EQ(SettingKeyPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after SystemSetting is retrieved from the database
func (o *SystemSetting) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SystemSettings.AfterSelectHooks.RunHooks(ctx, exec, SystemSettingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = SystemSettings.AfterInsertHooks.RunHooks(ctx, exec, SystemSettingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = SystemSettings.AfterUpdateHooks.RunHooks(ctx, exec, SystemSettingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = SystemSettings.AfterDeleteHooks.RunHooks(ctx, exec, SystemSettingSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the SystemSetting
func (o *SystemSetting) primaryKeyVals() bob.Expression {
	return psql.Arg(o.SettingKey)
}

func (o *SystemSetting) pkEQ() dialect.Expression {
	return psql.Quote("system_settings", "setting_key").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the SystemSetting
func (o *SystemSetting) Update(ctx context.Context, exec bob.Executor, s *SystemSettingSetter) error {
	v, err := SystemSettings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single SystemSetting record with an executor
func (o *SystemSetting) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := SystemSettings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the SystemSetting using the executor
func (o *SystemSetting) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := SystemSettings.Query(
		SelectWhere.SystemSettings.SettingKey.EQ(o.SettingKey),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after SystemSettingSlice is retrieved from the database
func (o SystemSettingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SystemSettings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = SystemSettings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = SystemSettings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = SystemSettings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SystemSettingSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("system_settings", "setting_key").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SystemSettingSlice) copyMatchingRows(from ...*SystemSetting) {
	for i, old := range o {
		for _, new := range from {
			if new.SettingKey != old.SettingKey {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SystemSettingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SystemSettings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SystemSetting:
				o.copyMatchingRows(retrieved)
			case []*SystemSetting:
				o.copyMatchingRows(retrieved...)
			case SystemSettingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SystemSetting or a slice of SystemSetting
				// then run the AfterUpdateHooks on the slice
				_, err = SystemSettings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SystemSettingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SystemSettings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SystemSetting:
				o.copyMatchingRows(retrieved)
			case []*SystemSetting:
				o.copyMatchingRows(retrieved...)
			case SystemSettingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SystemSetting or a slice of SystemSetting
				// then run the AfterDeleteHooks on the slice
				_, err = SystemSettings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SystemSettingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SystemSettingSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SystemSettings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o SystemSettingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SystemSettings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SystemSettingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := SystemSettings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type systemSettingJoins[Q dialect.Joinable] struct {
	typ           string
	UpdatedByUser modAs[Q, userColumns]
}

func (j systemSettingJoins[Q]) aliasedAs(alias string) systemSettingJoins[Q] {
	return buildSystemSettingJoins[Q](buildSystemSettingColumns(alias), j.typ)
}

func buildSystemSettingJoins[Q dialect.Joinable](cols systemSettingColumns, typ string) systemSettingJoins[Q] {
	return systemSettingJoins[Q]{
		typ: typ,
		UpdatedByUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.UpdatedBy),
					))
				}

				return mods
			},
		},
	}
}

// UpdatedByUser starts a query for related objects on users
func (o *SystemSetting) UpdatedByUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.UpdatedBy))),
	)...)
}

func (os SystemSettingSlice) UpdatedByUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUpdatedBy := make(pgtypes.Array[sql.Null[int64]], len(os))
	for i, o := range os {
		pkUpdatedBy[i] = o.UpdatedBy
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUpdatedBy), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func (o *SystemSetting) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "UpdatedByUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("systemSetting cannot load %T as %q", retrieved, name)
		}

		o.R.UpdatedByUser = rel

		if rel != nil {
			rel.R.UpdatedBySystemSettings = SystemSettingSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("systemSetting has no relationship %q", name)
	}
}

type systemSettingPreloader struct {
	UpdatedByUser func(...psql.PreloadOption) psql.Preloader
}

func buildSystemSettingPreloader() systemSettingPreloader {
	return systemSettingPreloader{
		UpdatedByUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "UpdatedByUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.SystemSettings,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.SystemSettings.UpdatedBy,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type systemSettingThenLoader[Q orm.Loadable] struct {
	UpdatedByUser func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildSystemSettingThenLoader[Q orm.Loadable]() systemSettingThenLoader[Q] {
	type UpdatedByUserLoadInterface interface {
		LoadUpdatedByUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return systemSettingThenLoader[Q]{
		UpdatedByUser: thenLoadBuilder[Q](
			"UpdatedByUser",
			func(ctx context.Context, exec bob.Executor, retrieved UpdatedByUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUpdatedByUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUpdatedByUser loads the systemSetting's UpdatedByUser into the .R struct
func (o *SystemSetting) LoadUpdatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UpdatedByUser = nil

	related, err := o.UpdatedByUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UpdatedBySystemSettings = SystemSettingSlice{o}

	o.R.UpdatedByUser = related
	return nil
}

// LoadUpdatedByUser loads the systemSetting's UpdatedByUser into the .R struct
func (os SystemSettingSlice) LoadUpdatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.UpdatedByUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UpdatedBy.V != rel.UserID {
				continue
			}

			rel.R.UpdatedBySystemSettings = append(rel.R.UpdatedBySystemSettings, o)

			o.R.UpdatedByUser = rel
			break
		}
	}

	return nil
}

func attachSystemSettingUpdatedByUser0(ctx context.Context, exec bob.Executor, count int, systemSetting0 *SystemSetting, user1 *User) (*SystemSetting, error) {
	setter := &SystemSettingSetter{
		UpdatedBy: func() *sql.Null[int64] {
			v := sql.Null[int64]{V: user1.UserID, Valid: true}
			return &v
		}(),
	}

	err := systemSetting0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSystemSettingUpdatedByUser0: %w", err)
	}

	return systemSetting0, nil
}

func (systemSetting0 *SystemSetting) InsertUpdatedByUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSystemSettingUpdatedByUser0(ctx, exec, 1, systemSetting0, user1)
	if err != nil {
		return err
	}

	systemSetting0.R.UpdatedByUser = user1

	user1.R.UpdatedBySystemSettings = append(user1.R.UpdatedBySystemSettings, systemSetting0)

	return nil
}

func (systemSetting0 *SystemSetting) AttachUpdatedByUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachSystemSettingUpdatedByUser0(ctx, exec, 1, systemSetting0, user1)
	if err != nil {
		return err
	}

	systemSetting0.R.UpdatedByUser = user1

	user1.R.UpdatedBySystemSettings = append(user1.R.UpdatedBySystemSettings, systemSetting0)

	return nil
}
