// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type ComplianceReportMod interface {
	Apply(context.Context, *ComplianceReportTemplate)
}

type ComplianceReportModFunc func(context.Context, *ComplianceReportTemplate)

func (f ComplianceReportModFunc) Apply(ctx context.Context, n *ComplianceReportTemplate) {
	f(ctx, n)
}

type ComplianceReportModSlice []ComplianceReportMod

func (mods ComplianceReportModSlice) Apply(ctx context.Context, n *ComplianceReportTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// ComplianceReportTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ComplianceReportTemplate struct {
	ReportID            func() uuid.UUID
	ReportType          func() string
	RequestingAuthority func() sql.Null[string]
	RequestID           func() sql.Null[string]
	RequestDate         func() time.Time
	DueDate             func() sql.Null[time.Time]
	Status              func() sql.Null[string]
	ScopeDescription    func() string
	LegalBasis          func() sql.Null[string]
	AssignedUserID      func() sql.Null[int64]
	CreatedAt           func() sql.Null[time.Time]
	CompletedAt         func() sql.Null[time.Time]
	Notes               func() sql.Null[string]

	r complianceReportR
	f *Factory
}

type complianceReportR struct {
	ReportComplianceCorrelations []*complianceReportRReportComplianceCorrelationsR
	AssignedUserUser             *complianceReportRAssignedUserUserR
}

type complianceReportRReportComplianceCorrelationsR struct {
	number int
	o      *ComplianceCorrelationTemplate
}
type complianceReportRAssignedUserUserR struct {
	o *UserTemplate
}

// Apply mods to the ComplianceReportTemplate
func (o *ComplianceReportTemplate) Apply(ctx context.Context, mods ...ComplianceReportMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.ComplianceReport
// according to the relationships in the template. Nothing is inserted into the db
func (t ComplianceReportTemplate) setModelRels(o *models.ComplianceReport) {
	if t.r.ReportComplianceCorrelations != nil {
		rel := models.ComplianceCorrelationSlice{}
		for _, r := range t.r.ReportComplianceCorrelations {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ReportID = o.ReportID // h2
				rel.R.ReportComplianceReport = o
			}
			rel = append(rel, related...)
		}
		o.R.ReportComplianceCorrelations = rel
	}

	if t.r.AssignedUserUser != nil {
		rel := t.r.AssignedUserUser.o.Build()
		rel.R.AssignedUserComplianceReports = append(rel.R.AssignedUserComplianceReports, o)
		o.AssignedUserID = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.AssignedUserUser = rel
	}
}

// BuildSetter returns an *models.ComplianceReportSetter
// this does nothing with the relationship templates
func (o ComplianceReportTemplate) BuildSetter() *models.ComplianceReportSetter {
	m := &models.ComplianceReportSetter{}

	if o.ReportID != nil {
		val := o.ReportID()
		m.ReportID = &val
	}
	if o.ReportType != nil {
		val := o.ReportType()
		m.ReportType = &val
	}
	if o.RequestingAuthority != nil {
		val := o.RequestingAuthority()
		m.RequestingAuthority = &val
	}
	if o.RequestID != nil {
		val := o.RequestID()
		m.RequestID = &val
	}
	if o.RequestDate != nil {
		val := o.RequestDate()
		m.RequestDate = &val
	}
	if o.DueDate != nil {
		val := o.DueDate()
		m.DueDate = &val
	}
	if o.Status != nil {
		val := o.Status()
		m.Status = &val
	}
	if o.ScopeDescription != nil {
		val := o.ScopeDescription()
		m.ScopeDescription = &val
	}
	if o.LegalBasis != nil {
		val := o.LegalBasis()
		m.LegalBasis = &val
	}
	if o.AssignedUserID != nil {
		val := o.AssignedUserID()
		m.AssignedUserID = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.CompletedAt != nil {
		val := o.CompletedAt()
		m.CompletedAt = &val
	}
	if o.Notes != nil {
		val := o.Notes()
		m.Notes = &val
	}

	return m
}

// BuildManySetter returns an []*models.ComplianceReportSetter
// this does nothing with the relationship templates
func (o ComplianceReportTemplate) BuildManySetter(number int) []*models.ComplianceReportSetter {
	m := make([]*models.ComplianceReportSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.ComplianceReport
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ComplianceReportTemplate.Create
func (o ComplianceReportTemplate) Build() *models.ComplianceReport {
	m := &models.ComplianceReport{}

	if o.ReportID != nil {
		m.ReportID = o.ReportID()
	}
	if o.ReportType != nil {
		m.ReportType = o.ReportType()
	}
	if o.RequestingAuthority != nil {
		m.RequestingAuthority = o.RequestingAuthority()
	}
	if o.RequestID != nil {
		m.RequestID = o.RequestID()
	}
	if o.RequestDate != nil {
		m.RequestDate = o.RequestDate()
	}
	if o.DueDate != nil {
		m.DueDate = o.DueDate()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.ScopeDescription != nil {
		m.ScopeDescription = o.ScopeDescription()
	}
	if o.LegalBasis != nil {
		m.LegalBasis = o.LegalBasis()
	}
	if o.AssignedUserID != nil {
		m.AssignedUserID = o.AssignedUserID()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.CompletedAt != nil {
		m.CompletedAt = o.CompletedAt()
	}
	if o.Notes != nil {
		m.Notes = o.Notes()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ComplianceReportSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ComplianceReportTemplate.CreateMany
func (o ComplianceReportTemplate) BuildMany(number int) models.ComplianceReportSlice {
	m := make(models.ComplianceReportSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableComplianceReport(m *models.ComplianceReportSetter) {
	if m.ReportType == nil {
		val := random_string(nil, "50")
		m.ReportType = &val
	}
	if m.RequestDate == nil {
		val := random_time_Time(nil)
		m.RequestDate = &val
	}
	if m.ScopeDescription == nil {
		val := random_string(nil)
		m.ScopeDescription = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.ComplianceReport
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ComplianceReportTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.ComplianceReport) (context.Context, error) {
	var err error

	isReportComplianceCorrelationsDone, _ := complianceReportRelReportComplianceCorrelationsCtx.Value(ctx)
	if !isReportComplianceCorrelationsDone && o.r.ReportComplianceCorrelations != nil {
		ctx = complianceReportRelReportComplianceCorrelationsCtx.WithValue(ctx, true)
		for _, r := range o.r.ReportComplianceCorrelations {
			var rel0 models.ComplianceCorrelationSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachReportComplianceCorrelations(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isAssignedUserUserDone, _ := complianceReportRelAssignedUserUserCtx.Value(ctx)
	if !isAssignedUserUserDone && o.r.AssignedUserUser != nil {
		ctx = complianceReportRelAssignedUserUserCtx.WithValue(ctx, true)
		var rel1 *models.User
		ctx, rel1, err = o.r.AssignedUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachAssignedUserUser(ctx, exec, rel1)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a complianceReport and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ComplianceReportTemplate) Create(ctx context.Context, exec bob.Executor) (*models.ComplianceReport, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a complianceReport and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ComplianceReportTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.ComplianceReport {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a complianceReport and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ComplianceReportTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.ComplianceReport {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a complianceReport and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ComplianceReportTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.ComplianceReport, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableComplianceReport(opt)

	m, err := models.ComplianceReports.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = complianceReportCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple complianceReports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ComplianceReportTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ComplianceReportSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple complianceReports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ComplianceReportTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ComplianceReportSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple complianceReports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ComplianceReportTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ComplianceReportSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple complianceReports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ComplianceReportTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ComplianceReportSlice, error) {
	var err error
	m := make(models.ComplianceReportSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// ComplianceReport has methods that act as mods for the ComplianceReportTemplate
var ComplianceReportMods complianceReportMods

type complianceReportMods struct{}

func (m complianceReportMods) RandomizeAllColumns(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModSlice{
		ComplianceReportMods.RandomReportID(f),
		ComplianceReportMods.RandomReportType(f),
		ComplianceReportMods.RandomRequestingAuthority(f),
		ComplianceReportMods.RandomRequestID(f),
		ComplianceReportMods.RandomRequestDate(f),
		ComplianceReportMods.RandomDueDate(f),
		ComplianceReportMods.RandomStatus(f),
		ComplianceReportMods.RandomScopeDescription(f),
		ComplianceReportMods.RandomLegalBasis(f),
		ComplianceReportMods.RandomAssignedUserID(f),
		ComplianceReportMods.RandomCreatedAt(f),
		ComplianceReportMods.RandomCompletedAt(f),
		ComplianceReportMods.RandomNotes(f),
	}
}

// Set the model columns to this value
func (m complianceReportMods) ReportID(val uuid.UUID) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) ReportIDFunc(f func() uuid.UUID) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportID = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetReportID() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceReportMods) RandomReportID(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) ReportType(val string) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportType = func() string { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) ReportTypeFunc(f func() string) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportType = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetReportType() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceReportMods) RandomReportType(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ReportType = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) RequestingAuthority(val sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestingAuthority = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) RequestingAuthorityFunc(f func() sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestingAuthority = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetRequestingAuthority() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestingAuthority = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomRequestingAuthority(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestingAuthority = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "255")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomRequestingAuthorityNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestingAuthority = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "255")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) RequestID(val sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestID = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) RequestIDFunc(f func() sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestID = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetRequestID() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomRequestID(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomRequestIDNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) RequestDate(val time.Time) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestDate = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) RequestDateFunc(f func() time.Time) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestDate = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetRequestDate() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceReportMods) RandomRequestDate(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.RequestDate = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) DueDate(val sql.Null[time.Time]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.DueDate = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) DueDateFunc(f func() sql.Null[time.Time]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.DueDate = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetDueDate() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.DueDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomDueDate(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.DueDate = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomDueDateNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.DueDate = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) Status(val sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Status = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) StatusFunc(f func() sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetStatus() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomStatus(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Status = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomStatusNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Status = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) ScopeDescription(val string) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ScopeDescription = func() string { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) ScopeDescriptionFunc(f func() string) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ScopeDescription = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetScopeDescription() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ScopeDescription = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceReportMods) RandomScopeDescription(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.ScopeDescription = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) LegalBasis(val sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.LegalBasis = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) LegalBasisFunc(f func() sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.LegalBasis = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetLegalBasis() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.LegalBasis = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomLegalBasis(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.LegalBasis = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomLegalBasisNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.LegalBasis = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) AssignedUserID(val sql.Null[int64]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.AssignedUserID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) AssignedUserIDFunc(f func() sql.Null[int64]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.AssignedUserID = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetAssignedUserID() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.AssignedUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomAssignedUserID(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.AssignedUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomAssignedUserIDNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.AssignedUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) CreatedAt(val sql.Null[time.Time]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) CreatedAtFunc(f func() sql.Null[time.Time]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetCreatedAt() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomCreatedAt(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomCreatedAtNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) CompletedAt(val sql.Null[time.Time]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CompletedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) CompletedAtFunc(f func() sql.Null[time.Time]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CompletedAt = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetCompletedAt() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CompletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomCompletedAt(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CompletedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomCompletedAtNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.CompletedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m complianceReportMods) Notes(val sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Notes = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m complianceReportMods) NotesFunc(f func() sql.Null[string]) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Notes = f
	})
}

// Clear any values for the column
func (m complianceReportMods) UnsetNotes() ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Notes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceReportMods) RandomNotes(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Notes = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceReportMods) RandomNotesNotNull(f *faker.Faker) ComplianceReportMod {
	return ComplianceReportModFunc(func(_ context.Context, o *ComplianceReportTemplate) {
		o.Notes = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

func (m complianceReportMods) WithParentsCascading() ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		if isDone, _ := complianceReportWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = complianceReportWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithAssignedUserUser(related).Apply(ctx, o)
		}
	})
}

func (m complianceReportMods) WithAssignedUserUser(rel *UserTemplate) ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		o.r.AssignedUserUser = &complianceReportRAssignedUserUserR{
			o: rel,
		}
	})
}

func (m complianceReportMods) WithNewAssignedUserUser(mods ...UserMod) ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithAssignedUserUser(related).Apply(ctx, o)
	})
}

func (m complianceReportMods) WithoutAssignedUserUser() ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		o.r.AssignedUserUser = nil
	})
}

func (m complianceReportMods) WithReportComplianceCorrelations(number int, related *ComplianceCorrelationTemplate) ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		o.r.ReportComplianceCorrelations = []*complianceReportRReportComplianceCorrelationsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m complianceReportMods) WithNewReportComplianceCorrelations(number int, mods ...ComplianceCorrelationMod) ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		related := o.f.NewComplianceCorrelation(ctx, mods...)
		m.WithReportComplianceCorrelations(number, related).Apply(ctx, o)
	})
}

func (m complianceReportMods) AddReportComplianceCorrelations(number int, related *ComplianceCorrelationTemplate) ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		o.r.ReportComplianceCorrelations = append(o.r.ReportComplianceCorrelations, &complianceReportRReportComplianceCorrelationsR{
			number: number,
			o:      related,
		})
	})
}

func (m complianceReportMods) AddNewReportComplianceCorrelations(number int, mods ...ComplianceCorrelationMod) ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		related := o.f.NewComplianceCorrelation(ctx, mods...)
		m.AddReportComplianceCorrelations(number, related).Apply(ctx, o)
	})
}

func (m complianceReportMods) WithoutReportComplianceCorrelations() ComplianceReportMod {
	return ComplianceReportModFunc(func(ctx context.Context, o *ComplianceReportTemplate) {
		o.r.ReportComplianceCorrelations = nil
	})
}
