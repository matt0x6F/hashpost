// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type PostMod interface {
	Apply(context.Context, *PostTemplate)
}

type PostModFunc func(context.Context, *PostTemplate)

func (f PostModFunc) Apply(ctx context.Context, n *PostTemplate) {
	f(ctx, n)
}

type PostModSlice []PostMod

func (mods PostModSlice) Apply(ctx context.Context, n *PostTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// PostTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PostTemplate struct {
	PostID               func() int64
	SubforumID           func() int32
	Title                func() string
	Content              func() sql.Null[string]
	PostType             func() string
	URL                  func() sql.Null[string]
	IsSelfPost           func() sql.Null[bool]
	IsNSFW               func() sql.Null[bool]
	IsSpoiler            func() sql.Null[bool]
	IsLocked             func() sql.Null[bool]
	IsStickied           func() sql.Null[bool]
	IsArchived           func() sql.Null[bool]
	CreatedAt            func() sql.Null[time.Time]
	UpdatedAt            func() sql.Null[time.Time]
	Score                func() sql.Null[int32]
	Upvotes              func() sql.Null[int32]
	Downvotes            func() sql.Null[int32]
	CommentCount         func() sql.Null[int32]
	ViewCount            func() sql.Null[int32]
	IsRemoved            func() sql.Null[bool]
	RemovedByUserID      func() sql.Null[int64]
	RemovedByPseudonymID func() sql.Null[string]
	RemovalReason        func() sql.Null[string]
	RemovedAt            func() sql.Null[time.Time]
	PseudonymID          func() string

	r postR
	f *Factory
}

type postR struct {
	Comments                    []*postRCommentsR
	MediaAttachments            []*postRMediaAttachmentsR
	Poll                        *postRPollR
	Pseudonym                   *postRPseudonymR
	RemovedByPseudonymPseudonym *postRRemovedByPseudonymPseudonymR
	RemovedByUserUser           *postRRemovedByUserUserR
	Subforum                    *postRSubforumR
}

type postRCommentsR struct {
	number int
	o      *CommentTemplate
}
type postRMediaAttachmentsR struct {
	number int
	o      *MediaAttachmentTemplate
}
type postRPollR struct {
	o *PollTemplate
}
type postRPseudonymR struct {
	o *PseudonymTemplate
}
type postRRemovedByPseudonymPseudonymR struct {
	o *PseudonymTemplate
}
type postRRemovedByUserUserR struct {
	o *UserTemplate
}
type postRSubforumR struct {
	o *SubforumTemplate
}

// Apply mods to the PostTemplate
func (o *PostTemplate) Apply(ctx context.Context, mods ...PostMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Post
// according to the relationships in the template. Nothing is inserted into the db
func (t PostTemplate) setModelRels(o *models.Post) {
	if t.r.Comments != nil {
		rel := models.CommentSlice{}
		for _, r := range t.r.Comments {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PostID = o.PostID // h2
				rel.R.Post = o
			}
			rel = append(rel, related...)
		}
		o.R.Comments = rel
	}

	if t.r.MediaAttachments != nil {
		rel := models.MediaAttachmentSlice{}
		for _, r := range t.r.MediaAttachments {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PostID = o.PostID // h2
				rel.R.Post = o
			}
			rel = append(rel, related...)
		}
		o.R.MediaAttachments = rel
	}

	if t.r.Poll != nil {
		rel := t.r.Poll.o.Build()
		rel.R.Post = o
		rel.PostID = o.PostID // h2
		o.R.Poll = rel
	}

	if t.r.Pseudonym != nil {
		rel := t.r.Pseudonym.o.Build()
		rel.R.Posts = append(rel.R.Posts, o)
		o.PseudonymID = rel.PseudonymID // h2
		o.R.Pseudonym = rel
	}

	if t.r.RemovedByPseudonymPseudonym != nil {
		rel := t.r.RemovedByPseudonymPseudonym.o.Build()
		rel.R.RemovedByPseudonymPosts = append(rel.R.RemovedByPseudonymPosts, o)
		o.RemovedByPseudonymID = sql.Null[string]{V: rel.PseudonymID, Valid: true} // h2
		o.R.RemovedByPseudonymPseudonym = rel
	}

	if t.r.RemovedByUserUser != nil {
		rel := t.r.RemovedByUserUser.o.Build()
		rel.R.RemovedByUserPosts = append(rel.R.RemovedByUserPosts, o)
		o.RemovedByUserID = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.RemovedByUserUser = rel
	}

	if t.r.Subforum != nil {
		rel := t.r.Subforum.o.Build()
		rel.R.Posts = append(rel.R.Posts, o)
		o.SubforumID = rel.SubforumID // h2
		o.R.Subforum = rel
	}
}

// BuildSetter returns an *models.PostSetter
// this does nothing with the relationship templates
func (o PostTemplate) BuildSetter() *models.PostSetter {
	m := &models.PostSetter{}

	if o.PostID != nil {
		val := o.PostID()
		m.PostID = &val
	}
	if o.SubforumID != nil {
		val := o.SubforumID()
		m.SubforumID = &val
	}
	if o.Title != nil {
		val := o.Title()
		m.Title = &val
	}
	if o.Content != nil {
		val := o.Content()
		m.Content = &val
	}
	if o.PostType != nil {
		val := o.PostType()
		m.PostType = &val
	}
	if o.URL != nil {
		val := o.URL()
		m.URL = &val
	}
	if o.IsSelfPost != nil {
		val := o.IsSelfPost()
		m.IsSelfPost = &val
	}
	if o.IsNSFW != nil {
		val := o.IsNSFW()
		m.IsNSFW = &val
	}
	if o.IsSpoiler != nil {
		val := o.IsSpoiler()
		m.IsSpoiler = &val
	}
	if o.IsLocked != nil {
		val := o.IsLocked()
		m.IsLocked = &val
	}
	if o.IsStickied != nil {
		val := o.IsStickied()
		m.IsStickied = &val
	}
	if o.IsArchived != nil {
		val := o.IsArchived()
		m.IsArchived = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}
	if o.Score != nil {
		val := o.Score()
		m.Score = &val
	}
	if o.Upvotes != nil {
		val := o.Upvotes()
		m.Upvotes = &val
	}
	if o.Downvotes != nil {
		val := o.Downvotes()
		m.Downvotes = &val
	}
	if o.CommentCount != nil {
		val := o.CommentCount()
		m.CommentCount = &val
	}
	if o.ViewCount != nil {
		val := o.ViewCount()
		m.ViewCount = &val
	}
	if o.IsRemoved != nil {
		val := o.IsRemoved()
		m.IsRemoved = &val
	}
	if o.RemovedByUserID != nil {
		val := o.RemovedByUserID()
		m.RemovedByUserID = &val
	}
	if o.RemovedByPseudonymID != nil {
		val := o.RemovedByPseudonymID()
		m.RemovedByPseudonymID = &val
	}
	if o.RemovalReason != nil {
		val := o.RemovalReason()
		m.RemovalReason = &val
	}
	if o.RemovedAt != nil {
		val := o.RemovedAt()
		m.RemovedAt = &val
	}
	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}

	return m
}

// BuildManySetter returns an []*models.PostSetter
// this does nothing with the relationship templates
func (o PostTemplate) BuildManySetter(number int) []*models.PostSetter {
	m := make([]*models.PostSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Post
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PostTemplate.Create
func (o PostTemplate) Build() *models.Post {
	m := &models.Post{}

	if o.PostID != nil {
		m.PostID = o.PostID()
	}
	if o.SubforumID != nil {
		m.SubforumID = o.SubforumID()
	}
	if o.Title != nil {
		m.Title = o.Title()
	}
	if o.Content != nil {
		m.Content = o.Content()
	}
	if o.PostType != nil {
		m.PostType = o.PostType()
	}
	if o.URL != nil {
		m.URL = o.URL()
	}
	if o.IsSelfPost != nil {
		m.IsSelfPost = o.IsSelfPost()
	}
	if o.IsNSFW != nil {
		m.IsNSFW = o.IsNSFW()
	}
	if o.IsSpoiler != nil {
		m.IsSpoiler = o.IsSpoiler()
	}
	if o.IsLocked != nil {
		m.IsLocked = o.IsLocked()
	}
	if o.IsStickied != nil {
		m.IsStickied = o.IsStickied()
	}
	if o.IsArchived != nil {
		m.IsArchived = o.IsArchived()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.Score != nil {
		m.Score = o.Score()
	}
	if o.Upvotes != nil {
		m.Upvotes = o.Upvotes()
	}
	if o.Downvotes != nil {
		m.Downvotes = o.Downvotes()
	}
	if o.CommentCount != nil {
		m.CommentCount = o.CommentCount()
	}
	if o.ViewCount != nil {
		m.ViewCount = o.ViewCount()
	}
	if o.IsRemoved != nil {
		m.IsRemoved = o.IsRemoved()
	}
	if o.RemovedByUserID != nil {
		m.RemovedByUserID = o.RemovedByUserID()
	}
	if o.RemovedByPseudonymID != nil {
		m.RemovedByPseudonymID = o.RemovedByPseudonymID()
	}
	if o.RemovalReason != nil {
		m.RemovalReason = o.RemovalReason()
	}
	if o.RemovedAt != nil {
		m.RemovedAt = o.RemovedAt()
	}
	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PostSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PostTemplate.CreateMany
func (o PostTemplate) BuildMany(number int) models.PostSlice {
	m := make(models.PostSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePost(m *models.PostSetter) {
	if m.SubforumID == nil {
		val := random_int32(nil)
		m.SubforumID = &val
	}
	if m.Title == nil {
		val := random_string(nil, "300")
		m.Title = &val
	}
	if m.PseudonymID == nil {
		val := random_string(nil, "64")
		m.PseudonymID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Post
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PostTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Post) (context.Context, error) {
	var err error

	isCommentsDone, _ := postRelCommentsCtx.Value(ctx)
	if !isCommentsDone && o.r.Comments != nil {
		ctx = postRelCommentsCtx.WithValue(ctx, true)
		for _, r := range o.r.Comments {
			var rel0 models.CommentSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachComments(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isMediaAttachmentsDone, _ := postRelMediaAttachmentsCtx.Value(ctx)
	if !isMediaAttachmentsDone && o.r.MediaAttachments != nil {
		ctx = postRelMediaAttachmentsCtx.WithValue(ctx, true)
		for _, r := range o.r.MediaAttachments {
			var rel1 models.MediaAttachmentSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachMediaAttachments(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isPollDone, _ := postRelPollCtx.Value(ctx)
	if !isPollDone && o.r.Poll != nil {
		ctx = postRelPollCtx.WithValue(ctx, true)
		var rel2 *models.Poll
		ctx, rel2, err = o.r.Poll.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachPoll(ctx, exec, rel2)
		if err != nil {
			return ctx, err
		}

	}

	isRemovedByPseudonymPseudonymDone, _ := postRelRemovedByPseudonymPseudonymCtx.Value(ctx)
	if !isRemovedByPseudonymPseudonymDone && o.r.RemovedByPseudonymPseudonym != nil {
		ctx = postRelRemovedByPseudonymPseudonymCtx.WithValue(ctx, true)
		var rel4 *models.Pseudonym
		ctx, rel4, err = o.r.RemovedByPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachRemovedByPseudonymPseudonym(ctx, exec, rel4)
		if err != nil {
			return ctx, err
		}

	}

	isRemovedByUserUserDone, _ := postRelRemovedByUserUserCtx.Value(ctx)
	if !isRemovedByUserUserDone && o.r.RemovedByUserUser != nil {
		ctx = postRelRemovedByUserUserCtx.WithValue(ctx, true)
		var rel5 *models.User
		ctx, rel5, err = o.r.RemovedByUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachRemovedByUserUser(ctx, exec, rel5)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PostTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Post, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *PostTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Post {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *PostTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Post {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PostTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Post, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePost(opt)

	if o.r.Pseudonym == nil {
		PostMods.WithNewPseudonym().Apply(ctx, o)
	}

	rel3, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel3, err = o.r.Pseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PseudonymID = &rel3.PseudonymID

	if o.r.Subforum == nil {
		PostMods.WithNewSubforum().Apply(ctx, o)
	}

	rel6, ok := subforumCtx.Value(ctx)
	if !ok {
		ctx, rel6, err = o.r.Subforum.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.SubforumID = &rel6.SubforumID

	m, err := models.Posts.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = postCtx.WithValue(ctx, m)

	m.R.Pseudonym = rel3
	m.R.Subforum = rel6

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PostTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PostSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o PostTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.PostSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o PostTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.PostSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PostTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PostSlice, error) {
	var err error
	m := make(models.PostSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Post has methods that act as mods for the PostTemplate
var PostMods postMods

type postMods struct{}

func (m postMods) RandomizeAllColumns(f *faker.Faker) PostMod {
	return PostModSlice{
		PostMods.RandomPostID(f),
		PostMods.RandomSubforumID(f),
		PostMods.RandomTitle(f),
		PostMods.RandomContent(f),
		PostMods.RandomPostType(f),
		PostMods.RandomURL(f),
		PostMods.RandomIsSelfPost(f),
		PostMods.RandomIsNSFW(f),
		PostMods.RandomIsSpoiler(f),
		PostMods.RandomIsLocked(f),
		PostMods.RandomIsStickied(f),
		PostMods.RandomIsArchived(f),
		PostMods.RandomCreatedAt(f),
		PostMods.RandomUpdatedAt(f),
		PostMods.RandomScore(f),
		PostMods.RandomUpvotes(f),
		PostMods.RandomDownvotes(f),
		PostMods.RandomCommentCount(f),
		PostMods.RandomViewCount(f),
		PostMods.RandomIsRemoved(f),
		PostMods.RandomRemovedByUserID(f),
		PostMods.RandomRemovedByPseudonymID(f),
		PostMods.RandomRemovalReason(f),
		PostMods.RandomRemovedAt(f),
		PostMods.RandomPseudonymID(f),
	}
}

// Set the model columns to this value
func (m postMods) PostID(val int64) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m postMods) PostIDFunc(f func() int64) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostID = f
	})
}

// Clear any values for the column
func (m postMods) UnsetPostID() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomPostID(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m postMods) SubforumID(val int32) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.SubforumID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m postMods) SubforumIDFunc(f func() int32) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.SubforumID = f
	})
}

// Clear any values for the column
func (m postMods) UnsetSubforumID() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.SubforumID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomSubforumID(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.SubforumID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m postMods) Title(val string) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Title = func() string { return val }
	})
}

// Set the Column from the function
func (m postMods) TitleFunc(f func() string) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Title = f
	})
}

// Clear any values for the column
func (m postMods) UnsetTitle() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Title = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomTitle(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Title = func() string {
			return random_string(f, "300")
		}
	})
}

// Set the model columns to this value
func (m postMods) Content(val sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Content = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m postMods) ContentFunc(f func() sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Content = f
	})
}

// Clear any values for the column
func (m postMods) UnsetContent() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Content = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomContent(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Content = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomContentNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Content = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) PostType(val string) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostType = func() string { return val }
	})
}

// Set the Column from the function
func (m postMods) PostTypeFunc(f func() string) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostType = f
	})
}

// Clear any values for the column
func (m postMods) UnsetPostType() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomPostType(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PostType = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m postMods) URL(val sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.URL = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m postMods) URLFunc(f func() sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.URL = f
	})
}

// Clear any values for the column
func (m postMods) UnsetURL() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.URL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomURL(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.URL = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "2048")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomURLNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.URL = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "2048")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) IsSelfPost(val sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSelfPost = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m postMods) IsSelfPostFunc(f func() sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSelfPost = f
	})
}

// Clear any values for the column
func (m postMods) UnsetIsSelfPost() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSelfPost = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomIsSelfPost(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSelfPost = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomIsSelfPostNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSelfPost = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) IsNSFW(val sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsNSFW = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m postMods) IsNSFWFunc(f func() sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsNSFW = f
	})
}

// Clear any values for the column
func (m postMods) UnsetIsNSFW() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsNSFW = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomIsNSFW(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsNSFW = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomIsNSFWNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsNSFW = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) IsSpoiler(val sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSpoiler = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m postMods) IsSpoilerFunc(f func() sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSpoiler = f
	})
}

// Clear any values for the column
func (m postMods) UnsetIsSpoiler() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSpoiler = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomIsSpoiler(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSpoiler = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomIsSpoilerNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsSpoiler = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) IsLocked(val sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsLocked = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m postMods) IsLockedFunc(f func() sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsLocked = f
	})
}

// Clear any values for the column
func (m postMods) UnsetIsLocked() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsLocked = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomIsLocked(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsLocked = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomIsLockedNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsLocked = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) IsStickied(val sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsStickied = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m postMods) IsStickiedFunc(f func() sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsStickied = f
	})
}

// Clear any values for the column
func (m postMods) UnsetIsStickied() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsStickied = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomIsStickied(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsStickied = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomIsStickiedNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsStickied = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) IsArchived(val sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsArchived = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m postMods) IsArchivedFunc(f func() sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsArchived = f
	})
}

// Clear any values for the column
func (m postMods) UnsetIsArchived() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsArchived = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomIsArchived(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsArchived = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomIsArchivedNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsArchived = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) CreatedAt(val sql.Null[time.Time]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m postMods) CreatedAtFunc(f func() sql.Null[time.Time]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m postMods) UnsetCreatedAt() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomCreatedAt(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomCreatedAtNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) UpdatedAt(val sql.Null[time.Time]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m postMods) UpdatedAtFunc(f func() sql.Null[time.Time]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m postMods) UnsetUpdatedAt() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomUpdatedAt(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomUpdatedAtNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) Score(val sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Score = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m postMods) ScoreFunc(f func() sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Score = f
	})
}

// Clear any values for the column
func (m postMods) UnsetScore() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Score = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomScore(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Score = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomScoreNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Score = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) Upvotes(val sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Upvotes = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m postMods) UpvotesFunc(f func() sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Upvotes = f
	})
}

// Clear any values for the column
func (m postMods) UnsetUpvotes() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Upvotes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomUpvotes(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Upvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomUpvotesNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Upvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) Downvotes(val sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Downvotes = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m postMods) DownvotesFunc(f func() sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Downvotes = f
	})
}

// Clear any values for the column
func (m postMods) UnsetDownvotes() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Downvotes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomDownvotes(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Downvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomDownvotesNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.Downvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) CommentCount(val sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CommentCount = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m postMods) CommentCountFunc(f func() sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CommentCount = f
	})
}

// Clear any values for the column
func (m postMods) UnsetCommentCount() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CommentCount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomCommentCount(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CommentCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomCommentCountNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.CommentCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) ViewCount(val sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.ViewCount = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m postMods) ViewCountFunc(f func() sql.Null[int32]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.ViewCount = f
	})
}

// Clear any values for the column
func (m postMods) UnsetViewCount() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.ViewCount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomViewCount(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.ViewCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomViewCountNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.ViewCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) IsRemoved(val sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsRemoved = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m postMods) IsRemovedFunc(f func() sql.Null[bool]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsRemoved = f
	})
}

// Clear any values for the column
func (m postMods) UnsetIsRemoved() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsRemoved = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomIsRemoved(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsRemoved = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomIsRemovedNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.IsRemoved = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) RemovedByUserID(val sql.Null[int64]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByUserID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m postMods) RemovedByUserIDFunc(f func() sql.Null[int64]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByUserID = f
	})
}

// Clear any values for the column
func (m postMods) UnsetRemovedByUserID() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomRemovedByUserID(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomRemovedByUserIDNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) RemovedByPseudonymID(val sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByPseudonymID = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m postMods) RemovedByPseudonymIDFunc(f func() sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByPseudonymID = f
	})
}

// Clear any values for the column
func (m postMods) UnsetRemovedByPseudonymID() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomRemovedByPseudonymID(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomRemovedByPseudonymIDNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedByPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) RemovalReason(val sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovalReason = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m postMods) RemovalReasonFunc(f func() sql.Null[string]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovalReason = f
	})
}

// Clear any values for the column
func (m postMods) UnsetRemovalReason() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovalReason = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomRemovalReason(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovalReason = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomRemovalReasonNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovalReason = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) RemovedAt(val sql.Null[time.Time]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m postMods) RemovedAtFunc(f func() sql.Null[time.Time]) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedAt = f
	})
}

// Clear any values for the column
func (m postMods) UnsetRemovedAt() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m postMods) RandomRemovedAt(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m postMods) RandomRemovedAtNotNull(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.RemovedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m postMods) PseudonymID(val string) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m postMods) PseudonymIDFunc(f func() string) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m postMods) UnsetPseudonymID() PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomPseudonymID(f *faker.Faker) PostMod {
	return PostModFunc(func(_ context.Context, o *PostTemplate) {
		o.PseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

func (m postMods) WithParentsCascading() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		if isDone, _ := postWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = postWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPoll(ctx, PollMods.WithParentsCascading())
			m.WithPoll(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithRemovedByPseudonymPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithRemovedByUserUser(related).Apply(ctx, o)
		}
		{

			related := o.f.NewSubforum(ctx, SubforumMods.WithParentsCascading())
			m.WithSubforum(related).Apply(ctx, o)
		}
	})
}

func (m postMods) WithPoll(rel *PollTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Poll = &postRPollR{
			o: rel,
		}
	})
}

func (m postMods) WithNewPoll(mods ...PollMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewPoll(ctx, mods...)

		m.WithPoll(related).Apply(ctx, o)
	})
}

func (m postMods) WithoutPoll() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Poll = nil
	})
}

func (m postMods) WithPseudonym(rel *PseudonymTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Pseudonym = &postRPseudonymR{
			o: rel,
		}
	})
}

func (m postMods) WithNewPseudonym(mods ...PseudonymMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithPseudonym(related).Apply(ctx, o)
	})
}

func (m postMods) WithoutPseudonym() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Pseudonym = nil
	})
}

func (m postMods) WithRemovedByPseudonymPseudonym(rel *PseudonymTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.RemovedByPseudonymPseudonym = &postRRemovedByPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m postMods) WithNewRemovedByPseudonymPseudonym(mods ...PseudonymMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithRemovedByPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m postMods) WithoutRemovedByPseudonymPseudonym() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.RemovedByPseudonymPseudonym = nil
	})
}

func (m postMods) WithRemovedByUserUser(rel *UserTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.RemovedByUserUser = &postRRemovedByUserUserR{
			o: rel,
		}
	})
}

func (m postMods) WithNewRemovedByUserUser(mods ...UserMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithRemovedByUserUser(related).Apply(ctx, o)
	})
}

func (m postMods) WithoutRemovedByUserUser() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.RemovedByUserUser = nil
	})
}

func (m postMods) WithSubforum(rel *SubforumTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Subforum = &postRSubforumR{
			o: rel,
		}
	})
}

func (m postMods) WithNewSubforum(mods ...SubforumMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewSubforum(ctx, mods...)

		m.WithSubforum(related).Apply(ctx, o)
	})
}

func (m postMods) WithoutSubforum() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Subforum = nil
	})
}

func (m postMods) WithComments(number int, related *CommentTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Comments = []*postRCommentsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m postMods) WithNewComments(number int, mods ...CommentMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.WithComments(number, related).Apply(ctx, o)
	})
}

func (m postMods) AddComments(number int, related *CommentTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Comments = append(o.r.Comments, &postRCommentsR{
			number: number,
			o:      related,
		})
	})
}

func (m postMods) AddNewComments(number int, mods ...CommentMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.AddComments(number, related).Apply(ctx, o)
	})
}

func (m postMods) WithoutComments() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.Comments = nil
	})
}

func (m postMods) WithMediaAttachments(number int, related *MediaAttachmentTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.MediaAttachments = []*postRMediaAttachmentsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m postMods) WithNewMediaAttachments(number int, mods ...MediaAttachmentMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewMediaAttachment(ctx, mods...)
		m.WithMediaAttachments(number, related).Apply(ctx, o)
	})
}

func (m postMods) AddMediaAttachments(number int, related *MediaAttachmentTemplate) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.MediaAttachments = append(o.r.MediaAttachments, &postRMediaAttachmentsR{
			number: number,
			o:      related,
		})
	})
}

func (m postMods) AddNewMediaAttachments(number int, mods ...MediaAttachmentMod) PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		related := o.f.NewMediaAttachment(ctx, mods...)
		m.AddMediaAttachments(number, related).Apply(ctx, o)
	})
}

func (m postMods) WithoutMediaAttachments() PostMod {
	return PostModFunc(func(ctx context.Context, o *PostTemplate) {
		o.r.MediaAttachments = nil
	})
}
