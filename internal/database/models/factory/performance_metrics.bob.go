// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
)

type PerformanceMetricMod interface {
	Apply(context.Context, *PerformanceMetricTemplate)
}

type PerformanceMetricModFunc func(context.Context, *PerformanceMetricTemplate)

func (f PerformanceMetricModFunc) Apply(ctx context.Context, n *PerformanceMetricTemplate) {
	f(ctx, n)
}

type PerformanceMetricModSlice []PerformanceMetricMod

func (mods PerformanceMetricModSlice) Apply(ctx context.Context, n *PerformanceMetricTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// PerformanceMetricTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PerformanceMetricTemplate struct {
	MetricID    func() uuid.UUID
	MetricName  func() string
	MetricValue func() decimal.Decimal
	MetricUnit  func() sql.Null[string]
	Component   func() sql.Null[string]
	Timestamp   func() sql.Null[time.Time]

	f *Factory
}

// Apply mods to the PerformanceMetricTemplate
func (o *PerformanceMetricTemplate) Apply(ctx context.Context, mods ...PerformanceMetricMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.PerformanceMetric
// according to the relationships in the template. Nothing is inserted into the db
func (t PerformanceMetricTemplate) setModelRels(o *models.PerformanceMetric) {}

// BuildSetter returns an *models.PerformanceMetricSetter
// this does nothing with the relationship templates
func (o PerformanceMetricTemplate) BuildSetter() *models.PerformanceMetricSetter {
	m := &models.PerformanceMetricSetter{}

	if o.MetricID != nil {
		val := o.MetricID()
		m.MetricID = &val
	}
	if o.MetricName != nil {
		val := o.MetricName()
		m.MetricName = &val
	}
	if o.MetricValue != nil {
		val := o.MetricValue()
		m.MetricValue = &val
	}
	if o.MetricUnit != nil {
		val := o.MetricUnit()
		m.MetricUnit = &val
	}
	if o.Component != nil {
		val := o.Component()
		m.Component = &val
	}
	if o.Timestamp != nil {
		val := o.Timestamp()
		m.Timestamp = &val
	}

	return m
}

// BuildManySetter returns an []*models.PerformanceMetricSetter
// this does nothing with the relationship templates
func (o PerformanceMetricTemplate) BuildManySetter(number int) []*models.PerformanceMetricSetter {
	m := make([]*models.PerformanceMetricSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.PerformanceMetric
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PerformanceMetricTemplate.Create
func (o PerformanceMetricTemplate) Build() *models.PerformanceMetric {
	m := &models.PerformanceMetric{}

	if o.MetricID != nil {
		m.MetricID = o.MetricID()
	}
	if o.MetricName != nil {
		m.MetricName = o.MetricName()
	}
	if o.MetricValue != nil {
		m.MetricValue = o.MetricValue()
	}
	if o.MetricUnit != nil {
		m.MetricUnit = o.MetricUnit()
	}
	if o.Component != nil {
		m.Component = o.Component()
	}
	if o.Timestamp != nil {
		m.Timestamp = o.Timestamp()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PerformanceMetricSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PerformanceMetricTemplate.CreateMany
func (o PerformanceMetricTemplate) BuildMany(number int) models.PerformanceMetricSlice {
	m := make(models.PerformanceMetricSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePerformanceMetric(m *models.PerformanceMetricSetter) {
	if m.MetricName == nil {
		val := random_string(nil, "100")
		m.MetricName = &val
	}
	if m.MetricValue == nil {
		val := random_decimal_Decimal(nil, "15", "4")
		m.MetricValue = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.PerformanceMetric
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PerformanceMetricTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.PerformanceMetric) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a performanceMetric and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PerformanceMetricTemplate) Create(ctx context.Context, exec bob.Executor) (*models.PerformanceMetric, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a performanceMetric and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *PerformanceMetricTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.PerformanceMetric {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a performanceMetric and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *PerformanceMetricTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.PerformanceMetric {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a performanceMetric and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PerformanceMetricTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.PerformanceMetric, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePerformanceMetric(opt)

	m, err := models.PerformanceMetrics.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = performanceMetricCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple performanceMetrics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PerformanceMetricTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PerformanceMetricSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple performanceMetrics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o PerformanceMetricTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.PerformanceMetricSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple performanceMetrics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o PerformanceMetricTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.PerformanceMetricSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple performanceMetrics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PerformanceMetricTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PerformanceMetricSlice, error) {
	var err error
	m := make(models.PerformanceMetricSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// PerformanceMetric has methods that act as mods for the PerformanceMetricTemplate
var PerformanceMetricMods performanceMetricMods

type performanceMetricMods struct{}

func (m performanceMetricMods) RandomizeAllColumns(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModSlice{
		PerformanceMetricMods.RandomMetricID(f),
		PerformanceMetricMods.RandomMetricName(f),
		PerformanceMetricMods.RandomMetricValue(f),
		PerformanceMetricMods.RandomMetricUnit(f),
		PerformanceMetricMods.RandomComponent(f),
		PerformanceMetricMods.RandomTimestamp(f),
	}
}

// Set the model columns to this value
func (m performanceMetricMods) MetricID(val uuid.UUID) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m performanceMetricMods) MetricIDFunc(f func() uuid.UUID) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricID = f
	})
}

// Clear any values for the column
func (m performanceMetricMods) UnsetMetricID() PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m performanceMetricMods) RandomMetricID(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m performanceMetricMods) MetricName(val string) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricName = func() string { return val }
	})
}

// Set the Column from the function
func (m performanceMetricMods) MetricNameFunc(f func() string) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricName = f
	})
}

// Clear any values for the column
func (m performanceMetricMods) UnsetMetricName() PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m performanceMetricMods) RandomMetricName(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricName = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m performanceMetricMods) MetricValue(val decimal.Decimal) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricValue = func() decimal.Decimal { return val }
	})
}

// Set the Column from the function
func (m performanceMetricMods) MetricValueFunc(f func() decimal.Decimal) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricValue = f
	})
}

// Clear any values for the column
func (m performanceMetricMods) UnsetMetricValue() PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricValue = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m performanceMetricMods) RandomMetricValue(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricValue = func() decimal.Decimal {
			return random_decimal_Decimal(f, "15", "4")
		}
	})
}

// Set the model columns to this value
func (m performanceMetricMods) MetricUnit(val sql.Null[string]) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricUnit = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m performanceMetricMods) MetricUnitFunc(f func() sql.Null[string]) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricUnit = f
	})
}

// Clear any values for the column
func (m performanceMetricMods) UnsetMetricUnit() PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricUnit = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m performanceMetricMods) RandomMetricUnit(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricUnit = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m performanceMetricMods) RandomMetricUnitNotNull(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.MetricUnit = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m performanceMetricMods) Component(val sql.Null[string]) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Component = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m performanceMetricMods) ComponentFunc(f func() sql.Null[string]) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Component = f
	})
}

// Clear any values for the column
func (m performanceMetricMods) UnsetComponent() PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Component = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m performanceMetricMods) RandomComponent(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Component = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m performanceMetricMods) RandomComponentNotNull(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Component = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m performanceMetricMods) Timestamp(val sql.Null[time.Time]) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Timestamp = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m performanceMetricMods) TimestampFunc(f func() sql.Null[time.Time]) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Timestamp = f
	})
}

// Clear any values for the column
func (m performanceMetricMods) UnsetTimestamp() PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Timestamp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m performanceMetricMods) RandomTimestamp(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m performanceMetricMods) RandomTimestampNotNull(f *faker.Faker) PerformanceMetricMod {
	return PerformanceMetricModFunc(func(_ context.Context, o *PerformanceMetricTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m performanceMetricMods) WithParentsCascading() PerformanceMetricMod {
	return PerformanceMetricModFunc(func(ctx context.Context, o *PerformanceMetricTemplate) {
		if isDone, _ := performanceMetricWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = performanceMetricWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
