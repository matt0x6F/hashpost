// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"encoding/json"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type APIKeyMod interface {
	Apply(context.Context, *APIKeyTemplate)
}

type APIKeyModFunc func(context.Context, *APIKeyTemplate)

func (f APIKeyModFunc) Apply(ctx context.Context, n *APIKeyTemplate) {
	f(ctx, n)
}

type APIKeyModSlice []APIKeyMod

func (mods APIKeyModSlice) Apply(ctx context.Context, n *APIKeyTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// APIKeyTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type APIKeyTemplate struct {
	KeyID       func() int64
	KeyName     func() string
	KeyHash     func() string
	Permissions func() sql.Null[types.JSON[json.RawMessage]]
	CreatedAt   func() sql.Null[time.Time]
	ExpiresAt   func() sql.Null[time.Time]
	IsActive    func() sql.Null[bool]
	LastUsedAt  func() sql.Null[time.Time]
	PseudonymID func() sql.Null[string]

	r apiKeyR
	f *Factory
}

type apiKeyR struct {
	Pseudonym *apiKeyRPseudonymR
}

type apiKeyRPseudonymR struct {
	o *PseudonymTemplate
}

// Apply mods to the APIKeyTemplate
func (o *APIKeyTemplate) Apply(ctx context.Context, mods ...APIKeyMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.APIKey
// according to the relationships in the template. Nothing is inserted into the db
func (t APIKeyTemplate) setModelRels(o *models.APIKey) {
	if t.r.Pseudonym != nil {
		rel := t.r.Pseudonym.o.Build()
		rel.R.APIKeys = append(rel.R.APIKeys, o)
		o.PseudonymID = sql.Null[string]{V: rel.PseudonymID, Valid: true} // h2
		o.R.Pseudonym = rel
	}
}

// BuildSetter returns an *models.APIKeySetter
// this does nothing with the relationship templates
func (o APIKeyTemplate) BuildSetter() *models.APIKeySetter {
	m := &models.APIKeySetter{}

	if o.KeyID != nil {
		val := o.KeyID()
		m.KeyID = &val
	}
	if o.KeyName != nil {
		val := o.KeyName()
		m.KeyName = &val
	}
	if o.KeyHash != nil {
		val := o.KeyHash()
		m.KeyHash = &val
	}
	if o.Permissions != nil {
		val := o.Permissions()
		m.Permissions = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.ExpiresAt != nil {
		val := o.ExpiresAt()
		m.ExpiresAt = &val
	}
	if o.IsActive != nil {
		val := o.IsActive()
		m.IsActive = &val
	}
	if o.LastUsedAt != nil {
		val := o.LastUsedAt()
		m.LastUsedAt = &val
	}
	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}

	return m
}

// BuildManySetter returns an []*models.APIKeySetter
// this does nothing with the relationship templates
func (o APIKeyTemplate) BuildManySetter(number int) []*models.APIKeySetter {
	m := make([]*models.APIKeySetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.APIKey
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use APIKeyTemplate.Create
func (o APIKeyTemplate) Build() *models.APIKey {
	m := &models.APIKey{}

	if o.KeyID != nil {
		m.KeyID = o.KeyID()
	}
	if o.KeyName != nil {
		m.KeyName = o.KeyName()
	}
	if o.KeyHash != nil {
		m.KeyHash = o.KeyHash()
	}
	if o.Permissions != nil {
		m.Permissions = o.Permissions()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.ExpiresAt != nil {
		m.ExpiresAt = o.ExpiresAt()
	}
	if o.IsActive != nil {
		m.IsActive = o.IsActive()
	}
	if o.LastUsedAt != nil {
		m.LastUsedAt = o.LastUsedAt()
	}
	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.APIKeySlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use APIKeyTemplate.CreateMany
func (o APIKeyTemplate) BuildMany(number int) models.APIKeySlice {
	m := make(models.APIKeySlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAPIKey(m *models.APIKeySetter) {
	if m.KeyName == nil {
		val := random_string(nil, "100")
		m.KeyName = &val
	}
	if m.KeyHash == nil {
		val := random_string(nil, "255")
		m.KeyHash = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.APIKey
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *APIKeyTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.APIKey) (context.Context, error) {
	var err error

	isPseudonymDone, _ := apiKeyRelPseudonymCtx.Value(ctx)
	if !isPseudonymDone && o.r.Pseudonym != nil {
		ctx = apiKeyRelPseudonymCtx.WithValue(ctx, true)
		var rel0 *models.Pseudonym
		ctx, rel0, err = o.r.Pseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachPseudonym(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a apiKey and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *APIKeyTemplate) Create(ctx context.Context, exec bob.Executor) (*models.APIKey, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a apiKey and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *APIKeyTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.APIKey {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a apiKey and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *APIKeyTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.APIKey {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a apiKey and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *APIKeyTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.APIKey, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAPIKey(opt)

	m, err := models.APIKeys.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = apiKeyCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple apiKeys and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o APIKeyTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.APIKeySlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple apiKeys and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o APIKeyTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.APIKeySlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple apiKeys and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o APIKeyTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.APIKeySlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple apiKeys and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o APIKeyTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.APIKeySlice, error) {
	var err error
	m := make(models.APIKeySlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// APIKey has methods that act as mods for the APIKeyTemplate
var APIKeyMods apiKeyMods

type apiKeyMods struct{}

func (m apiKeyMods) RandomizeAllColumns(f *faker.Faker) APIKeyMod {
	return APIKeyModSlice{
		APIKeyMods.RandomKeyID(f),
		APIKeyMods.RandomKeyName(f),
		APIKeyMods.RandomKeyHash(f),
		APIKeyMods.RandomPermissions(f),
		APIKeyMods.RandomCreatedAt(f),
		APIKeyMods.RandomExpiresAt(f),
		APIKeyMods.RandomIsActive(f),
		APIKeyMods.RandomLastUsedAt(f),
		APIKeyMods.RandomPseudonymID(f),
	}
}

// Set the model columns to this value
func (m apiKeyMods) KeyID(val int64) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) KeyIDFunc(f func() int64) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyID = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetKeyID() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m apiKeyMods) RandomKeyID(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) KeyName(val string) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyName = func() string { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) KeyNameFunc(f func() string) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyName = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetKeyName() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m apiKeyMods) RandomKeyName(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyName = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) KeyHash(val string) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyHash = func() string { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) KeyHashFunc(f func() string) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyHash = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetKeyHash() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyHash = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m apiKeyMods) RandomKeyHash(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.KeyHash = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) Permissions(val sql.Null[types.JSON[json.RawMessage]]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.Permissions = func() sql.Null[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) PermissionsFunc(f func() sql.Null[types.JSON[json.RawMessage]]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.Permissions = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetPermissions() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.Permissions = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m apiKeyMods) RandomPermissions(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.Permissions = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m apiKeyMods) RandomPermissionsNotNull(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.Permissions = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) CreatedAt(val sql.Null[time.Time]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) CreatedAtFunc(f func() sql.Null[time.Time]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetCreatedAt() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m apiKeyMods) RandomCreatedAt(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m apiKeyMods) RandomCreatedAtNotNull(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) ExpiresAt(val sql.Null[time.Time]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.ExpiresAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) ExpiresAtFunc(f func() sql.Null[time.Time]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.ExpiresAt = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetExpiresAt() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.ExpiresAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m apiKeyMods) RandomExpiresAt(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.ExpiresAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m apiKeyMods) RandomExpiresAtNotNull(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.ExpiresAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) IsActive(val sql.Null[bool]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.IsActive = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) IsActiveFunc(f func() sql.Null[bool]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.IsActive = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetIsActive() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.IsActive = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m apiKeyMods) RandomIsActive(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.IsActive = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m apiKeyMods) RandomIsActiveNotNull(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.IsActive = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) LastUsedAt(val sql.Null[time.Time]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.LastUsedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) LastUsedAtFunc(f func() sql.Null[time.Time]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.LastUsedAt = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetLastUsedAt() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.LastUsedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m apiKeyMods) RandomLastUsedAt(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.LastUsedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m apiKeyMods) RandomLastUsedAtNotNull(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.LastUsedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m apiKeyMods) PseudonymID(val sql.Null[string]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.PseudonymID = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m apiKeyMods) PseudonymIDFunc(f func() sql.Null[string]) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m apiKeyMods) UnsetPseudonymID() APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m apiKeyMods) RandomPseudonymID(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.PseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m apiKeyMods) RandomPseudonymIDNotNull(f *faker.Faker) APIKeyMod {
	return APIKeyModFunc(func(_ context.Context, o *APIKeyTemplate) {
		o.PseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

func (m apiKeyMods) WithParentsCascading() APIKeyMod {
	return APIKeyModFunc(func(ctx context.Context, o *APIKeyTemplate) {
		if isDone, _ := apiKeyWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = apiKeyWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithPseudonym(related).Apply(ctx, o)
		}
	})
}

func (m apiKeyMods) WithPseudonym(rel *PseudonymTemplate) APIKeyMod {
	return APIKeyModFunc(func(ctx context.Context, o *APIKeyTemplate) {
		o.r.Pseudonym = &apiKeyRPseudonymR{
			o: rel,
		}
	})
}

func (m apiKeyMods) WithNewPseudonym(mods ...PseudonymMod) APIKeyMod {
	return APIKeyModFunc(func(ctx context.Context, o *APIKeyTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithPseudonym(related).Apply(ctx, o)
	})
}

func (m apiKeyMods) WithoutPseudonym() APIKeyMod {
	return APIKeyModFunc(func(ctx context.Context, o *APIKeyTemplate) {
		o.r.Pseudonym = nil
	})
}
