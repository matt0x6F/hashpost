// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type SubforumMod interface {
	Apply(context.Context, *SubforumTemplate)
}

type SubforumModFunc func(context.Context, *SubforumTemplate)

func (f SubforumModFunc) Apply(ctx context.Context, n *SubforumTemplate) {
	f(ctx, n)
}

type SubforumModSlice []SubforumMod

func (mods SubforumModSlice) Apply(ctx context.Context, n *SubforumTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// SubforumTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type SubforumTemplate struct {
	SubforumID             func() int32
	Name                   func() string
	DisplayName            func() string
	Description            func() sql.Null[string]
	SidebarText            func() sql.Null[string]
	RulesText              func() sql.Null[string]
	CreatedAt              func() sql.Null[time.Time]
	CreatedByUserID        func() sql.Null[int64]
	SubscriberCount        func() sql.Null[int32]
	PostCount              func() sql.Null[int32]
	IsPrivate              func() sql.Null[bool]
	IsRestricted           func() sql.Null[bool]
	IsNSFW                 func() sql.Null[bool]
	IsQuarantined          func() sql.Null[bool]
	AllowImages            func() sql.Null[bool]
	AllowVideos            func() sql.Null[bool]
	AllowPolls             func() sql.Null[bool]
	RequireFlair           func() sql.Null[bool]
	MinimumAccountAgeHours func() sql.Null[int32]
	MinimumKarmaRequired   func() sql.Null[int32]
	UpdatedAt              func() sql.Null[time.Time]

	r subforumR
	f *Factory
}

type subforumR struct {
	ModerationActions     []*subforumRModerationActionsR
	Posts                 []*subforumRPostsR
	SubforumModerators    []*subforumRSubforumModeratorsR
	SubforumSubscriptions []*subforumRSubforumSubscriptionsR
	CreatedByUserUser     *subforumRCreatedByUserUserR
	UserBans              []*subforumRUserBansR
}

type subforumRModerationActionsR struct {
	number int
	o      *ModerationActionTemplate
}
type subforumRPostsR struct {
	number int
	o      *PostTemplate
}
type subforumRSubforumModeratorsR struct {
	number int
	o      *SubforumModeratorTemplate
}
type subforumRSubforumSubscriptionsR struct {
	number int
	o      *SubforumSubscriptionTemplate
}
type subforumRCreatedByUserUserR struct {
	o *UserTemplate
}
type subforumRUserBansR struct {
	number int
	o      *UserBanTemplate
}

// Apply mods to the SubforumTemplate
func (o *SubforumTemplate) Apply(ctx context.Context, mods ...SubforumMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Subforum
// according to the relationships in the template. Nothing is inserted into the db
func (t SubforumTemplate) setModelRels(o *models.Subforum) {
	if t.r.ModerationActions != nil {
		rel := models.ModerationActionSlice{}
		for _, r := range t.r.ModerationActions {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.SubforumID = sql.Null[int32]{V: o.SubforumID, Valid: true} // h2
				rel.R.Subforum = o
			}
			rel = append(rel, related...)
		}
		o.R.ModerationActions = rel
	}

	if t.r.Posts != nil {
		rel := models.PostSlice{}
		for _, r := range t.r.Posts {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.SubforumID = o.SubforumID // h2
				rel.R.Subforum = o
			}
			rel = append(rel, related...)
		}
		o.R.Posts = rel
	}

	if t.r.SubforumModerators != nil {
		rel := models.SubforumModeratorSlice{}
		for _, r := range t.r.SubforumModerators {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.SubforumID = o.SubforumID // h2
				rel.R.Subforum = o
			}
			rel = append(rel, related...)
		}
		o.R.SubforumModerators = rel
	}

	if t.r.SubforumSubscriptions != nil {
		rel := models.SubforumSubscriptionSlice{}
		for _, r := range t.r.SubforumSubscriptions {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.SubforumID = o.SubforumID // h2
				rel.R.Subforum = o
			}
			rel = append(rel, related...)
		}
		o.R.SubforumSubscriptions = rel
	}

	if t.r.CreatedByUserUser != nil {
		rel := t.r.CreatedByUserUser.o.Build()
		rel.R.CreatedByUserSubforums = append(rel.R.CreatedByUserSubforums, o)
		o.CreatedByUserID = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.CreatedByUserUser = rel
	}

	if t.r.UserBans != nil {
		rel := models.UserBanSlice{}
		for _, r := range t.r.UserBans {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.SubforumID = o.SubforumID // h2
				rel.R.Subforum = o
			}
			rel = append(rel, related...)
		}
		o.R.UserBans = rel
	}
}

// BuildSetter returns an *models.SubforumSetter
// this does nothing with the relationship templates
func (o SubforumTemplate) BuildSetter() *models.SubforumSetter {
	m := &models.SubforumSetter{}

	if o.SubforumID != nil {
		val := o.SubforumID()
		m.SubforumID = &val
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = &val
	}
	if o.DisplayName != nil {
		val := o.DisplayName()
		m.DisplayName = &val
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = &val
	}
	if o.SidebarText != nil {
		val := o.SidebarText()
		m.SidebarText = &val
	}
	if o.RulesText != nil {
		val := o.RulesText()
		m.RulesText = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.CreatedByUserID != nil {
		val := o.CreatedByUserID()
		m.CreatedByUserID = &val
	}
	if o.SubscriberCount != nil {
		val := o.SubscriberCount()
		m.SubscriberCount = &val
	}
	if o.PostCount != nil {
		val := o.PostCount()
		m.PostCount = &val
	}
	if o.IsPrivate != nil {
		val := o.IsPrivate()
		m.IsPrivate = &val
	}
	if o.IsRestricted != nil {
		val := o.IsRestricted()
		m.IsRestricted = &val
	}
	if o.IsNSFW != nil {
		val := o.IsNSFW()
		m.IsNSFW = &val
	}
	if o.IsQuarantined != nil {
		val := o.IsQuarantined()
		m.IsQuarantined = &val
	}
	if o.AllowImages != nil {
		val := o.AllowImages()
		m.AllowImages = &val
	}
	if o.AllowVideos != nil {
		val := o.AllowVideos()
		m.AllowVideos = &val
	}
	if o.AllowPolls != nil {
		val := o.AllowPolls()
		m.AllowPolls = &val
	}
	if o.RequireFlair != nil {
		val := o.RequireFlair()
		m.RequireFlair = &val
	}
	if o.MinimumAccountAgeHours != nil {
		val := o.MinimumAccountAgeHours()
		m.MinimumAccountAgeHours = &val
	}
	if o.MinimumKarmaRequired != nil {
		val := o.MinimumKarmaRequired()
		m.MinimumKarmaRequired = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.SubforumSetter
// this does nothing with the relationship templates
func (o SubforumTemplate) BuildManySetter(number int) []*models.SubforumSetter {
	m := make([]*models.SubforumSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Subforum
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SubforumTemplate.Create
func (o SubforumTemplate) Build() *models.Subforum {
	m := &models.Subforum{}

	if o.SubforumID != nil {
		m.SubforumID = o.SubforumID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.DisplayName != nil {
		m.DisplayName = o.DisplayName()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.SidebarText != nil {
		m.SidebarText = o.SidebarText()
	}
	if o.RulesText != nil {
		m.RulesText = o.RulesText()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.CreatedByUserID != nil {
		m.CreatedByUserID = o.CreatedByUserID()
	}
	if o.SubscriberCount != nil {
		m.SubscriberCount = o.SubscriberCount()
	}
	if o.PostCount != nil {
		m.PostCount = o.PostCount()
	}
	if o.IsPrivate != nil {
		m.IsPrivate = o.IsPrivate()
	}
	if o.IsRestricted != nil {
		m.IsRestricted = o.IsRestricted()
	}
	if o.IsNSFW != nil {
		m.IsNSFW = o.IsNSFW()
	}
	if o.IsQuarantined != nil {
		m.IsQuarantined = o.IsQuarantined()
	}
	if o.AllowImages != nil {
		m.AllowImages = o.AllowImages()
	}
	if o.AllowVideos != nil {
		m.AllowVideos = o.AllowVideos()
	}
	if o.AllowPolls != nil {
		m.AllowPolls = o.AllowPolls()
	}
	if o.RequireFlair != nil {
		m.RequireFlair = o.RequireFlair()
	}
	if o.MinimumAccountAgeHours != nil {
		m.MinimumAccountAgeHours = o.MinimumAccountAgeHours()
	}
	if o.MinimumKarmaRequired != nil {
		m.MinimumKarmaRequired = o.MinimumKarmaRequired()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.SubforumSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SubforumTemplate.CreateMany
func (o SubforumTemplate) BuildMany(number int) models.SubforumSlice {
	m := make(models.SubforumSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableSubforum(m *models.SubforumSetter) {
	if m.Name == nil {
		val := random_string(nil, "50")
		m.Name = &val
	}
	if m.DisplayName == nil {
		val := random_string(nil, "100")
		m.DisplayName = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Subforum
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *SubforumTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Subforum) (context.Context, error) {
	var err error

	isModerationActionsDone, _ := subforumRelModerationActionsCtx.Value(ctx)
	if !isModerationActionsDone && o.r.ModerationActions != nil {
		ctx = subforumRelModerationActionsCtx.WithValue(ctx, true)
		for _, r := range o.r.ModerationActions {
			var rel0 models.ModerationActionSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachModerationActions(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isPostsDone, _ := subforumRelPostsCtx.Value(ctx)
	if !isPostsDone && o.r.Posts != nil {
		ctx = subforumRelPostsCtx.WithValue(ctx, true)
		for _, r := range o.r.Posts {
			var rel1 models.PostSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachPosts(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isSubforumModeratorsDone, _ := subforumRelSubforumModeratorsCtx.Value(ctx)
	if !isSubforumModeratorsDone && o.r.SubforumModerators != nil {
		ctx = subforumRelSubforumModeratorsCtx.WithValue(ctx, true)
		for _, r := range o.r.SubforumModerators {
			var rel2 models.SubforumModeratorSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachSubforumModerators(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isSubforumSubscriptionsDone, _ := subforumRelSubforumSubscriptionsCtx.Value(ctx)
	if !isSubforumSubscriptionsDone && o.r.SubforumSubscriptions != nil {
		ctx = subforumRelSubforumSubscriptionsCtx.WithValue(ctx, true)
		for _, r := range o.r.SubforumSubscriptions {
			var rel3 models.SubforumSubscriptionSlice
			ctx, rel3, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachSubforumSubscriptions(ctx, exec, rel3...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isCreatedByUserUserDone, _ := subforumRelCreatedByUserUserCtx.Value(ctx)
	if !isCreatedByUserUserDone && o.r.CreatedByUserUser != nil {
		ctx = subforumRelCreatedByUserUserCtx.WithValue(ctx, true)
		var rel4 *models.User
		ctx, rel4, err = o.r.CreatedByUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachCreatedByUserUser(ctx, exec, rel4)
		if err != nil {
			return ctx, err
		}

	}

	isUserBansDone, _ := subforumRelUserBansCtx.Value(ctx)
	if !isUserBansDone && o.r.UserBans != nil {
		ctx = subforumRelUserBansCtx.WithValue(ctx, true)
		for _, r := range o.r.UserBans {
			var rel5 models.UserBanSlice
			ctx, rel5, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUserBans(ctx, exec, rel5...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a subforum and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *SubforumTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Subforum, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a subforum and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *SubforumTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Subforum {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a subforum and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *SubforumTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Subforum {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a subforum and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *SubforumTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Subforum, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableSubforum(opt)

	m, err := models.Subforums.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = subforumCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple subforums and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o SubforumTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.SubforumSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple subforums and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o SubforumTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.SubforumSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple subforums and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o SubforumTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.SubforumSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple subforums and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o SubforumTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.SubforumSlice, error) {
	var err error
	m := make(models.SubforumSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Subforum has methods that act as mods for the SubforumTemplate
var SubforumMods subforumMods

type subforumMods struct{}

func (m subforumMods) RandomizeAllColumns(f *faker.Faker) SubforumMod {
	return SubforumModSlice{
		SubforumMods.RandomSubforumID(f),
		SubforumMods.RandomName(f),
		SubforumMods.RandomDisplayName(f),
		SubforumMods.RandomDescription(f),
		SubforumMods.RandomSidebarText(f),
		SubforumMods.RandomRulesText(f),
		SubforumMods.RandomCreatedAt(f),
		SubforumMods.RandomCreatedByUserID(f),
		SubforumMods.RandomSubscriberCount(f),
		SubforumMods.RandomPostCount(f),
		SubforumMods.RandomIsPrivate(f),
		SubforumMods.RandomIsRestricted(f),
		SubforumMods.RandomIsNSFW(f),
		SubforumMods.RandomIsQuarantined(f),
		SubforumMods.RandomAllowImages(f),
		SubforumMods.RandomAllowVideos(f),
		SubforumMods.RandomAllowPolls(f),
		SubforumMods.RandomRequireFlair(f),
		SubforumMods.RandomMinimumAccountAgeHours(f),
		SubforumMods.RandomMinimumKarmaRequired(f),
		SubforumMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m subforumMods) SubforumID(val int32) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubforumID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m subforumMods) SubforumIDFunc(f func() int32) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubforumID = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetSubforumID() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubforumID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumMods) RandomSubforumID(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubforumID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m subforumMods) Name(val string) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m subforumMods) NameFunc(f func() string) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetName() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumMods) RandomName(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Name = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m subforumMods) DisplayName(val string) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.DisplayName = func() string { return val }
	})
}

// Set the Column from the function
func (m subforumMods) DisplayNameFunc(f func() string) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.DisplayName = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetDisplayName() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.DisplayName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumMods) RandomDisplayName(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.DisplayName = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m subforumMods) Description(val sql.Null[string]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Description = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) DescriptionFunc(f func() sql.Null[string]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetDescription() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomDescription(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Description = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomDescriptionNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.Description = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) SidebarText(val sql.Null[string]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SidebarText = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) SidebarTextFunc(f func() sql.Null[string]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SidebarText = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetSidebarText() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SidebarText = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomSidebarText(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SidebarText = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomSidebarTextNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SidebarText = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) RulesText(val sql.Null[string]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RulesText = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) RulesTextFunc(f func() sql.Null[string]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RulesText = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetRulesText() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RulesText = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomRulesText(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RulesText = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomRulesTextNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RulesText = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) CreatedAt(val sql.Null[time.Time]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) CreatedAtFunc(f func() sql.Null[time.Time]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetCreatedAt() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomCreatedAt(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomCreatedAtNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) CreatedByUserID(val sql.Null[int64]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedByUserID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) CreatedByUserIDFunc(f func() sql.Null[int64]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedByUserID = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetCreatedByUserID() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedByUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomCreatedByUserID(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomCreatedByUserIDNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.CreatedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) SubscriberCount(val sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubscriberCount = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) SubscriberCountFunc(f func() sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubscriberCount = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetSubscriberCount() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubscriberCount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomSubscriberCount(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubscriberCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomSubscriberCountNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.SubscriberCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) PostCount(val sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.PostCount = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) PostCountFunc(f func() sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.PostCount = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetPostCount() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.PostCount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomPostCount(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.PostCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomPostCountNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.PostCount = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) IsPrivate(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsPrivate = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) IsPrivateFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsPrivate = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetIsPrivate() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsPrivate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomIsPrivate(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsPrivate = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomIsPrivateNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsPrivate = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) IsRestricted(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsRestricted = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) IsRestrictedFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsRestricted = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetIsRestricted() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsRestricted = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomIsRestricted(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsRestricted = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomIsRestrictedNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsRestricted = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) IsNSFW(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsNSFW = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) IsNSFWFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsNSFW = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetIsNSFW() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsNSFW = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomIsNSFW(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsNSFW = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomIsNSFWNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsNSFW = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) IsQuarantined(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsQuarantined = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) IsQuarantinedFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsQuarantined = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetIsQuarantined() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsQuarantined = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomIsQuarantined(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsQuarantined = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomIsQuarantinedNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.IsQuarantined = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) AllowImages(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowImages = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) AllowImagesFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowImages = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetAllowImages() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowImages = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomAllowImages(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowImages = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomAllowImagesNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowImages = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) AllowVideos(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowVideos = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) AllowVideosFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowVideos = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetAllowVideos() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowVideos = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomAllowVideos(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowVideos = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomAllowVideosNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowVideos = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) AllowPolls(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowPolls = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) AllowPollsFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowPolls = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetAllowPolls() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowPolls = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomAllowPolls(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowPolls = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomAllowPollsNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.AllowPolls = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) RequireFlair(val sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RequireFlair = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) RequireFlairFunc(f func() sql.Null[bool]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RequireFlair = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetRequireFlair() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RequireFlair = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomRequireFlair(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RequireFlair = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomRequireFlairNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.RequireFlair = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) MinimumAccountAgeHours(val sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumAccountAgeHours = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) MinimumAccountAgeHoursFunc(f func() sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumAccountAgeHours = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetMinimumAccountAgeHours() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumAccountAgeHours = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomMinimumAccountAgeHours(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumAccountAgeHours = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomMinimumAccountAgeHoursNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumAccountAgeHours = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) MinimumKarmaRequired(val sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumKarmaRequired = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) MinimumKarmaRequiredFunc(f func() sql.Null[int32]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumKarmaRequired = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetMinimumKarmaRequired() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumKarmaRequired = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomMinimumKarmaRequired(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumKarmaRequired = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomMinimumKarmaRequiredNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.MinimumKarmaRequired = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumMods) UpdatedAt(val sql.Null[time.Time]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m subforumMods) UpdatedAtFunc(f func() sql.Null[time.Time]) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m subforumMods) UnsetUpdatedAt() SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumMods) RandomUpdatedAt(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumMods) RandomUpdatedAtNotNull(f *faker.Faker) SubforumMod {
	return SubforumModFunc(func(_ context.Context, o *SubforumTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m subforumMods) WithParentsCascading() SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		if isDone, _ := subforumWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = subforumWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithCreatedByUserUser(related).Apply(ctx, o)
		}
	})
}

func (m subforumMods) WithCreatedByUserUser(rel *UserTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.CreatedByUserUser = &subforumRCreatedByUserUserR{
			o: rel,
		}
	})
}

func (m subforumMods) WithNewCreatedByUserUser(mods ...UserMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithCreatedByUserUser(related).Apply(ctx, o)
	})
}

func (m subforumMods) WithoutCreatedByUserUser() SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.CreatedByUserUser = nil
	})
}

func (m subforumMods) WithModerationActions(number int, related *ModerationActionTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.ModerationActions = []*subforumRModerationActionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m subforumMods) WithNewModerationActions(number int, mods ...ModerationActionMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewModerationAction(ctx, mods...)
		m.WithModerationActions(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) AddModerationActions(number int, related *ModerationActionTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.ModerationActions = append(o.r.ModerationActions, &subforumRModerationActionsR{
			number: number,
			o:      related,
		})
	})
}

func (m subforumMods) AddNewModerationActions(number int, mods ...ModerationActionMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewModerationAction(ctx, mods...)
		m.AddModerationActions(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) WithoutModerationActions() SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.ModerationActions = nil
	})
}

func (m subforumMods) WithPosts(number int, related *PostTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.Posts = []*subforumRPostsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m subforumMods) WithNewPosts(number int, mods ...PostMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewPost(ctx, mods...)
		m.WithPosts(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) AddPosts(number int, related *PostTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.Posts = append(o.r.Posts, &subforumRPostsR{
			number: number,
			o:      related,
		})
	})
}

func (m subforumMods) AddNewPosts(number int, mods ...PostMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewPost(ctx, mods...)
		m.AddPosts(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) WithoutPosts() SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.Posts = nil
	})
}

func (m subforumMods) WithSubforumModerators(number int, related *SubforumModeratorTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.SubforumModerators = []*subforumRSubforumModeratorsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m subforumMods) WithNewSubforumModerators(number int, mods ...SubforumModeratorMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewSubforumModerator(ctx, mods...)
		m.WithSubforumModerators(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) AddSubforumModerators(number int, related *SubforumModeratorTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.SubforumModerators = append(o.r.SubforumModerators, &subforumRSubforumModeratorsR{
			number: number,
			o:      related,
		})
	})
}

func (m subforumMods) AddNewSubforumModerators(number int, mods ...SubforumModeratorMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewSubforumModerator(ctx, mods...)
		m.AddSubforumModerators(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) WithoutSubforumModerators() SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.SubforumModerators = nil
	})
}

func (m subforumMods) WithSubforumSubscriptions(number int, related *SubforumSubscriptionTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.SubforumSubscriptions = []*subforumRSubforumSubscriptionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m subforumMods) WithNewSubforumSubscriptions(number int, mods ...SubforumSubscriptionMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewSubforumSubscription(ctx, mods...)
		m.WithSubforumSubscriptions(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) AddSubforumSubscriptions(number int, related *SubforumSubscriptionTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.SubforumSubscriptions = append(o.r.SubforumSubscriptions, &subforumRSubforumSubscriptionsR{
			number: number,
			o:      related,
		})
	})
}

func (m subforumMods) AddNewSubforumSubscriptions(number int, mods ...SubforumSubscriptionMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewSubforumSubscription(ctx, mods...)
		m.AddSubforumSubscriptions(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) WithoutSubforumSubscriptions() SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.SubforumSubscriptions = nil
	})
}

func (m subforumMods) WithUserBans(number int, related *UserBanTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.UserBans = []*subforumRUserBansR{{
			number: number,
			o:      related,
		}}
	})
}

func (m subforumMods) WithNewUserBans(number int, mods ...UserBanMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewUserBan(ctx, mods...)
		m.WithUserBans(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) AddUserBans(number int, related *UserBanTemplate) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.UserBans = append(o.r.UserBans, &subforumRUserBansR{
			number: number,
			o:      related,
		})
	})
}

func (m subforumMods) AddNewUserBans(number int, mods ...UserBanMod) SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		related := o.f.NewUserBan(ctx, mods...)
		m.AddUserBans(number, related).Apply(ctx, o)
	})
}

func (m subforumMods) WithoutUserBans() SubforumMod {
	return SubforumModFunc(func(ctx context.Context, o *SubforumTemplate) {
		o.r.UserBans = nil
	})
}
