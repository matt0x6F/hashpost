// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type MediaAttachmentMod interface {
	Apply(context.Context, *MediaAttachmentTemplate)
}

type MediaAttachmentModFunc func(context.Context, *MediaAttachmentTemplate)

func (f MediaAttachmentModFunc) Apply(ctx context.Context, n *MediaAttachmentTemplate) {
	f(ctx, n)
}

type MediaAttachmentModSlice []MediaAttachmentMod

func (mods MediaAttachmentModSlice) Apply(ctx context.Context, n *MediaAttachmentTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// MediaAttachmentTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type MediaAttachmentTemplate struct {
	AttachmentID    func() int64
	PostID          func() int64
	FileName        func() string
	FilePath        func() string
	FileSize        func() int64
	MimeType        func() string
	Width           func() sql.Null[int32]
	Height          func() sql.Null[int32]
	DurationSeconds func() sql.Null[int32]
	CreatedAt       func() sql.Null[time.Time]

	r mediaAttachmentR
	f *Factory
}

type mediaAttachmentR struct {
	Post *mediaAttachmentRPostR
}

type mediaAttachmentRPostR struct {
	o *PostTemplate
}

// Apply mods to the MediaAttachmentTemplate
func (o *MediaAttachmentTemplate) Apply(ctx context.Context, mods ...MediaAttachmentMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.MediaAttachment
// according to the relationships in the template. Nothing is inserted into the db
func (t MediaAttachmentTemplate) setModelRels(o *models.MediaAttachment) {
	if t.r.Post != nil {
		rel := t.r.Post.o.Build()
		rel.R.MediaAttachments = append(rel.R.MediaAttachments, o)
		o.PostID = rel.PostID // h2
		o.R.Post = rel
	}
}

// BuildSetter returns an *models.MediaAttachmentSetter
// this does nothing with the relationship templates
func (o MediaAttachmentTemplate) BuildSetter() *models.MediaAttachmentSetter {
	m := &models.MediaAttachmentSetter{}

	if o.AttachmentID != nil {
		val := o.AttachmentID()
		m.AttachmentID = &val
	}
	if o.PostID != nil {
		val := o.PostID()
		m.PostID = &val
	}
	if o.FileName != nil {
		val := o.FileName()
		m.FileName = &val
	}
	if o.FilePath != nil {
		val := o.FilePath()
		m.FilePath = &val
	}
	if o.FileSize != nil {
		val := o.FileSize()
		m.FileSize = &val
	}
	if o.MimeType != nil {
		val := o.MimeType()
		m.MimeType = &val
	}
	if o.Width != nil {
		val := o.Width()
		m.Width = &val
	}
	if o.Height != nil {
		val := o.Height()
		m.Height = &val
	}
	if o.DurationSeconds != nil {
		val := o.DurationSeconds()
		m.DurationSeconds = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.MediaAttachmentSetter
// this does nothing with the relationship templates
func (o MediaAttachmentTemplate) BuildManySetter(number int) []*models.MediaAttachmentSetter {
	m := make([]*models.MediaAttachmentSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.MediaAttachment
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MediaAttachmentTemplate.Create
func (o MediaAttachmentTemplate) Build() *models.MediaAttachment {
	m := &models.MediaAttachment{}

	if o.AttachmentID != nil {
		m.AttachmentID = o.AttachmentID()
	}
	if o.PostID != nil {
		m.PostID = o.PostID()
	}
	if o.FileName != nil {
		m.FileName = o.FileName()
	}
	if o.FilePath != nil {
		m.FilePath = o.FilePath()
	}
	if o.FileSize != nil {
		m.FileSize = o.FileSize()
	}
	if o.MimeType != nil {
		m.MimeType = o.MimeType()
	}
	if o.Width != nil {
		m.Width = o.Width()
	}
	if o.Height != nil {
		m.Height = o.Height()
	}
	if o.DurationSeconds != nil {
		m.DurationSeconds = o.DurationSeconds()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.MediaAttachmentSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MediaAttachmentTemplate.CreateMany
func (o MediaAttachmentTemplate) BuildMany(number int) models.MediaAttachmentSlice {
	m := make(models.MediaAttachmentSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableMediaAttachment(m *models.MediaAttachmentSetter) {
	if m.PostID == nil {
		val := random_int64(nil)
		m.PostID = &val
	}
	if m.FileName == nil {
		val := random_string(nil, "255")
		m.FileName = &val
	}
	if m.FilePath == nil {
		val := random_string(nil, "500")
		m.FilePath = &val
	}
	if m.FileSize == nil {
		val := random_int64(nil)
		m.FileSize = &val
	}
	if m.MimeType == nil {
		val := random_string(nil, "100")
		m.MimeType = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.MediaAttachment
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *MediaAttachmentTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.MediaAttachment) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a mediaAttachment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *MediaAttachmentTemplate) Create(ctx context.Context, exec bob.Executor) (*models.MediaAttachment, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a mediaAttachment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *MediaAttachmentTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.MediaAttachment {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a mediaAttachment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *MediaAttachmentTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.MediaAttachment {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a mediaAttachment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *MediaAttachmentTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.MediaAttachment, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableMediaAttachment(opt)

	if o.r.Post == nil {
		MediaAttachmentMods.WithNewPost().Apply(ctx, o)
	}

	rel0, ok := postCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.Post.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PostID = &rel0.PostID

	m, err := models.MediaAttachments.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = mediaAttachmentCtx.WithValue(ctx, m)

	m.R.Post = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple mediaAttachments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o MediaAttachmentTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.MediaAttachmentSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple mediaAttachments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o MediaAttachmentTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.MediaAttachmentSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple mediaAttachments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o MediaAttachmentTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.MediaAttachmentSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple mediaAttachments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o MediaAttachmentTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.MediaAttachmentSlice, error) {
	var err error
	m := make(models.MediaAttachmentSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// MediaAttachment has methods that act as mods for the MediaAttachmentTemplate
var MediaAttachmentMods mediaAttachmentMods

type mediaAttachmentMods struct{}

func (m mediaAttachmentMods) RandomizeAllColumns(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModSlice{
		MediaAttachmentMods.RandomAttachmentID(f),
		MediaAttachmentMods.RandomPostID(f),
		MediaAttachmentMods.RandomFileName(f),
		MediaAttachmentMods.RandomFilePath(f),
		MediaAttachmentMods.RandomFileSize(f),
		MediaAttachmentMods.RandomMimeType(f),
		MediaAttachmentMods.RandomWidth(f),
		MediaAttachmentMods.RandomHeight(f),
		MediaAttachmentMods.RandomDurationSeconds(f),
		MediaAttachmentMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m mediaAttachmentMods) AttachmentID(val int64) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.AttachmentID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) AttachmentIDFunc(f func() int64) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.AttachmentID = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetAttachmentID() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.AttachmentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediaAttachmentMods) RandomAttachmentID(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.AttachmentID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) PostID(val int64) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.PostID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) PostIDFunc(f func() int64) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.PostID = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetPostID() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.PostID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediaAttachmentMods) RandomPostID(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.PostID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) FileName(val string) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileName = func() string { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) FileNameFunc(f func() string) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileName = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetFileName() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediaAttachmentMods) RandomFileName(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileName = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) FilePath(val string) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FilePath = func() string { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) FilePathFunc(f func() string) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FilePath = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetFilePath() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FilePath = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediaAttachmentMods) RandomFilePath(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FilePath = func() string {
			return random_string(f, "500")
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) FileSize(val int64) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileSize = func() int64 { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) FileSizeFunc(f func() int64) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileSize = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetFileSize() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileSize = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediaAttachmentMods) RandomFileSize(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.FileSize = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) MimeType(val string) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.MimeType = func() string { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) MimeTypeFunc(f func() string) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.MimeType = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetMimeType() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.MimeType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediaAttachmentMods) RandomMimeType(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.MimeType = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) Width(val sql.Null[int32]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Width = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) WidthFunc(f func() sql.Null[int32]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Width = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetWidth() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Width = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m mediaAttachmentMods) RandomWidth(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Width = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m mediaAttachmentMods) RandomWidthNotNull(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Width = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) Height(val sql.Null[int32]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Height = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) HeightFunc(f func() sql.Null[int32]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Height = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetHeight() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Height = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m mediaAttachmentMods) RandomHeight(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Height = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m mediaAttachmentMods) RandomHeightNotNull(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.Height = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) DurationSeconds(val sql.Null[int32]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.DurationSeconds = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) DurationSecondsFunc(f func() sql.Null[int32]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.DurationSeconds = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetDurationSeconds() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.DurationSeconds = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m mediaAttachmentMods) RandomDurationSeconds(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.DurationSeconds = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m mediaAttachmentMods) RandomDurationSecondsNotNull(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.DurationSeconds = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m mediaAttachmentMods) CreatedAt(val sql.Null[time.Time]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m mediaAttachmentMods) CreatedAtFunc(f func() sql.Null[time.Time]) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m mediaAttachmentMods) UnsetCreatedAt() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m mediaAttachmentMods) RandomCreatedAt(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m mediaAttachmentMods) RandomCreatedAtNotNull(f *faker.Faker) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(_ context.Context, o *MediaAttachmentTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m mediaAttachmentMods) WithParentsCascading() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(ctx context.Context, o *MediaAttachmentTemplate) {
		if isDone, _ := mediaAttachmentWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = mediaAttachmentWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPost(ctx, PostMods.WithParentsCascading())
			m.WithPost(related).Apply(ctx, o)
		}
	})
}

func (m mediaAttachmentMods) WithPost(rel *PostTemplate) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(ctx context.Context, o *MediaAttachmentTemplate) {
		o.r.Post = &mediaAttachmentRPostR{
			o: rel,
		}
	})
}

func (m mediaAttachmentMods) WithNewPost(mods ...PostMod) MediaAttachmentMod {
	return MediaAttachmentModFunc(func(ctx context.Context, o *MediaAttachmentTemplate) {
		related := o.f.NewPost(ctx, mods...)

		m.WithPost(related).Apply(ctx, o)
	})
}

func (m mediaAttachmentMods) WithoutPost() MediaAttachmentMod {
	return MediaAttachmentModFunc(func(ctx context.Context, o *MediaAttachmentTemplate) {
		o.r.Post = nil
	})
}
