// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type ReportMod interface {
	Apply(context.Context, *ReportTemplate)
}

type ReportModFunc func(context.Context, *ReportTemplate)

func (f ReportModFunc) Apply(ctx context.Context, n *ReportTemplate) {
	f(ctx, n)
}

type ReportModSlice []ReportMod

func (mods ReportModSlice) Apply(ctx context.Context, n *ReportTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// ReportTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ReportTemplate struct {
	ReportID              func() int64
	ReporterPseudonymID   func() string
	ContentType           func() string
	ContentID             func() sql.Null[int64]
	ReportedPseudonymID   func() sql.Null[string]
	ReportReason          func() string
	ReportDetails         func() sql.Null[string]
	CreatedAt             func() sql.Null[time.Time]
	Status                func() sql.Null[string]
	ResolvedByUserID      func() sql.Null[int64]
	ResolvedByPseudonymID func() sql.Null[string]
	ResolutionNotes       func() sql.Null[string]
	ResolvedAt            func() sql.Null[time.Time]

	r reportR
	f *Factory
}

type reportR struct {
	ReportedPseudonymPseudonym   *reportRReportedPseudonymPseudonymR
	ReporterPseudonymPseudonym   *reportRReporterPseudonymPseudonymR
	ResolvedByPseudonymPseudonym *reportRResolvedByPseudonymPseudonymR
	ResolvedByUserUser           *reportRResolvedByUserUserR
}

type reportRReportedPseudonymPseudonymR struct {
	o *PseudonymTemplate
}
type reportRReporterPseudonymPseudonymR struct {
	o *PseudonymTemplate
}
type reportRResolvedByPseudonymPseudonymR struct {
	o *PseudonymTemplate
}
type reportRResolvedByUserUserR struct {
	o *UserTemplate
}

// Apply mods to the ReportTemplate
func (o *ReportTemplate) Apply(ctx context.Context, mods ...ReportMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Report
// according to the relationships in the template. Nothing is inserted into the db
func (t ReportTemplate) setModelRels(o *models.Report) {
	if t.r.ReportedPseudonymPseudonym != nil {
		rel := t.r.ReportedPseudonymPseudonym.o.Build()
		rel.R.ReportedPseudonymReports = append(rel.R.ReportedPseudonymReports, o)
		o.ReportedPseudonymID = sql.Null[string]{V: rel.PseudonymID, Valid: true} // h2
		o.R.ReportedPseudonymPseudonym = rel
	}

	if t.r.ReporterPseudonymPseudonym != nil {
		rel := t.r.ReporterPseudonymPseudonym.o.Build()
		rel.R.ReporterPseudonymReports = append(rel.R.ReporterPseudonymReports, o)
		o.ReporterPseudonymID = rel.PseudonymID // h2
		o.R.ReporterPseudonymPseudonym = rel
	}

	if t.r.ResolvedByPseudonymPseudonym != nil {
		rel := t.r.ResolvedByPseudonymPseudonym.o.Build()
		rel.R.ResolvedByPseudonymReports = append(rel.R.ResolvedByPseudonymReports, o)
		o.ResolvedByPseudonymID = sql.Null[string]{V: rel.PseudonymID, Valid: true} // h2
		o.R.ResolvedByPseudonymPseudonym = rel
	}

	if t.r.ResolvedByUserUser != nil {
		rel := t.r.ResolvedByUserUser.o.Build()
		rel.R.ResolvedByUserReports = append(rel.R.ResolvedByUserReports, o)
		o.ResolvedByUserID = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.ResolvedByUserUser = rel
	}
}

// BuildSetter returns an *models.ReportSetter
// this does nothing with the relationship templates
func (o ReportTemplate) BuildSetter() *models.ReportSetter {
	m := &models.ReportSetter{}

	if o.ReportID != nil {
		val := o.ReportID()
		m.ReportID = &val
	}
	if o.ReporterPseudonymID != nil {
		val := o.ReporterPseudonymID()
		m.ReporterPseudonymID = &val
	}
	if o.ContentType != nil {
		val := o.ContentType()
		m.ContentType = &val
	}
	if o.ContentID != nil {
		val := o.ContentID()
		m.ContentID = &val
	}
	if o.ReportedPseudonymID != nil {
		val := o.ReportedPseudonymID()
		m.ReportedPseudonymID = &val
	}
	if o.ReportReason != nil {
		val := o.ReportReason()
		m.ReportReason = &val
	}
	if o.ReportDetails != nil {
		val := o.ReportDetails()
		m.ReportDetails = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.Status != nil {
		val := o.Status()
		m.Status = &val
	}
	if o.ResolvedByUserID != nil {
		val := o.ResolvedByUserID()
		m.ResolvedByUserID = &val
	}
	if o.ResolvedByPseudonymID != nil {
		val := o.ResolvedByPseudonymID()
		m.ResolvedByPseudonymID = &val
	}
	if o.ResolutionNotes != nil {
		val := o.ResolutionNotes()
		m.ResolutionNotes = &val
	}
	if o.ResolvedAt != nil {
		val := o.ResolvedAt()
		m.ResolvedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.ReportSetter
// this does nothing with the relationship templates
func (o ReportTemplate) BuildManySetter(number int) []*models.ReportSetter {
	m := make([]*models.ReportSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Report
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ReportTemplate.Create
func (o ReportTemplate) Build() *models.Report {
	m := &models.Report{}

	if o.ReportID != nil {
		m.ReportID = o.ReportID()
	}
	if o.ReporterPseudonymID != nil {
		m.ReporterPseudonymID = o.ReporterPseudonymID()
	}
	if o.ContentType != nil {
		m.ContentType = o.ContentType()
	}
	if o.ContentID != nil {
		m.ContentID = o.ContentID()
	}
	if o.ReportedPseudonymID != nil {
		m.ReportedPseudonymID = o.ReportedPseudonymID()
	}
	if o.ReportReason != nil {
		m.ReportReason = o.ReportReason()
	}
	if o.ReportDetails != nil {
		m.ReportDetails = o.ReportDetails()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.ResolvedByUserID != nil {
		m.ResolvedByUserID = o.ResolvedByUserID()
	}
	if o.ResolvedByPseudonymID != nil {
		m.ResolvedByPseudonymID = o.ResolvedByPseudonymID()
	}
	if o.ResolutionNotes != nil {
		m.ResolutionNotes = o.ResolutionNotes()
	}
	if o.ResolvedAt != nil {
		m.ResolvedAt = o.ResolvedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ReportSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ReportTemplate.CreateMany
func (o ReportTemplate) BuildMany(number int) models.ReportSlice {
	m := make(models.ReportSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableReport(m *models.ReportSetter) {
	if m.ReporterPseudonymID == nil {
		val := random_string(nil, "64")
		m.ReporterPseudonymID = &val
	}
	if m.ContentType == nil {
		val := random_string(nil, "10")
		m.ContentType = &val
	}
	if m.ReportReason == nil {
		val := random_string(nil, "100")
		m.ReportReason = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Report
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ReportTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Report) (context.Context, error) {
	var err error

	isReportedPseudonymPseudonymDone, _ := reportRelReportedPseudonymPseudonymCtx.Value(ctx)
	if !isReportedPseudonymPseudonymDone && o.r.ReportedPseudonymPseudonym != nil {
		ctx = reportRelReportedPseudonymPseudonymCtx.WithValue(ctx, true)
		var rel0 *models.Pseudonym
		ctx, rel0, err = o.r.ReportedPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachReportedPseudonymPseudonym(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}

	}

	isResolvedByPseudonymPseudonymDone, _ := reportRelResolvedByPseudonymPseudonymCtx.Value(ctx)
	if !isResolvedByPseudonymPseudonymDone && o.r.ResolvedByPseudonymPseudonym != nil {
		ctx = reportRelResolvedByPseudonymPseudonymCtx.WithValue(ctx, true)
		var rel2 *models.Pseudonym
		ctx, rel2, err = o.r.ResolvedByPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachResolvedByPseudonymPseudonym(ctx, exec, rel2)
		if err != nil {
			return ctx, err
		}

	}

	isResolvedByUserUserDone, _ := reportRelResolvedByUserUserCtx.Value(ctx)
	if !isResolvedByUserUserDone && o.r.ResolvedByUserUser != nil {
		ctx = reportRelResolvedByUserUserCtx.WithValue(ctx, true)
		var rel3 *models.User
		ctx, rel3, err = o.r.ResolvedByUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachResolvedByUserUser(ctx, exec, rel3)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a report and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ReportTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Report, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a report and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ReportTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Report {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a report and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ReportTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Report {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a report and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ReportTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Report, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableReport(opt)

	if o.r.ReporterPseudonymPseudonym == nil {
		ReportMods.WithNewReporterPseudonymPseudonym().Apply(ctx, o)
	}

	rel1, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.ReporterPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.ReporterPseudonymID = &rel1.PseudonymID

	m, err := models.Reports.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = reportCtx.WithValue(ctx, m)

	m.R.ReporterPseudonymPseudonym = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple reports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ReportTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ReportSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple reports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ReportTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ReportSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple reports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ReportTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ReportSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple reports and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ReportTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ReportSlice, error) {
	var err error
	m := make(models.ReportSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Report has methods that act as mods for the ReportTemplate
var ReportMods reportMods

type reportMods struct{}

func (m reportMods) RandomizeAllColumns(f *faker.Faker) ReportMod {
	return ReportModSlice{
		ReportMods.RandomReportID(f),
		ReportMods.RandomReporterPseudonymID(f),
		ReportMods.RandomContentType(f),
		ReportMods.RandomContentID(f),
		ReportMods.RandomReportedPseudonymID(f),
		ReportMods.RandomReportReason(f),
		ReportMods.RandomReportDetails(f),
		ReportMods.RandomCreatedAt(f),
		ReportMods.RandomStatus(f),
		ReportMods.RandomResolvedByUserID(f),
		ReportMods.RandomResolvedByPseudonymID(f),
		ReportMods.RandomResolutionNotes(f),
		ReportMods.RandomResolvedAt(f),
	}
}

// Set the model columns to this value
func (m reportMods) ReportID(val int64) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m reportMods) ReportIDFunc(f func() int64) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportID = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetReportID() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m reportMods) RandomReportID(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m reportMods) ReporterPseudonymID(val string) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReporterPseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m reportMods) ReporterPseudonymIDFunc(f func() string) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReporterPseudonymID = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetReporterPseudonymID() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReporterPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m reportMods) RandomReporterPseudonymID(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReporterPseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m reportMods) ContentType(val string) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentType = func() string { return val }
	})
}

// Set the Column from the function
func (m reportMods) ContentTypeFunc(f func() string) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentType = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetContentType() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m reportMods) RandomContentType(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentType = func() string {
			return random_string(f, "10")
		}
	})
}

// Set the model columns to this value
func (m reportMods) ContentID(val sql.Null[int64]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m reportMods) ContentIDFunc(f func() sql.Null[int64]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentID = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetContentID() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomContentID(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomContentIDNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ContentID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) ReportedPseudonymID(val sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportedPseudonymID = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m reportMods) ReportedPseudonymIDFunc(f func() sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportedPseudonymID = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetReportedPseudonymID() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportedPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomReportedPseudonymID(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportedPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomReportedPseudonymIDNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportedPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) ReportReason(val string) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportReason = func() string { return val }
	})
}

// Set the Column from the function
func (m reportMods) ReportReasonFunc(f func() string) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportReason = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetReportReason() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportReason = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m reportMods) RandomReportReason(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportReason = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m reportMods) ReportDetails(val sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportDetails = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m reportMods) ReportDetailsFunc(f func() sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportDetails = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetReportDetails() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportDetails = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomReportDetails(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportDetails = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomReportDetailsNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ReportDetails = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) CreatedAt(val sql.Null[time.Time]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m reportMods) CreatedAtFunc(f func() sql.Null[time.Time]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetCreatedAt() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomCreatedAt(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomCreatedAtNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) Status(val sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.Status = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m reportMods) StatusFunc(f func() sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetStatus() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomStatus(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.Status = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomStatusNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.Status = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) ResolvedByUserID(val sql.Null[int64]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByUserID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m reportMods) ResolvedByUserIDFunc(f func() sql.Null[int64]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByUserID = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetResolvedByUserID() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomResolvedByUserID(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomResolvedByUserIDNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) ResolvedByPseudonymID(val sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByPseudonymID = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m reportMods) ResolvedByPseudonymIDFunc(f func() sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByPseudonymID = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetResolvedByPseudonymID() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomResolvedByPseudonymID(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomResolvedByPseudonymIDNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedByPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) ResolutionNotes(val sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolutionNotes = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m reportMods) ResolutionNotesFunc(f func() sql.Null[string]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolutionNotes = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetResolutionNotes() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolutionNotes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomResolutionNotes(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolutionNotes = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomResolutionNotesNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolutionNotes = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m reportMods) ResolvedAt(val sql.Null[time.Time]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m reportMods) ResolvedAtFunc(f func() sql.Null[time.Time]) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedAt = f
	})
}

// Clear any values for the column
func (m reportMods) UnsetResolvedAt() ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m reportMods) RandomResolvedAt(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m reportMods) RandomResolvedAtNotNull(f *faker.Faker) ReportMod {
	return ReportModFunc(func(_ context.Context, o *ReportTemplate) {
		o.ResolvedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m reportMods) WithParentsCascading() ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		if isDone, _ := reportWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = reportWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithReportedPseudonymPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithReporterPseudonymPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithResolvedByPseudonymPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithResolvedByUserUser(related).Apply(ctx, o)
		}
	})
}

func (m reportMods) WithReportedPseudonymPseudonym(rel *PseudonymTemplate) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ReportedPseudonymPseudonym = &reportRReportedPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m reportMods) WithNewReportedPseudonymPseudonym(mods ...PseudonymMod) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithReportedPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m reportMods) WithoutReportedPseudonymPseudonym() ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ReportedPseudonymPseudonym = nil
	})
}

func (m reportMods) WithReporterPseudonymPseudonym(rel *PseudonymTemplate) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ReporterPseudonymPseudonym = &reportRReporterPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m reportMods) WithNewReporterPseudonymPseudonym(mods ...PseudonymMod) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithReporterPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m reportMods) WithoutReporterPseudonymPseudonym() ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ReporterPseudonymPseudonym = nil
	})
}

func (m reportMods) WithResolvedByPseudonymPseudonym(rel *PseudonymTemplate) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ResolvedByPseudonymPseudonym = &reportRResolvedByPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m reportMods) WithNewResolvedByPseudonymPseudonym(mods ...PseudonymMod) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithResolvedByPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m reportMods) WithoutResolvedByPseudonymPseudonym() ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ResolvedByPseudonymPseudonym = nil
	})
}

func (m reportMods) WithResolvedByUserUser(rel *UserTemplate) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ResolvedByUserUser = &reportRResolvedByUserUserR{
			o: rel,
		}
	})
}

func (m reportMods) WithNewResolvedByUserUser(mods ...UserMod) ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithResolvedByUserUser(related).Apply(ctx, o)
	})
}

func (m reportMods) WithoutResolvedByUserUser() ReportMod {
	return ReportModFunc(func(ctx context.Context, o *ReportTemplate) {
		o.r.ResolvedByUserUser = nil
	})
}
