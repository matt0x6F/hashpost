// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type IdentityMappingMod interface {
	Apply(context.Context, *IdentityMappingTemplate)
}

type IdentityMappingModFunc func(context.Context, *IdentityMappingTemplate)

func (f IdentityMappingModFunc) Apply(ctx context.Context, n *IdentityMappingTemplate) {
	f(ctx, n)
}

type IdentityMappingModSlice []IdentityMappingMod

func (mods IdentityMappingModSlice) Apply(ctx context.Context, n *IdentityMappingTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// IdentityMappingTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type IdentityMappingTemplate struct {
	MappingID                 func() uuid.UUID
	Fingerprint               func() string
	PseudonymID               func() string
	EncryptedRealIdentity     func() []byte
	EncryptedPseudonymMapping func() []byte
	KeyVersion                func() int32
	CreatedAt                 func() sql.Null[time.Time]
	UpdatedAt                 func() sql.Null[time.Time]
	IsActive                  func() sql.Null[bool]
	UserID                    func() int64
	KeyScope                  func() string

	r identityMappingR
	f *Factory
}

type identityMappingR struct {
	User *identityMappingRUserR
}

type identityMappingRUserR struct {
	o *UserTemplate
}

// Apply mods to the IdentityMappingTemplate
func (o *IdentityMappingTemplate) Apply(ctx context.Context, mods ...IdentityMappingMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.IdentityMapping
// according to the relationships in the template. Nothing is inserted into the db
func (t IdentityMappingTemplate) setModelRels(o *models.IdentityMapping) {
	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.IdentityMappings = append(rel.R.IdentityMappings, o)
		o.UserID = rel.UserID // h2
		o.R.User = rel
	}
}

// BuildSetter returns an *models.IdentityMappingSetter
// this does nothing with the relationship templates
func (o IdentityMappingTemplate) BuildSetter() *models.IdentityMappingSetter {
	m := &models.IdentityMappingSetter{}

	if o.MappingID != nil {
		val := o.MappingID()
		m.MappingID = &val
	}
	if o.Fingerprint != nil {
		val := o.Fingerprint()
		m.Fingerprint = &val
	}
	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}
	if o.EncryptedRealIdentity != nil {
		val := o.EncryptedRealIdentity()
		m.EncryptedRealIdentity = &val
	}
	if o.EncryptedPseudonymMapping != nil {
		val := o.EncryptedPseudonymMapping()
		m.EncryptedPseudonymMapping = &val
	}
	if o.KeyVersion != nil {
		val := o.KeyVersion()
		m.KeyVersion = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}
	if o.IsActive != nil {
		val := o.IsActive()
		m.IsActive = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}
	if o.KeyScope != nil {
		val := o.KeyScope()
		m.KeyScope = &val
	}

	return m
}

// BuildManySetter returns an []*models.IdentityMappingSetter
// this does nothing with the relationship templates
func (o IdentityMappingTemplate) BuildManySetter(number int) []*models.IdentityMappingSetter {
	m := make([]*models.IdentityMappingSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.IdentityMapping
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IdentityMappingTemplate.Create
func (o IdentityMappingTemplate) Build() *models.IdentityMapping {
	m := &models.IdentityMapping{}

	if o.MappingID != nil {
		m.MappingID = o.MappingID()
	}
	if o.Fingerprint != nil {
		m.Fingerprint = o.Fingerprint()
	}
	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}
	if o.EncryptedRealIdentity != nil {
		m.EncryptedRealIdentity = o.EncryptedRealIdentity()
	}
	if o.EncryptedPseudonymMapping != nil {
		m.EncryptedPseudonymMapping = o.EncryptedPseudonymMapping()
	}
	if o.KeyVersion != nil {
		m.KeyVersion = o.KeyVersion()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.IsActive != nil {
		m.IsActive = o.IsActive()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.KeyScope != nil {
		m.KeyScope = o.KeyScope()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.IdentityMappingSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IdentityMappingTemplate.CreateMany
func (o IdentityMappingTemplate) BuildMany(number int) models.IdentityMappingSlice {
	m := make(models.IdentityMappingSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableIdentityMapping(m *models.IdentityMappingSetter) {
	if m.Fingerprint == nil {
		val := random_string(nil, "32")
		m.Fingerprint = &val
	}
	if m.PseudonymID == nil {
		val := random_string(nil, "64")
		m.PseudonymID = &val
	}
	if m.EncryptedRealIdentity == nil {
		val := random___byte(nil)
		m.EncryptedRealIdentity = &val
	}
	if m.EncryptedPseudonymMapping == nil {
		val := random___byte(nil)
		m.EncryptedPseudonymMapping = &val
	}
	if m.UserID == nil {
		val := random_int64(nil)
		m.UserID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.IdentityMapping
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *IdentityMappingTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.IdentityMapping) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a identityMapping and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *IdentityMappingTemplate) Create(ctx context.Context, exec bob.Executor) (*models.IdentityMapping, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a identityMapping and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *IdentityMappingTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.IdentityMapping {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a identityMapping and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *IdentityMappingTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.IdentityMapping {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a identityMapping and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *IdentityMappingTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.IdentityMapping, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableIdentityMapping(opt)

	if o.r.User == nil {
		IdentityMappingMods.WithNewUser().Apply(ctx, o)
	}

	rel0, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.UserID = &rel0.UserID

	m, err := models.IdentityMappings.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = identityMappingCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple identityMappings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o IdentityMappingTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.IdentityMappingSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple identityMappings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o IdentityMappingTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.IdentityMappingSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple identityMappings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o IdentityMappingTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.IdentityMappingSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple identityMappings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o IdentityMappingTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.IdentityMappingSlice, error) {
	var err error
	m := make(models.IdentityMappingSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// IdentityMapping has methods that act as mods for the IdentityMappingTemplate
var IdentityMappingMods identityMappingMods

type identityMappingMods struct{}

func (m identityMappingMods) RandomizeAllColumns(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModSlice{
		IdentityMappingMods.RandomMappingID(f),
		IdentityMappingMods.RandomFingerprint(f),
		IdentityMappingMods.RandomPseudonymID(f),
		IdentityMappingMods.RandomEncryptedRealIdentity(f),
		IdentityMappingMods.RandomEncryptedPseudonymMapping(f),
		IdentityMappingMods.RandomKeyVersion(f),
		IdentityMappingMods.RandomCreatedAt(f),
		IdentityMappingMods.RandomUpdatedAt(f),
		IdentityMappingMods.RandomIsActive(f),
		IdentityMappingMods.RandomUserID(f),
		IdentityMappingMods.RandomKeyScope(f),
	}
}

// Set the model columns to this value
func (m identityMappingMods) MappingID(val uuid.UUID) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.MappingID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) MappingIDFunc(f func() uuid.UUID) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.MappingID = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetMappingID() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.MappingID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomMappingID(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.MappingID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) Fingerprint(val string) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.Fingerprint = func() string { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) FingerprintFunc(f func() string) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.Fingerprint = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetFingerprint() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.Fingerprint = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomFingerprint(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.Fingerprint = func() string {
			return random_string(f, "32")
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) PseudonymID(val string) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.PseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) PseudonymIDFunc(f func() string) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetPseudonymID() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomPseudonymID(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.PseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) EncryptedRealIdentity(val []byte) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedRealIdentity = func() []byte { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) EncryptedRealIdentityFunc(f func() []byte) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedRealIdentity = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetEncryptedRealIdentity() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedRealIdentity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomEncryptedRealIdentity(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedRealIdentity = func() []byte {
			return random___byte(f)
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) EncryptedPseudonymMapping(val []byte) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedPseudonymMapping = func() []byte { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) EncryptedPseudonymMappingFunc(f func() []byte) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedPseudonymMapping = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetEncryptedPseudonymMapping() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedPseudonymMapping = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomEncryptedPseudonymMapping(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.EncryptedPseudonymMapping = func() []byte {
			return random___byte(f)
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) KeyVersion(val int32) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyVersion = func() int32 { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) KeyVersionFunc(f func() int32) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyVersion = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetKeyVersion() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyVersion = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomKeyVersion(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyVersion = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) CreatedAt(val sql.Null[time.Time]) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) CreatedAtFunc(f func() sql.Null[time.Time]) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetCreatedAt() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m identityMappingMods) RandomCreatedAt(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m identityMappingMods) RandomCreatedAtNotNull(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) UpdatedAt(val sql.Null[time.Time]) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) UpdatedAtFunc(f func() sql.Null[time.Time]) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetUpdatedAt() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m identityMappingMods) RandomUpdatedAt(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m identityMappingMods) RandomUpdatedAtNotNull(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) IsActive(val sql.Null[bool]) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.IsActive = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) IsActiveFunc(f func() sql.Null[bool]) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.IsActive = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetIsActive() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.IsActive = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m identityMappingMods) RandomIsActive(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.IsActive = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m identityMappingMods) RandomIsActiveNotNull(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.IsActive = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) UserID(val int64) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) UserIDFunc(f func() int64) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetUserID() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomUserID(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m identityMappingMods) KeyScope(val string) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyScope = func() string { return val }
	})
}

// Set the Column from the function
func (m identityMappingMods) KeyScopeFunc(f func() string) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyScope = f
	})
}

// Clear any values for the column
func (m identityMappingMods) UnsetKeyScope() IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyScope = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m identityMappingMods) RandomKeyScope(f *faker.Faker) IdentityMappingMod {
	return IdentityMappingModFunc(func(_ context.Context, o *IdentityMappingTemplate) {
		o.KeyScope = func() string {
			return random_string(f, "50")
		}
	})
}

func (m identityMappingMods) WithParentsCascading() IdentityMappingMod {
	return IdentityMappingModFunc(func(ctx context.Context, o *IdentityMappingTemplate) {
		if isDone, _ := identityMappingWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = identityMappingWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m identityMappingMods) WithUser(rel *UserTemplate) IdentityMappingMod {
	return IdentityMappingModFunc(func(ctx context.Context, o *IdentityMappingTemplate) {
		o.r.User = &identityMappingRUserR{
			o: rel,
		}
	})
}

func (m identityMappingMods) WithNewUser(mods ...UserMod) IdentityMappingMod {
	return IdentityMappingModFunc(func(ctx context.Context, o *IdentityMappingTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m identityMappingMods) WithoutUser() IdentityMappingMod {
	return IdentityMappingModFunc(func(ctx context.Context, o *IdentityMappingTemplate) {
		o.r.User = nil
	})
}
