// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type VoteMod interface {
	Apply(context.Context, *VoteTemplate)
}

type VoteModFunc func(context.Context, *VoteTemplate)

func (f VoteModFunc) Apply(ctx context.Context, n *VoteTemplate) {
	f(ctx, n)
}

type VoteModSlice []VoteMod

func (mods VoteModSlice) Apply(ctx context.Context, n *VoteTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// VoteTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type VoteTemplate struct {
	VoteID      func() int64
	PseudonymID func() string
	ContentType func() string
	ContentID   func() int64
	VoteValue   func() int32
	CreatedAt   func() sql.Null[time.Time]
	UpdatedAt   func() sql.Null[time.Time]

	r voteR
	f *Factory
}

type voteR struct {
	Pseudonym *voteRPseudonymR
}

type voteRPseudonymR struct {
	o *PseudonymTemplate
}

// Apply mods to the VoteTemplate
func (o *VoteTemplate) Apply(ctx context.Context, mods ...VoteMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Vote
// according to the relationships in the template. Nothing is inserted into the db
func (t VoteTemplate) setModelRels(o *models.Vote) {
	if t.r.Pseudonym != nil {
		rel := t.r.Pseudonym.o.Build()
		rel.R.Votes = append(rel.R.Votes, o)
		o.PseudonymID = rel.PseudonymID // h2
		o.R.Pseudonym = rel
	}
}

// BuildSetter returns an *models.VoteSetter
// this does nothing with the relationship templates
func (o VoteTemplate) BuildSetter() *models.VoteSetter {
	m := &models.VoteSetter{}

	if o.VoteID != nil {
		val := o.VoteID()
		m.VoteID = &val
	}
	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}
	if o.ContentType != nil {
		val := o.ContentType()
		m.ContentType = &val
	}
	if o.ContentID != nil {
		val := o.ContentID()
		m.ContentID = &val
	}
	if o.VoteValue != nil {
		val := o.VoteValue()
		m.VoteValue = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.VoteSetter
// this does nothing with the relationship templates
func (o VoteTemplate) BuildManySetter(number int) []*models.VoteSetter {
	m := make([]*models.VoteSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Vote
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use VoteTemplate.Create
func (o VoteTemplate) Build() *models.Vote {
	m := &models.Vote{}

	if o.VoteID != nil {
		m.VoteID = o.VoteID()
	}
	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}
	if o.ContentType != nil {
		m.ContentType = o.ContentType()
	}
	if o.ContentID != nil {
		m.ContentID = o.ContentID()
	}
	if o.VoteValue != nil {
		m.VoteValue = o.VoteValue()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.VoteSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use VoteTemplate.CreateMany
func (o VoteTemplate) BuildMany(number int) models.VoteSlice {
	m := make(models.VoteSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableVote(m *models.VoteSetter) {
	if m.PseudonymID == nil {
		val := random_string(nil, "64")
		m.PseudonymID = &val
	}
	if m.ContentType == nil {
		val := random_string(nil, "10")
		m.ContentType = &val
	}
	if m.ContentID == nil {
		val := random_int64(nil)
		m.ContentID = &val
	}
	if m.VoteValue == nil {
		val := random_int32(nil)
		m.VoteValue = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Vote
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *VoteTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Vote) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a vote and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *VoteTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Vote, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a vote and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *VoteTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Vote {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a vote and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *VoteTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Vote {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a vote and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *VoteTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Vote, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableVote(opt)

	if o.r.Pseudonym == nil {
		VoteMods.WithNewPseudonym().Apply(ctx, o)
	}

	rel0, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.Pseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PseudonymID = &rel0.PseudonymID

	m, err := models.Votes.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = voteCtx.WithValue(ctx, m)

	m.R.Pseudonym = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple votes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o VoteTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.VoteSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple votes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o VoteTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.VoteSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple votes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o VoteTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.VoteSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple votes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o VoteTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.VoteSlice, error) {
	var err error
	m := make(models.VoteSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Vote has methods that act as mods for the VoteTemplate
var VoteMods voteMods

type voteMods struct{}

func (m voteMods) RandomizeAllColumns(f *faker.Faker) VoteMod {
	return VoteModSlice{
		VoteMods.RandomVoteID(f),
		VoteMods.RandomPseudonymID(f),
		VoteMods.RandomContentType(f),
		VoteMods.RandomContentID(f),
		VoteMods.RandomVoteValue(f),
		VoteMods.RandomCreatedAt(f),
		VoteMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m voteMods) VoteID(val int64) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m voteMods) VoteIDFunc(f func() int64) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteID = f
	})
}

// Clear any values for the column
func (m voteMods) UnsetVoteID() VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m voteMods) RandomVoteID(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m voteMods) PseudonymID(val string) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.PseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m voteMods) PseudonymIDFunc(f func() string) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m voteMods) UnsetPseudonymID() VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m voteMods) RandomPseudonymID(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.PseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m voteMods) ContentType(val string) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentType = func() string { return val }
	})
}

// Set the Column from the function
func (m voteMods) ContentTypeFunc(f func() string) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentType = f
	})
}

// Clear any values for the column
func (m voteMods) UnsetContentType() VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m voteMods) RandomContentType(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentType = func() string {
			return random_string(f, "10")
		}
	})
}

// Set the model columns to this value
func (m voteMods) ContentID(val int64) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m voteMods) ContentIDFunc(f func() int64) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentID = f
	})
}

// Clear any values for the column
func (m voteMods) UnsetContentID() VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m voteMods) RandomContentID(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.ContentID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m voteMods) VoteValue(val int32) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteValue = func() int32 { return val }
	})
}

// Set the Column from the function
func (m voteMods) VoteValueFunc(f func() int32) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteValue = f
	})
}

// Clear any values for the column
func (m voteMods) UnsetVoteValue() VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteValue = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m voteMods) RandomVoteValue(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.VoteValue = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m voteMods) CreatedAt(val sql.Null[time.Time]) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m voteMods) CreatedAtFunc(f func() sql.Null[time.Time]) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m voteMods) UnsetCreatedAt() VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m voteMods) RandomCreatedAt(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m voteMods) RandomCreatedAtNotNull(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m voteMods) UpdatedAt(val sql.Null[time.Time]) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m voteMods) UpdatedAtFunc(f func() sql.Null[time.Time]) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m voteMods) UnsetUpdatedAt() VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m voteMods) RandomUpdatedAt(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m voteMods) RandomUpdatedAtNotNull(f *faker.Faker) VoteMod {
	return VoteModFunc(func(_ context.Context, o *VoteTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m voteMods) WithParentsCascading() VoteMod {
	return VoteModFunc(func(ctx context.Context, o *VoteTemplate) {
		if isDone, _ := voteWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = voteWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithPseudonym(related).Apply(ctx, o)
		}
	})
}

func (m voteMods) WithPseudonym(rel *PseudonymTemplate) VoteMod {
	return VoteModFunc(func(ctx context.Context, o *VoteTemplate) {
		o.r.Pseudonym = &voteRPseudonymR{
			o: rel,
		}
	})
}

func (m voteMods) WithNewPseudonym(mods ...PseudonymMod) VoteMod {
	return VoteModFunc(func(ctx context.Context, o *VoteTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithPseudonym(related).Apply(ctx, o)
	})
}

func (m voteMods) WithoutPseudonym() VoteMod {
	return VoteModFunc(func(ctx context.Context, o *VoteTemplate) {
		o.r.Pseudonym = nil
	})
}
