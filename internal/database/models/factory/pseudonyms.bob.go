// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type PseudonymMod interface {
	Apply(context.Context, *PseudonymTemplate)
}

type PseudonymModFunc func(context.Context, *PseudonymTemplate)

func (f PseudonymModFunc) Apply(ctx context.Context, n *PseudonymTemplate) {
	f(ctx, n)
}

type PseudonymModSlice []PseudonymMod

func (mods PseudonymModSlice) Apply(ctx context.Context, n *PseudonymTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// PseudonymTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PseudonymTemplate struct {
	PseudonymID         func() string
	UserID              func() int64
	DisplayName         func() string
	KarmaScore          func() sql.Null[int32]
	CreatedAt           func() sql.Null[time.Time]
	LastActiveAt        func() sql.Null[time.Time]
	IsActive            func() sql.Null[bool]
	Bio                 func() sql.Null[string]
	AvatarURL           func() sql.Null[string]
	WebsiteURL          func() sql.Null[string]
	ShowKarma           func() sql.Null[bool]
	AllowDirectMessages func() sql.Null[bool]

	r pseudonymR
	f *Factory
}

type pseudonymR struct {
	APIKeys                             []*pseudonymRAPIKeysR
	Comments                            []*pseudonymRCommentsR
	RemovedByPseudonymComments          []*pseudonymRRemovedByPseudonymCommentsR
	CorrelationAudits                   []*pseudonymRCorrelationAuditsR
	RecipientPseudonymDirectMessages    []*pseudonymRRecipientPseudonymDirectMessagesR
	SenderPseudonymDirectMessages       []*pseudonymRSenderPseudonymDirectMessagesR
	ModeratorPseudonymModerationActions []*pseudonymRModeratorPseudonymModerationActionsR
	PollVotes                           []*pseudonymRPollVotesR
	Posts                               []*pseudonymRPostsR
	RemovedByPseudonymPosts             []*pseudonymRRemovedByPseudonymPostsR
	User                                *pseudonymRUserR
	ReportedPseudonymReports            []*pseudonymRReportedPseudonymReportsR
	ReporterPseudonymReports            []*pseudonymRReporterPseudonymReportsR
	ResolvedByPseudonymReports          []*pseudonymRResolvedByPseudonymReportsR
	SubforumModerators                  []*pseudonymRSubforumModeratorsR
	SubforumSubscriptions               []*pseudonymRSubforumSubscriptionsR
	BannedByPseudonymUserBans           []*pseudonymRBannedByPseudonymUserBansR
	BlockedPseudonymUserBlocks          []*pseudonymRBlockedPseudonymUserBlocksR
	BlockerPseudonymUserBlocks          []*pseudonymRBlockerPseudonymUserBlocksR
	Votes                               []*pseudonymRVotesR
}

type pseudonymRAPIKeysR struct {
	number int
	o      *APIKeyTemplate
}
type pseudonymRCommentsR struct {
	number int
	o      *CommentTemplate
}
type pseudonymRRemovedByPseudonymCommentsR struct {
	number int
	o      *CommentTemplate
}
type pseudonymRCorrelationAuditsR struct {
	number int
	o      *CorrelationAuditTemplate
}
type pseudonymRRecipientPseudonymDirectMessagesR struct {
	number int
	o      *DirectMessageTemplate
}
type pseudonymRSenderPseudonymDirectMessagesR struct {
	number int
	o      *DirectMessageTemplate
}
type pseudonymRModeratorPseudonymModerationActionsR struct {
	number int
	o      *ModerationActionTemplate
}
type pseudonymRPollVotesR struct {
	number int
	o      *PollVoteTemplate
}
type pseudonymRPostsR struct {
	number int
	o      *PostTemplate
}
type pseudonymRRemovedByPseudonymPostsR struct {
	number int
	o      *PostTemplate
}
type pseudonymRUserR struct {
	o *UserTemplate
}
type pseudonymRReportedPseudonymReportsR struct {
	number int
	o      *ReportTemplate
}
type pseudonymRReporterPseudonymReportsR struct {
	number int
	o      *ReportTemplate
}
type pseudonymRResolvedByPseudonymReportsR struct {
	number int
	o      *ReportTemplate
}
type pseudonymRSubforumModeratorsR struct {
	number int
	o      *SubforumModeratorTemplate
}
type pseudonymRSubforumSubscriptionsR struct {
	number int
	o      *SubforumSubscriptionTemplate
}
type pseudonymRBannedByPseudonymUserBansR struct {
	number int
	o      *UserBanTemplate
}
type pseudonymRBlockedPseudonymUserBlocksR struct {
	number int
	o      *UserBlockTemplate
}
type pseudonymRBlockerPseudonymUserBlocksR struct {
	number int
	o      *UserBlockTemplate
}
type pseudonymRVotesR struct {
	number int
	o      *VoteTemplate
}

// Apply mods to the PseudonymTemplate
func (o *PseudonymTemplate) Apply(ctx context.Context, mods ...PseudonymMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Pseudonym
// according to the relationships in the template. Nothing is inserted into the db
func (t PseudonymTemplate) setModelRels(o *models.Pseudonym) {
	if t.r.APIKeys != nil {
		rel := models.APIKeySlice{}
		for _, r := range t.r.APIKeys {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = sql.Null[string]{V: o.PseudonymID, Valid: true} // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.APIKeys = rel
	}

	if t.r.Comments != nil {
		rel := models.CommentSlice{}
		for _, r := range t.r.Comments {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = o.PseudonymID // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.Comments = rel
	}

	if t.r.RemovedByPseudonymComments != nil {
		rel := models.CommentSlice{}
		for _, r := range t.r.RemovedByPseudonymComments {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.RemovedByPseudonymID = sql.Null[string]{V: o.PseudonymID, Valid: true} // h2
				rel.R.RemovedByPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.RemovedByPseudonymComments = rel
	}

	if t.r.CorrelationAudits != nil {
		rel := models.CorrelationAuditSlice{}
		for _, r := range t.r.CorrelationAudits {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = o.PseudonymID // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.CorrelationAudits = rel
	}

	if t.r.RecipientPseudonymDirectMessages != nil {
		rel := models.DirectMessageSlice{}
		for _, r := range t.r.RecipientPseudonymDirectMessages {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.RecipientPseudonymID = o.PseudonymID // h2
				rel.R.RecipientPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.RecipientPseudonymDirectMessages = rel
	}

	if t.r.SenderPseudonymDirectMessages != nil {
		rel := models.DirectMessageSlice{}
		for _, r := range t.r.SenderPseudonymDirectMessages {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.SenderPseudonymID = o.PseudonymID // h2
				rel.R.SenderPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.SenderPseudonymDirectMessages = rel
	}

	if t.r.ModeratorPseudonymModerationActions != nil {
		rel := models.ModerationActionSlice{}
		for _, r := range t.r.ModeratorPseudonymModerationActions {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ModeratorPseudonymID = o.PseudonymID // h2
				rel.R.ModeratorPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.ModeratorPseudonymModerationActions = rel
	}

	if t.r.PollVotes != nil {
		rel := models.PollVoteSlice{}
		for _, r := range t.r.PollVotes {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = o.PseudonymID // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.PollVotes = rel
	}

	if t.r.Posts != nil {
		rel := models.PostSlice{}
		for _, r := range t.r.Posts {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = o.PseudonymID // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.Posts = rel
	}

	if t.r.RemovedByPseudonymPosts != nil {
		rel := models.PostSlice{}
		for _, r := range t.r.RemovedByPseudonymPosts {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.RemovedByPseudonymID = sql.Null[string]{V: o.PseudonymID, Valid: true} // h2
				rel.R.RemovedByPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.RemovedByPseudonymPosts = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.Pseudonyms = append(rel.R.Pseudonyms, o)
		o.UserID = rel.UserID // h2
		o.R.User = rel
	}

	if t.r.ReportedPseudonymReports != nil {
		rel := models.ReportSlice{}
		for _, r := range t.r.ReportedPseudonymReports {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ReportedPseudonymID = sql.Null[string]{V: o.PseudonymID, Valid: true} // h2
				rel.R.ReportedPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.ReportedPseudonymReports = rel
	}

	if t.r.ReporterPseudonymReports != nil {
		rel := models.ReportSlice{}
		for _, r := range t.r.ReporterPseudonymReports {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ReporterPseudonymID = o.PseudonymID // h2
				rel.R.ReporterPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.ReporterPseudonymReports = rel
	}

	if t.r.ResolvedByPseudonymReports != nil {
		rel := models.ReportSlice{}
		for _, r := range t.r.ResolvedByPseudonymReports {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ResolvedByPseudonymID = sql.Null[string]{V: o.PseudonymID, Valid: true} // h2
				rel.R.ResolvedByPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.ResolvedByPseudonymReports = rel
	}

	if t.r.SubforumModerators != nil {
		rel := models.SubforumModeratorSlice{}
		for _, r := range t.r.SubforumModerators {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = o.PseudonymID // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.SubforumModerators = rel
	}

	if t.r.SubforumSubscriptions != nil {
		rel := models.SubforumSubscriptionSlice{}
		for _, r := range t.r.SubforumSubscriptions {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = o.PseudonymID // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.SubforumSubscriptions = rel
	}

	if t.r.BannedByPseudonymUserBans != nil {
		rel := models.UserBanSlice{}
		for _, r := range t.r.BannedByPseudonymUserBans {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.BannedByPseudonymID = o.PseudonymID // h2
				rel.R.BannedByPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.BannedByPseudonymUserBans = rel
	}

	if t.r.BlockedPseudonymUserBlocks != nil {
		rel := models.UserBlockSlice{}
		for _, r := range t.r.BlockedPseudonymUserBlocks {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.BlockedPseudonymID = sql.Null[string]{V: o.PseudonymID, Valid: true} // h2
				rel.R.BlockedPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.BlockedPseudonymUserBlocks = rel
	}

	if t.r.BlockerPseudonymUserBlocks != nil {
		rel := models.UserBlockSlice{}
		for _, r := range t.r.BlockerPseudonymUserBlocks {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.BlockerPseudonymID = o.PseudonymID // h2
				rel.R.BlockerPseudonymPseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.BlockerPseudonymUserBlocks = rel
	}

	if t.r.Votes != nil {
		rel := models.VoteSlice{}
		for _, r := range t.r.Votes {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PseudonymID = o.PseudonymID // h2
				rel.R.Pseudonym = o
			}
			rel = append(rel, related...)
		}
		o.R.Votes = rel
	}
}

// BuildSetter returns an *models.PseudonymSetter
// this does nothing with the relationship templates
func (o PseudonymTemplate) BuildSetter() *models.PseudonymSetter {
	m := &models.PseudonymSetter{}

	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}
	if o.DisplayName != nil {
		val := o.DisplayName()
		m.DisplayName = &val
	}
	if o.KarmaScore != nil {
		val := o.KarmaScore()
		m.KarmaScore = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.LastActiveAt != nil {
		val := o.LastActiveAt()
		m.LastActiveAt = &val
	}
	if o.IsActive != nil {
		val := o.IsActive()
		m.IsActive = &val
	}
	if o.Bio != nil {
		val := o.Bio()
		m.Bio = &val
	}
	if o.AvatarURL != nil {
		val := o.AvatarURL()
		m.AvatarURL = &val
	}
	if o.WebsiteURL != nil {
		val := o.WebsiteURL()
		m.WebsiteURL = &val
	}
	if o.ShowKarma != nil {
		val := o.ShowKarma()
		m.ShowKarma = &val
	}
	if o.AllowDirectMessages != nil {
		val := o.AllowDirectMessages()
		m.AllowDirectMessages = &val
	}

	return m
}

// BuildManySetter returns an []*models.PseudonymSetter
// this does nothing with the relationship templates
func (o PseudonymTemplate) BuildManySetter(number int) []*models.PseudonymSetter {
	m := make([]*models.PseudonymSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Pseudonym
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PseudonymTemplate.Create
func (o PseudonymTemplate) Build() *models.Pseudonym {
	m := &models.Pseudonym{}

	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.DisplayName != nil {
		m.DisplayName = o.DisplayName()
	}
	if o.KarmaScore != nil {
		m.KarmaScore = o.KarmaScore()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.LastActiveAt != nil {
		m.LastActiveAt = o.LastActiveAt()
	}
	if o.IsActive != nil {
		m.IsActive = o.IsActive()
	}
	if o.Bio != nil {
		m.Bio = o.Bio()
	}
	if o.AvatarURL != nil {
		m.AvatarURL = o.AvatarURL()
	}
	if o.WebsiteURL != nil {
		m.WebsiteURL = o.WebsiteURL()
	}
	if o.ShowKarma != nil {
		m.ShowKarma = o.ShowKarma()
	}
	if o.AllowDirectMessages != nil {
		m.AllowDirectMessages = o.AllowDirectMessages()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PseudonymSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PseudonymTemplate.CreateMany
func (o PseudonymTemplate) BuildMany(number int) models.PseudonymSlice {
	m := make(models.PseudonymSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePseudonym(m *models.PseudonymSetter) {
	if m.PseudonymID == nil {
		val := random_string(nil, "64")
		m.PseudonymID = &val
	}
	if m.UserID == nil {
		val := random_int64(nil)
		m.UserID = &val
	}
	if m.DisplayName == nil {
		val := random_string(nil, "50")
		m.DisplayName = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Pseudonym
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PseudonymTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Pseudonym) (context.Context, error) {
	var err error

	isAPIKeysDone, _ := pseudonymRelAPIKeysCtx.Value(ctx)
	if !isAPIKeysDone && o.r.APIKeys != nil {
		ctx = pseudonymRelAPIKeysCtx.WithValue(ctx, true)
		for _, r := range o.r.APIKeys {
			var rel0 models.APIKeySlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachAPIKeys(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isCommentsDone, _ := pseudonymRelCommentsCtx.Value(ctx)
	if !isCommentsDone && o.r.Comments != nil {
		ctx = pseudonymRelCommentsCtx.WithValue(ctx, true)
		for _, r := range o.r.Comments {
			var rel1 models.CommentSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachComments(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isRemovedByPseudonymCommentsDone, _ := pseudonymRelRemovedByPseudonymCommentsCtx.Value(ctx)
	if !isRemovedByPseudonymCommentsDone && o.r.RemovedByPseudonymComments != nil {
		ctx = pseudonymRelRemovedByPseudonymCommentsCtx.WithValue(ctx, true)
		for _, r := range o.r.RemovedByPseudonymComments {
			var rel2 models.CommentSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachRemovedByPseudonymComments(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isCorrelationAuditsDone, _ := pseudonymRelCorrelationAuditsCtx.Value(ctx)
	if !isCorrelationAuditsDone && o.r.CorrelationAudits != nil {
		ctx = pseudonymRelCorrelationAuditsCtx.WithValue(ctx, true)
		for _, r := range o.r.CorrelationAudits {
			var rel3 models.CorrelationAuditSlice
			ctx, rel3, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachCorrelationAudits(ctx, exec, rel3...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isRecipientPseudonymDirectMessagesDone, _ := pseudonymRelRecipientPseudonymDirectMessagesCtx.Value(ctx)
	if !isRecipientPseudonymDirectMessagesDone && o.r.RecipientPseudonymDirectMessages != nil {
		ctx = pseudonymRelRecipientPseudonymDirectMessagesCtx.WithValue(ctx, true)
		for _, r := range o.r.RecipientPseudonymDirectMessages {
			var rel4 models.DirectMessageSlice
			ctx, rel4, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachRecipientPseudonymDirectMessages(ctx, exec, rel4...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isSenderPseudonymDirectMessagesDone, _ := pseudonymRelSenderPseudonymDirectMessagesCtx.Value(ctx)
	if !isSenderPseudonymDirectMessagesDone && o.r.SenderPseudonymDirectMessages != nil {
		ctx = pseudonymRelSenderPseudonymDirectMessagesCtx.WithValue(ctx, true)
		for _, r := range o.r.SenderPseudonymDirectMessages {
			var rel5 models.DirectMessageSlice
			ctx, rel5, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachSenderPseudonymDirectMessages(ctx, exec, rel5...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isModeratorPseudonymModerationActionsDone, _ := pseudonymRelModeratorPseudonymModerationActionsCtx.Value(ctx)
	if !isModeratorPseudonymModerationActionsDone && o.r.ModeratorPseudonymModerationActions != nil {
		ctx = pseudonymRelModeratorPseudonymModerationActionsCtx.WithValue(ctx, true)
		for _, r := range o.r.ModeratorPseudonymModerationActions {
			var rel6 models.ModerationActionSlice
			ctx, rel6, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachModeratorPseudonymModerationActions(ctx, exec, rel6...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isPollVotesDone, _ := pseudonymRelPollVotesCtx.Value(ctx)
	if !isPollVotesDone && o.r.PollVotes != nil {
		ctx = pseudonymRelPollVotesCtx.WithValue(ctx, true)
		for _, r := range o.r.PollVotes {
			var rel7 models.PollVoteSlice
			ctx, rel7, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachPollVotes(ctx, exec, rel7...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isPostsDone, _ := pseudonymRelPostsCtx.Value(ctx)
	if !isPostsDone && o.r.Posts != nil {
		ctx = pseudonymRelPostsCtx.WithValue(ctx, true)
		for _, r := range o.r.Posts {
			var rel8 models.PostSlice
			ctx, rel8, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachPosts(ctx, exec, rel8...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isRemovedByPseudonymPostsDone, _ := pseudonymRelRemovedByPseudonymPostsCtx.Value(ctx)
	if !isRemovedByPseudonymPostsDone && o.r.RemovedByPseudonymPosts != nil {
		ctx = pseudonymRelRemovedByPseudonymPostsCtx.WithValue(ctx, true)
		for _, r := range o.r.RemovedByPseudonymPosts {
			var rel9 models.PostSlice
			ctx, rel9, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachRemovedByPseudonymPosts(ctx, exec, rel9...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isReportedPseudonymReportsDone, _ := pseudonymRelReportedPseudonymReportsCtx.Value(ctx)
	if !isReportedPseudonymReportsDone && o.r.ReportedPseudonymReports != nil {
		ctx = pseudonymRelReportedPseudonymReportsCtx.WithValue(ctx, true)
		for _, r := range o.r.ReportedPseudonymReports {
			var rel11 models.ReportSlice
			ctx, rel11, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachReportedPseudonymReports(ctx, exec, rel11...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isReporterPseudonymReportsDone, _ := pseudonymRelReporterPseudonymReportsCtx.Value(ctx)
	if !isReporterPseudonymReportsDone && o.r.ReporterPseudonymReports != nil {
		ctx = pseudonymRelReporterPseudonymReportsCtx.WithValue(ctx, true)
		for _, r := range o.r.ReporterPseudonymReports {
			var rel12 models.ReportSlice
			ctx, rel12, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachReporterPseudonymReports(ctx, exec, rel12...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isResolvedByPseudonymReportsDone, _ := pseudonymRelResolvedByPseudonymReportsCtx.Value(ctx)
	if !isResolvedByPseudonymReportsDone && o.r.ResolvedByPseudonymReports != nil {
		ctx = pseudonymRelResolvedByPseudonymReportsCtx.WithValue(ctx, true)
		for _, r := range o.r.ResolvedByPseudonymReports {
			var rel13 models.ReportSlice
			ctx, rel13, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachResolvedByPseudonymReports(ctx, exec, rel13...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isSubforumModeratorsDone, _ := pseudonymRelSubforumModeratorsCtx.Value(ctx)
	if !isSubforumModeratorsDone && o.r.SubforumModerators != nil {
		ctx = pseudonymRelSubforumModeratorsCtx.WithValue(ctx, true)
		for _, r := range o.r.SubforumModerators {
			var rel14 models.SubforumModeratorSlice
			ctx, rel14, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachSubforumModerators(ctx, exec, rel14...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isSubforumSubscriptionsDone, _ := pseudonymRelSubforumSubscriptionsCtx.Value(ctx)
	if !isSubforumSubscriptionsDone && o.r.SubforumSubscriptions != nil {
		ctx = pseudonymRelSubforumSubscriptionsCtx.WithValue(ctx, true)
		for _, r := range o.r.SubforumSubscriptions {
			var rel15 models.SubforumSubscriptionSlice
			ctx, rel15, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachSubforumSubscriptions(ctx, exec, rel15...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isBannedByPseudonymUserBansDone, _ := pseudonymRelBannedByPseudonymUserBansCtx.Value(ctx)
	if !isBannedByPseudonymUserBansDone && o.r.BannedByPseudonymUserBans != nil {
		ctx = pseudonymRelBannedByPseudonymUserBansCtx.WithValue(ctx, true)
		for _, r := range o.r.BannedByPseudonymUserBans {
			var rel16 models.UserBanSlice
			ctx, rel16, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachBannedByPseudonymUserBans(ctx, exec, rel16...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isBlockedPseudonymUserBlocksDone, _ := pseudonymRelBlockedPseudonymUserBlocksCtx.Value(ctx)
	if !isBlockedPseudonymUserBlocksDone && o.r.BlockedPseudonymUserBlocks != nil {
		ctx = pseudonymRelBlockedPseudonymUserBlocksCtx.WithValue(ctx, true)
		for _, r := range o.r.BlockedPseudonymUserBlocks {
			var rel17 models.UserBlockSlice
			ctx, rel17, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachBlockedPseudonymUserBlocks(ctx, exec, rel17...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isBlockerPseudonymUserBlocksDone, _ := pseudonymRelBlockerPseudonymUserBlocksCtx.Value(ctx)
	if !isBlockerPseudonymUserBlocksDone && o.r.BlockerPseudonymUserBlocks != nil {
		ctx = pseudonymRelBlockerPseudonymUserBlocksCtx.WithValue(ctx, true)
		for _, r := range o.r.BlockerPseudonymUserBlocks {
			var rel18 models.UserBlockSlice
			ctx, rel18, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachBlockerPseudonymUserBlocks(ctx, exec, rel18...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isVotesDone, _ := pseudonymRelVotesCtx.Value(ctx)
	if !isVotesDone && o.r.Votes != nil {
		ctx = pseudonymRelVotesCtx.WithValue(ctx, true)
		for _, r := range o.r.Votes {
			var rel19 models.VoteSlice
			ctx, rel19, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachVotes(ctx, exec, rel19...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a pseudonym and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PseudonymTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Pseudonym, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a pseudonym and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *PseudonymTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Pseudonym {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a pseudonym and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *PseudonymTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Pseudonym {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a pseudonym and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PseudonymTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Pseudonym, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePseudonym(opt)

	if o.r.User == nil {
		PseudonymMods.WithNewUser().Apply(ctx, o)
	}

	rel10, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel10, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.UserID = &rel10.UserID

	m, err := models.Pseudonyms.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = pseudonymCtx.WithValue(ctx, m)

	m.R.User = rel10

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple pseudonyms and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PseudonymTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PseudonymSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple pseudonyms and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o PseudonymTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.PseudonymSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple pseudonyms and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o PseudonymTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.PseudonymSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple pseudonyms and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PseudonymTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PseudonymSlice, error) {
	var err error
	m := make(models.PseudonymSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Pseudonym has methods that act as mods for the PseudonymTemplate
var PseudonymMods pseudonymMods

type pseudonymMods struct{}

func (m pseudonymMods) RandomizeAllColumns(f *faker.Faker) PseudonymMod {
	return PseudonymModSlice{
		PseudonymMods.RandomPseudonymID(f),
		PseudonymMods.RandomUserID(f),
		PseudonymMods.RandomDisplayName(f),
		PseudonymMods.RandomKarmaScore(f),
		PseudonymMods.RandomCreatedAt(f),
		PseudonymMods.RandomLastActiveAt(f),
		PseudonymMods.RandomIsActive(f),
		PseudonymMods.RandomBio(f),
		PseudonymMods.RandomAvatarURL(f),
		PseudonymMods.RandomWebsiteURL(f),
		PseudonymMods.RandomShowKarma(f),
		PseudonymMods.RandomAllowDirectMessages(f),
	}
}

// Set the model columns to this value
func (m pseudonymMods) PseudonymID(val string) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.PseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) PseudonymIDFunc(f func() string) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetPseudonymID() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pseudonymMods) RandomPseudonymID(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.PseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) UserID(val int64) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) UserIDFunc(f func() int64) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetUserID() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pseudonymMods) RandomUserID(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) DisplayName(val string) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.DisplayName = func() string { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) DisplayNameFunc(f func() string) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.DisplayName = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetDisplayName() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.DisplayName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pseudonymMods) RandomDisplayName(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.DisplayName = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) KarmaScore(val sql.Null[int32]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.KarmaScore = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) KarmaScoreFunc(f func() sql.Null[int32]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.KarmaScore = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetKarmaScore() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.KarmaScore = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomKarmaScore(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.KarmaScore = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomKarmaScoreNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.KarmaScore = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) CreatedAt(val sql.Null[time.Time]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) CreatedAtFunc(f func() sql.Null[time.Time]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetCreatedAt() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomCreatedAt(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomCreatedAtNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) LastActiveAt(val sql.Null[time.Time]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.LastActiveAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) LastActiveAtFunc(f func() sql.Null[time.Time]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.LastActiveAt = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetLastActiveAt() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.LastActiveAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomLastActiveAt(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.LastActiveAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomLastActiveAtNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.LastActiveAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) IsActive(val sql.Null[bool]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.IsActive = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) IsActiveFunc(f func() sql.Null[bool]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.IsActive = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetIsActive() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.IsActive = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomIsActive(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.IsActive = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomIsActiveNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.IsActive = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) Bio(val sql.Null[string]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.Bio = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) BioFunc(f func() sql.Null[string]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.Bio = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetBio() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.Bio = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomBio(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.Bio = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomBioNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.Bio = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) AvatarURL(val sql.Null[string]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AvatarURL = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) AvatarURLFunc(f func() sql.Null[string]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AvatarURL = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetAvatarURL() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AvatarURL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomAvatarURL(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AvatarURL = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "255")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomAvatarURLNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AvatarURL = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "255")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) WebsiteURL(val sql.Null[string]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.WebsiteURL = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) WebsiteURLFunc(f func() sql.Null[string]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.WebsiteURL = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetWebsiteURL() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.WebsiteURL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomWebsiteURL(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.WebsiteURL = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "255")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomWebsiteURLNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.WebsiteURL = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "255")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) ShowKarma(val sql.Null[bool]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.ShowKarma = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) ShowKarmaFunc(f func() sql.Null[bool]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.ShowKarma = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetShowKarma() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.ShowKarma = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomShowKarma(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.ShowKarma = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomShowKarmaNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.ShowKarma = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m pseudonymMods) AllowDirectMessages(val sql.Null[bool]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AllowDirectMessages = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m pseudonymMods) AllowDirectMessagesFunc(f func() sql.Null[bool]) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AllowDirectMessages = f
	})
}

// Clear any values for the column
func (m pseudonymMods) UnsetAllowDirectMessages() PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AllowDirectMessages = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m pseudonymMods) RandomAllowDirectMessages(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AllowDirectMessages = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m pseudonymMods) RandomAllowDirectMessagesNotNull(f *faker.Faker) PseudonymMod {
	return PseudonymModFunc(func(_ context.Context, o *PseudonymTemplate) {
		o.AllowDirectMessages = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

func (m pseudonymMods) WithParentsCascading() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		if isDone, _ := pseudonymWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = pseudonymWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m pseudonymMods) WithUser(rel *UserTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.User = &pseudonymRUserR{
			o: rel,
		}
	})
}

func (m pseudonymMods) WithNewUser(mods ...UserMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutUser() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.User = nil
	})
}

func (m pseudonymMods) WithAPIKeys(number int, related *APIKeyTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.APIKeys = []*pseudonymRAPIKeysR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewAPIKeys(number int, mods ...APIKeyMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewAPIKey(ctx, mods...)
		m.WithAPIKeys(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddAPIKeys(number int, related *APIKeyTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.APIKeys = append(o.r.APIKeys, &pseudonymRAPIKeysR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewAPIKeys(number int, mods ...APIKeyMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewAPIKey(ctx, mods...)
		m.AddAPIKeys(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutAPIKeys() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.APIKeys = nil
	})
}

func (m pseudonymMods) WithComments(number int, related *CommentTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Comments = []*pseudonymRCommentsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewComments(number int, mods ...CommentMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.WithComments(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddComments(number int, related *CommentTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Comments = append(o.r.Comments, &pseudonymRCommentsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewComments(number int, mods ...CommentMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.AddComments(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutComments() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Comments = nil
	})
}

func (m pseudonymMods) WithRemovedByPseudonymComments(number int, related *CommentTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RemovedByPseudonymComments = []*pseudonymRRemovedByPseudonymCommentsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewRemovedByPseudonymComments(number int, mods ...CommentMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.WithRemovedByPseudonymComments(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddRemovedByPseudonymComments(number int, related *CommentTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RemovedByPseudonymComments = append(o.r.RemovedByPseudonymComments, &pseudonymRRemovedByPseudonymCommentsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewRemovedByPseudonymComments(number int, mods ...CommentMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.AddRemovedByPseudonymComments(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutRemovedByPseudonymComments() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RemovedByPseudonymComments = nil
	})
}

func (m pseudonymMods) WithCorrelationAudits(number int, related *CorrelationAuditTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.CorrelationAudits = []*pseudonymRCorrelationAuditsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewCorrelationAudits(number int, mods ...CorrelationAuditMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewCorrelationAudit(ctx, mods...)
		m.WithCorrelationAudits(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddCorrelationAudits(number int, related *CorrelationAuditTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.CorrelationAudits = append(o.r.CorrelationAudits, &pseudonymRCorrelationAuditsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewCorrelationAudits(number int, mods ...CorrelationAuditMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewCorrelationAudit(ctx, mods...)
		m.AddCorrelationAudits(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutCorrelationAudits() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.CorrelationAudits = nil
	})
}

func (m pseudonymMods) WithRecipientPseudonymDirectMessages(number int, related *DirectMessageTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RecipientPseudonymDirectMessages = []*pseudonymRRecipientPseudonymDirectMessagesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewRecipientPseudonymDirectMessages(number int, mods ...DirectMessageMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewDirectMessage(ctx, mods...)
		m.WithRecipientPseudonymDirectMessages(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddRecipientPseudonymDirectMessages(number int, related *DirectMessageTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RecipientPseudonymDirectMessages = append(o.r.RecipientPseudonymDirectMessages, &pseudonymRRecipientPseudonymDirectMessagesR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewRecipientPseudonymDirectMessages(number int, mods ...DirectMessageMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewDirectMessage(ctx, mods...)
		m.AddRecipientPseudonymDirectMessages(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutRecipientPseudonymDirectMessages() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RecipientPseudonymDirectMessages = nil
	})
}

func (m pseudonymMods) WithSenderPseudonymDirectMessages(number int, related *DirectMessageTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SenderPseudonymDirectMessages = []*pseudonymRSenderPseudonymDirectMessagesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewSenderPseudonymDirectMessages(number int, mods ...DirectMessageMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewDirectMessage(ctx, mods...)
		m.WithSenderPseudonymDirectMessages(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddSenderPseudonymDirectMessages(number int, related *DirectMessageTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SenderPseudonymDirectMessages = append(o.r.SenderPseudonymDirectMessages, &pseudonymRSenderPseudonymDirectMessagesR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewSenderPseudonymDirectMessages(number int, mods ...DirectMessageMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewDirectMessage(ctx, mods...)
		m.AddSenderPseudonymDirectMessages(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutSenderPseudonymDirectMessages() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SenderPseudonymDirectMessages = nil
	})
}

func (m pseudonymMods) WithModeratorPseudonymModerationActions(number int, related *ModerationActionTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ModeratorPseudonymModerationActions = []*pseudonymRModeratorPseudonymModerationActionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewModeratorPseudonymModerationActions(number int, mods ...ModerationActionMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewModerationAction(ctx, mods...)
		m.WithModeratorPseudonymModerationActions(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddModeratorPseudonymModerationActions(number int, related *ModerationActionTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ModeratorPseudonymModerationActions = append(o.r.ModeratorPseudonymModerationActions, &pseudonymRModeratorPseudonymModerationActionsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewModeratorPseudonymModerationActions(number int, mods ...ModerationActionMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewModerationAction(ctx, mods...)
		m.AddModeratorPseudonymModerationActions(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutModeratorPseudonymModerationActions() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ModeratorPseudonymModerationActions = nil
	})
}

func (m pseudonymMods) WithPollVotes(number int, related *PollVoteTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.PollVotes = []*pseudonymRPollVotesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewPollVotes(number int, mods ...PollVoteMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewPollVote(ctx, mods...)
		m.WithPollVotes(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddPollVotes(number int, related *PollVoteTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.PollVotes = append(o.r.PollVotes, &pseudonymRPollVotesR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewPollVotes(number int, mods ...PollVoteMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewPollVote(ctx, mods...)
		m.AddPollVotes(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutPollVotes() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.PollVotes = nil
	})
}

func (m pseudonymMods) WithPosts(number int, related *PostTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Posts = []*pseudonymRPostsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewPosts(number int, mods ...PostMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewPost(ctx, mods...)
		m.WithPosts(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddPosts(number int, related *PostTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Posts = append(o.r.Posts, &pseudonymRPostsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewPosts(number int, mods ...PostMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewPost(ctx, mods...)
		m.AddPosts(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutPosts() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Posts = nil
	})
}

func (m pseudonymMods) WithRemovedByPseudonymPosts(number int, related *PostTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RemovedByPseudonymPosts = []*pseudonymRRemovedByPseudonymPostsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewRemovedByPseudonymPosts(number int, mods ...PostMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewPost(ctx, mods...)
		m.WithRemovedByPseudonymPosts(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddRemovedByPseudonymPosts(number int, related *PostTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RemovedByPseudonymPosts = append(o.r.RemovedByPseudonymPosts, &pseudonymRRemovedByPseudonymPostsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewRemovedByPseudonymPosts(number int, mods ...PostMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewPost(ctx, mods...)
		m.AddRemovedByPseudonymPosts(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutRemovedByPseudonymPosts() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.RemovedByPseudonymPosts = nil
	})
}

func (m pseudonymMods) WithReportedPseudonymReports(number int, related *ReportTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ReportedPseudonymReports = []*pseudonymRReportedPseudonymReportsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewReportedPseudonymReports(number int, mods ...ReportMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewReport(ctx, mods...)
		m.WithReportedPseudonymReports(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddReportedPseudonymReports(number int, related *ReportTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ReportedPseudonymReports = append(o.r.ReportedPseudonymReports, &pseudonymRReportedPseudonymReportsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewReportedPseudonymReports(number int, mods ...ReportMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewReport(ctx, mods...)
		m.AddReportedPseudonymReports(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutReportedPseudonymReports() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ReportedPseudonymReports = nil
	})
}

func (m pseudonymMods) WithReporterPseudonymReports(number int, related *ReportTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ReporterPseudonymReports = []*pseudonymRReporterPseudonymReportsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewReporterPseudonymReports(number int, mods ...ReportMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewReport(ctx, mods...)
		m.WithReporterPseudonymReports(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddReporterPseudonymReports(number int, related *ReportTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ReporterPseudonymReports = append(o.r.ReporterPseudonymReports, &pseudonymRReporterPseudonymReportsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewReporterPseudonymReports(number int, mods ...ReportMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewReport(ctx, mods...)
		m.AddReporterPseudonymReports(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutReporterPseudonymReports() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ReporterPseudonymReports = nil
	})
}

func (m pseudonymMods) WithResolvedByPseudonymReports(number int, related *ReportTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ResolvedByPseudonymReports = []*pseudonymRResolvedByPseudonymReportsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewResolvedByPseudonymReports(number int, mods ...ReportMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewReport(ctx, mods...)
		m.WithResolvedByPseudonymReports(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddResolvedByPseudonymReports(number int, related *ReportTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ResolvedByPseudonymReports = append(o.r.ResolvedByPseudonymReports, &pseudonymRResolvedByPseudonymReportsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewResolvedByPseudonymReports(number int, mods ...ReportMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewReport(ctx, mods...)
		m.AddResolvedByPseudonymReports(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutResolvedByPseudonymReports() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.ResolvedByPseudonymReports = nil
	})
}

func (m pseudonymMods) WithSubforumModerators(number int, related *SubforumModeratorTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SubforumModerators = []*pseudonymRSubforumModeratorsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewSubforumModerators(number int, mods ...SubforumModeratorMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewSubforumModerator(ctx, mods...)
		m.WithSubforumModerators(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddSubforumModerators(number int, related *SubforumModeratorTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SubforumModerators = append(o.r.SubforumModerators, &pseudonymRSubforumModeratorsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewSubforumModerators(number int, mods ...SubforumModeratorMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewSubforumModerator(ctx, mods...)
		m.AddSubforumModerators(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutSubforumModerators() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SubforumModerators = nil
	})
}

func (m pseudonymMods) WithSubforumSubscriptions(number int, related *SubforumSubscriptionTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SubforumSubscriptions = []*pseudonymRSubforumSubscriptionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewSubforumSubscriptions(number int, mods ...SubforumSubscriptionMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewSubforumSubscription(ctx, mods...)
		m.WithSubforumSubscriptions(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddSubforumSubscriptions(number int, related *SubforumSubscriptionTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SubforumSubscriptions = append(o.r.SubforumSubscriptions, &pseudonymRSubforumSubscriptionsR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewSubforumSubscriptions(number int, mods ...SubforumSubscriptionMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewSubforumSubscription(ctx, mods...)
		m.AddSubforumSubscriptions(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutSubforumSubscriptions() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.SubforumSubscriptions = nil
	})
}

func (m pseudonymMods) WithBannedByPseudonymUserBans(number int, related *UserBanTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BannedByPseudonymUserBans = []*pseudonymRBannedByPseudonymUserBansR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewBannedByPseudonymUserBans(number int, mods ...UserBanMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewUserBan(ctx, mods...)
		m.WithBannedByPseudonymUserBans(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddBannedByPseudonymUserBans(number int, related *UserBanTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BannedByPseudonymUserBans = append(o.r.BannedByPseudonymUserBans, &pseudonymRBannedByPseudonymUserBansR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewBannedByPseudonymUserBans(number int, mods ...UserBanMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewUserBan(ctx, mods...)
		m.AddBannedByPseudonymUserBans(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutBannedByPseudonymUserBans() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BannedByPseudonymUserBans = nil
	})
}

func (m pseudonymMods) WithBlockedPseudonymUserBlocks(number int, related *UserBlockTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BlockedPseudonymUserBlocks = []*pseudonymRBlockedPseudonymUserBlocksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewBlockedPseudonymUserBlocks(number int, mods ...UserBlockMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewUserBlock(ctx, mods...)
		m.WithBlockedPseudonymUserBlocks(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddBlockedPseudonymUserBlocks(number int, related *UserBlockTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BlockedPseudonymUserBlocks = append(o.r.BlockedPseudonymUserBlocks, &pseudonymRBlockedPseudonymUserBlocksR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewBlockedPseudonymUserBlocks(number int, mods ...UserBlockMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewUserBlock(ctx, mods...)
		m.AddBlockedPseudonymUserBlocks(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutBlockedPseudonymUserBlocks() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BlockedPseudonymUserBlocks = nil
	})
}

func (m pseudonymMods) WithBlockerPseudonymUserBlocks(number int, related *UserBlockTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BlockerPseudonymUserBlocks = []*pseudonymRBlockerPseudonymUserBlocksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewBlockerPseudonymUserBlocks(number int, mods ...UserBlockMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewUserBlock(ctx, mods...)
		m.WithBlockerPseudonymUserBlocks(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddBlockerPseudonymUserBlocks(number int, related *UserBlockTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BlockerPseudonymUserBlocks = append(o.r.BlockerPseudonymUserBlocks, &pseudonymRBlockerPseudonymUserBlocksR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewBlockerPseudonymUserBlocks(number int, mods ...UserBlockMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewUserBlock(ctx, mods...)
		m.AddBlockerPseudonymUserBlocks(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutBlockerPseudonymUserBlocks() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.BlockerPseudonymUserBlocks = nil
	})
}

func (m pseudonymMods) WithVotes(number int, related *VoteTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Votes = []*pseudonymRVotesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m pseudonymMods) WithNewVotes(number int, mods ...VoteMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewVote(ctx, mods...)
		m.WithVotes(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) AddVotes(number int, related *VoteTemplate) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Votes = append(o.r.Votes, &pseudonymRVotesR{
			number: number,
			o:      related,
		})
	})
}

func (m pseudonymMods) AddNewVotes(number int, mods ...VoteMod) PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		related := o.f.NewVote(ctx, mods...)
		m.AddVotes(number, related).Apply(ctx, o)
	})
}

func (m pseudonymMods) WithoutVotes() PseudonymMod {
	return PseudonymModFunc(func(ctx context.Context, o *PseudonymTemplate) {
		o.r.Votes = nil
	})
}
