// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"encoding/json"
	"testing"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

type CorrelationAuditMod interface {
	Apply(context.Context, *CorrelationAuditTemplate)
}

type CorrelationAuditModFunc func(context.Context, *CorrelationAuditTemplate)

func (f CorrelationAuditModFunc) Apply(ctx context.Context, n *CorrelationAuditTemplate) {
	f(ctx, n)
}

type CorrelationAuditModSlice []CorrelationAuditMod

func (mods CorrelationAuditModSlice) Apply(ctx context.Context, n *CorrelationAuditTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// CorrelationAuditTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CorrelationAuditTemplate struct {
	AuditID              func() uuid.UUID
	UserID               func() int64
	PseudonymID          func() string
	AdminUsername        func() string
	RoleUsed             func() string
	RequestedPseudonym   func() string
	RequestedFingerprint func() sql.Null[string]
	Justification        func() string
	CorrelationType      func() string
	CorrelationResult    func() sql.Null[types.JSON[json.RawMessage]]
	Timestamp            func() sql.Null[time.Time]
	LegalBasis           func() sql.Null[string]
	IncidentID           func() sql.Null[string]
	RequestSource        func() sql.Null[string]
	IPAddress            func() sql.Null[pgtypes.Inet]
	UserAgent            func() sql.Null[string]

	r correlationAuditR
	f *Factory
}

type correlationAuditR struct {
	AuditComplianceCorrelations []*correlationAuditRAuditComplianceCorrelationsR
	Pseudonym                   *correlationAuditRPseudonymR
	User                        *correlationAuditRUserR
}

type correlationAuditRAuditComplianceCorrelationsR struct {
	number int
	o      *ComplianceCorrelationTemplate
}
type correlationAuditRPseudonymR struct {
	o *PseudonymTemplate
}
type correlationAuditRUserR struct {
	o *UserTemplate
}

// Apply mods to the CorrelationAuditTemplate
func (o *CorrelationAuditTemplate) Apply(ctx context.Context, mods ...CorrelationAuditMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.CorrelationAudit
// according to the relationships in the template. Nothing is inserted into the db
func (t CorrelationAuditTemplate) setModelRels(o *models.CorrelationAudit) {
	if t.r.AuditComplianceCorrelations != nil {
		rel := models.ComplianceCorrelationSlice{}
		for _, r := range t.r.AuditComplianceCorrelations {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.AuditID = o.AuditID // h2
				rel.R.AuditCorrelationAudit = o
			}
			rel = append(rel, related...)
		}
		o.R.AuditComplianceCorrelations = rel
	}

	if t.r.Pseudonym != nil {
		rel := t.r.Pseudonym.o.Build()
		rel.R.CorrelationAudits = append(rel.R.CorrelationAudits, o)
		o.PseudonymID = rel.PseudonymID // h2
		o.R.Pseudonym = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.CorrelationAudits = append(rel.R.CorrelationAudits, o)
		o.UserID = rel.UserID // h2
		o.R.User = rel
	}
}

// BuildSetter returns an *models.CorrelationAuditSetter
// this does nothing with the relationship templates
func (o CorrelationAuditTemplate) BuildSetter() *models.CorrelationAuditSetter {
	m := &models.CorrelationAuditSetter{}

	if o.AuditID != nil {
		val := o.AuditID()
		m.AuditID = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}
	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}
	if o.AdminUsername != nil {
		val := o.AdminUsername()
		m.AdminUsername = &val
	}
	if o.RoleUsed != nil {
		val := o.RoleUsed()
		m.RoleUsed = &val
	}
	if o.RequestedPseudonym != nil {
		val := o.RequestedPseudonym()
		m.RequestedPseudonym = &val
	}
	if o.RequestedFingerprint != nil {
		val := o.RequestedFingerprint()
		m.RequestedFingerprint = &val
	}
	if o.Justification != nil {
		val := o.Justification()
		m.Justification = &val
	}
	if o.CorrelationType != nil {
		val := o.CorrelationType()
		m.CorrelationType = &val
	}
	if o.CorrelationResult != nil {
		val := o.CorrelationResult()
		m.CorrelationResult = &val
	}
	if o.Timestamp != nil {
		val := o.Timestamp()
		m.Timestamp = &val
	}
	if o.LegalBasis != nil {
		val := o.LegalBasis()
		m.LegalBasis = &val
	}
	if o.IncidentID != nil {
		val := o.IncidentID()
		m.IncidentID = &val
	}
	if o.RequestSource != nil {
		val := o.RequestSource()
		m.RequestSource = &val
	}
	if o.IPAddress != nil {
		val := o.IPAddress()
		m.IPAddress = &val
	}
	if o.UserAgent != nil {
		val := o.UserAgent()
		m.UserAgent = &val
	}

	return m
}

// BuildManySetter returns an []*models.CorrelationAuditSetter
// this does nothing with the relationship templates
func (o CorrelationAuditTemplate) BuildManySetter(number int) []*models.CorrelationAuditSetter {
	m := make([]*models.CorrelationAuditSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.CorrelationAudit
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CorrelationAuditTemplate.Create
func (o CorrelationAuditTemplate) Build() *models.CorrelationAudit {
	m := &models.CorrelationAudit{}

	if o.AuditID != nil {
		m.AuditID = o.AuditID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}
	if o.AdminUsername != nil {
		m.AdminUsername = o.AdminUsername()
	}
	if o.RoleUsed != nil {
		m.RoleUsed = o.RoleUsed()
	}
	if o.RequestedPseudonym != nil {
		m.RequestedPseudonym = o.RequestedPseudonym()
	}
	if o.RequestedFingerprint != nil {
		m.RequestedFingerprint = o.RequestedFingerprint()
	}
	if o.Justification != nil {
		m.Justification = o.Justification()
	}
	if o.CorrelationType != nil {
		m.CorrelationType = o.CorrelationType()
	}
	if o.CorrelationResult != nil {
		m.CorrelationResult = o.CorrelationResult()
	}
	if o.Timestamp != nil {
		m.Timestamp = o.Timestamp()
	}
	if o.LegalBasis != nil {
		m.LegalBasis = o.LegalBasis()
	}
	if o.IncidentID != nil {
		m.IncidentID = o.IncidentID()
	}
	if o.RequestSource != nil {
		m.RequestSource = o.RequestSource()
	}
	if o.IPAddress != nil {
		m.IPAddress = o.IPAddress()
	}
	if o.UserAgent != nil {
		m.UserAgent = o.UserAgent()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CorrelationAuditSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CorrelationAuditTemplate.CreateMany
func (o CorrelationAuditTemplate) BuildMany(number int) models.CorrelationAuditSlice {
	m := make(models.CorrelationAuditSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableCorrelationAudit(m *models.CorrelationAuditSetter) {
	if m.UserID == nil {
		val := random_int64(nil)
		m.UserID = &val
	}
	if m.PseudonymID == nil {
		val := random_string(nil, "64")
		m.PseudonymID = &val
	}
	if m.AdminUsername == nil {
		val := random_string(nil, "100")
		m.AdminUsername = &val
	}
	if m.RoleUsed == nil {
		val := random_string(nil, "50")
		m.RoleUsed = &val
	}
	if m.RequestedPseudonym == nil {
		val := random_string(nil, "64")
		m.RequestedPseudonym = &val
	}
	if m.Justification == nil {
		val := random_string(nil)
		m.Justification = &val
	}
	if m.CorrelationType == nil {
		val := random_string(nil, "20")
		m.CorrelationType = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.CorrelationAudit
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CorrelationAuditTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.CorrelationAudit) (context.Context, error) {
	var err error

	isAuditComplianceCorrelationsDone, _ := correlationAuditRelAuditComplianceCorrelationsCtx.Value(ctx)
	if !isAuditComplianceCorrelationsDone && o.r.AuditComplianceCorrelations != nil {
		ctx = correlationAuditRelAuditComplianceCorrelationsCtx.WithValue(ctx, true)
		for _, r := range o.r.AuditComplianceCorrelations {
			var rel0 models.ComplianceCorrelationSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachAuditComplianceCorrelations(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a correlationAudit and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CorrelationAuditTemplate) Create(ctx context.Context, exec bob.Executor) (*models.CorrelationAudit, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a correlationAudit and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CorrelationAuditTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.CorrelationAudit {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a correlationAudit and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CorrelationAuditTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.CorrelationAudit {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a correlationAudit and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CorrelationAuditTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.CorrelationAudit, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableCorrelationAudit(opt)

	if o.r.Pseudonym == nil {
		CorrelationAuditMods.WithNewPseudonym().Apply(ctx, o)
	}

	rel1, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.Pseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PseudonymID = &rel1.PseudonymID

	if o.r.User == nil {
		CorrelationAuditMods.WithNewUser().Apply(ctx, o)
	}

	rel2, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel2, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.UserID = &rel2.UserID

	m, err := models.CorrelationAudits.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = correlationAuditCtx.WithValue(ctx, m)

	m.R.Pseudonym = rel1
	m.R.User = rel2

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple correlationAudits and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CorrelationAuditTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CorrelationAuditSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple correlationAudits and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CorrelationAuditTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CorrelationAuditSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple correlationAudits and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CorrelationAuditTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CorrelationAuditSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple correlationAudits and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CorrelationAuditTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CorrelationAuditSlice, error) {
	var err error
	m := make(models.CorrelationAuditSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// CorrelationAudit has methods that act as mods for the CorrelationAuditTemplate
var CorrelationAuditMods correlationAuditMods

type correlationAuditMods struct{}

func (m correlationAuditMods) RandomizeAllColumns(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModSlice{
		CorrelationAuditMods.RandomAuditID(f),
		CorrelationAuditMods.RandomUserID(f),
		CorrelationAuditMods.RandomPseudonymID(f),
		CorrelationAuditMods.RandomAdminUsername(f),
		CorrelationAuditMods.RandomRoleUsed(f),
		CorrelationAuditMods.RandomRequestedPseudonym(f),
		CorrelationAuditMods.RandomRequestedFingerprint(f),
		CorrelationAuditMods.RandomJustification(f),
		CorrelationAuditMods.RandomCorrelationType(f),
		CorrelationAuditMods.RandomCorrelationResult(f),
		CorrelationAuditMods.RandomTimestamp(f),
		CorrelationAuditMods.RandomLegalBasis(f),
		CorrelationAuditMods.RandomIncidentID(f),
		CorrelationAuditMods.RandomRequestSource(f),
		CorrelationAuditMods.RandomIPAddress(f),
		CorrelationAuditMods.RandomUserAgent(f),
	}
}

// Set the model columns to this value
func (m correlationAuditMods) AuditID(val uuid.UUID) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AuditID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) AuditIDFunc(f func() uuid.UUID) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AuditID = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetAuditID() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AuditID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomAuditID(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AuditID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) UserID(val int64) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) UserIDFunc(f func() int64) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetUserID() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomUserID(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) PseudonymID(val string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.PseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) PseudonymIDFunc(f func() string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetPseudonymID() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomPseudonymID(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.PseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) AdminUsername(val string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AdminUsername = func() string { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) AdminUsernameFunc(f func() string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AdminUsername = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetAdminUsername() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AdminUsername = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomAdminUsername(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.AdminUsername = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) RoleUsed(val string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RoleUsed = func() string { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) RoleUsedFunc(f func() string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RoleUsed = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetRoleUsed() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RoleUsed = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomRoleUsed(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RoleUsed = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) RequestedPseudonym(val string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedPseudonym = func() string { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) RequestedPseudonymFunc(f func() string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedPseudonym = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetRequestedPseudonym() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedPseudonym = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomRequestedPseudonym(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedPseudonym = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) RequestedFingerprint(val sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedFingerprint = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) RequestedFingerprintFunc(f func() sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedFingerprint = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetRequestedFingerprint() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedFingerprint = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomRequestedFingerprint(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedFingerprint = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "32")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomRequestedFingerprintNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestedFingerprint = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "32")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) Justification(val string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Justification = func() string { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) JustificationFunc(f func() string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Justification = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetJustification() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Justification = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomJustification(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Justification = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) CorrelationType(val string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationType = func() string { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) CorrelationTypeFunc(f func() string) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationType = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetCorrelationType() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m correlationAuditMods) RandomCorrelationType(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationType = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) CorrelationResult(val sql.Null[types.JSON[json.RawMessage]]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationResult = func() sql.Null[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) CorrelationResultFunc(f func() sql.Null[types.JSON[json.RawMessage]]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationResult = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetCorrelationResult() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationResult = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomCorrelationResult(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationResult = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomCorrelationResultNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.CorrelationResult = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) Timestamp(val sql.Null[time.Time]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Timestamp = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) TimestampFunc(f func() sql.Null[time.Time]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Timestamp = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetTimestamp() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Timestamp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomTimestamp(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomTimestampNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) LegalBasis(val sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.LegalBasis = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) LegalBasisFunc(f func() sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.LegalBasis = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetLegalBasis() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.LegalBasis = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomLegalBasis(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.LegalBasis = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomLegalBasisNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.LegalBasis = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) IncidentID(val sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IncidentID = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) IncidentIDFunc(f func() sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IncidentID = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetIncidentID() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IncidentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomIncidentID(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IncidentID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomIncidentIDNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IncidentID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) RequestSource(val sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestSource = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) RequestSourceFunc(f func() sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestSource = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetRequestSource() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestSource = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomRequestSource(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestSource = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "50")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomRequestSourceNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.RequestSource = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "50")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) IPAddress(val sql.Null[pgtypes.Inet]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IPAddress = func() sql.Null[pgtypes.Inet] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) IPAddressFunc(f func() sql.Null[pgtypes.Inet]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IPAddress = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetIPAddress() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IPAddress = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomIPAddress(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IPAddress = func() sql.Null[pgtypes.Inet] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_pgtypes_Inet(f)
			return sql.Null[pgtypes.Inet]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomIPAddressNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.IPAddress = func() sql.Null[pgtypes.Inet] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_pgtypes_Inet(f)
			return sql.Null[pgtypes.Inet]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m correlationAuditMods) UserAgent(val sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserAgent = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m correlationAuditMods) UserAgentFunc(f func() sql.Null[string]) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserAgent = f
	})
}

// Clear any values for the column
func (m correlationAuditMods) UnsetUserAgent() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserAgent = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m correlationAuditMods) RandomUserAgent(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserAgent = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m correlationAuditMods) RandomUserAgentNotNull(f *faker.Faker) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(_ context.Context, o *CorrelationAuditTemplate) {
		o.UserAgent = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

func (m correlationAuditMods) WithParentsCascading() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		if isDone, _ := correlationAuditWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = correlationAuditWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m correlationAuditMods) WithPseudonym(rel *PseudonymTemplate) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		o.r.Pseudonym = &correlationAuditRPseudonymR{
			o: rel,
		}
	})
}

func (m correlationAuditMods) WithNewPseudonym(mods ...PseudonymMod) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithPseudonym(related).Apply(ctx, o)
	})
}

func (m correlationAuditMods) WithoutPseudonym() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		o.r.Pseudonym = nil
	})
}

func (m correlationAuditMods) WithUser(rel *UserTemplate) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		o.r.User = &correlationAuditRUserR{
			o: rel,
		}
	})
}

func (m correlationAuditMods) WithNewUser(mods ...UserMod) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m correlationAuditMods) WithoutUser() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		o.r.User = nil
	})
}

func (m correlationAuditMods) WithAuditComplianceCorrelations(number int, related *ComplianceCorrelationTemplate) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		o.r.AuditComplianceCorrelations = []*correlationAuditRAuditComplianceCorrelationsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m correlationAuditMods) WithNewAuditComplianceCorrelations(number int, mods ...ComplianceCorrelationMod) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		related := o.f.NewComplianceCorrelation(ctx, mods...)
		m.WithAuditComplianceCorrelations(number, related).Apply(ctx, o)
	})
}

func (m correlationAuditMods) AddAuditComplianceCorrelations(number int, related *ComplianceCorrelationTemplate) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		o.r.AuditComplianceCorrelations = append(o.r.AuditComplianceCorrelations, &correlationAuditRAuditComplianceCorrelationsR{
			number: number,
			o:      related,
		})
	})
}

func (m correlationAuditMods) AddNewAuditComplianceCorrelations(number int, mods ...ComplianceCorrelationMod) CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		related := o.f.NewComplianceCorrelation(ctx, mods...)
		m.AddAuditComplianceCorrelations(number, related).Apply(ctx, o)
	})
}

func (m correlationAuditMods) WithoutAuditComplianceCorrelations() CorrelationAuditMod {
	return CorrelationAuditModFunc(func(ctx context.Context, o *CorrelationAuditTemplate) {
		o.r.AuditComplianceCorrelations = nil
	})
}
