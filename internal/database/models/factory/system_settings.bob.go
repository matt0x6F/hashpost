// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type SystemSettingMod interface {
	Apply(context.Context, *SystemSettingTemplate)
}

type SystemSettingModFunc func(context.Context, *SystemSettingTemplate)

func (f SystemSettingModFunc) Apply(ctx context.Context, n *SystemSettingTemplate) {
	f(ctx, n)
}

type SystemSettingModSlice []SystemSettingMod

func (mods SystemSettingModSlice) Apply(ctx context.Context, n *SystemSettingTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// SystemSettingTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type SystemSettingTemplate struct {
	SettingKey   func() string
	SettingValue func() string
	SettingType  func() string
	Description  func() sql.Null[string]
	UpdatedAt    func() sql.Null[time.Time]
	UpdatedBy    func() sql.Null[int64]

	r systemSettingR
	f *Factory
}

type systemSettingR struct {
	UpdatedByUser *systemSettingRUpdatedByUserR
}

type systemSettingRUpdatedByUserR struct {
	o *UserTemplate
}

// Apply mods to the SystemSettingTemplate
func (o *SystemSettingTemplate) Apply(ctx context.Context, mods ...SystemSettingMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.SystemSetting
// according to the relationships in the template. Nothing is inserted into the db
func (t SystemSettingTemplate) setModelRels(o *models.SystemSetting) {
	if t.r.UpdatedByUser != nil {
		rel := t.r.UpdatedByUser.o.Build()
		rel.R.UpdatedBySystemSettings = append(rel.R.UpdatedBySystemSettings, o)
		o.UpdatedBy = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.UpdatedByUser = rel
	}
}

// BuildSetter returns an *models.SystemSettingSetter
// this does nothing with the relationship templates
func (o SystemSettingTemplate) BuildSetter() *models.SystemSettingSetter {
	m := &models.SystemSettingSetter{}

	if o.SettingKey != nil {
		val := o.SettingKey()
		m.SettingKey = &val
	}
	if o.SettingValue != nil {
		val := o.SettingValue()
		m.SettingValue = &val
	}
	if o.SettingType != nil {
		val := o.SettingType()
		m.SettingType = &val
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}
	if o.UpdatedBy != nil {
		val := o.UpdatedBy()
		m.UpdatedBy = &val
	}

	return m
}

// BuildManySetter returns an []*models.SystemSettingSetter
// this does nothing with the relationship templates
func (o SystemSettingTemplate) BuildManySetter(number int) []*models.SystemSettingSetter {
	m := make([]*models.SystemSettingSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.SystemSetting
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SystemSettingTemplate.Create
func (o SystemSettingTemplate) Build() *models.SystemSetting {
	m := &models.SystemSetting{}

	if o.SettingKey != nil {
		m.SettingKey = o.SettingKey()
	}
	if o.SettingValue != nil {
		m.SettingValue = o.SettingValue()
	}
	if o.SettingType != nil {
		m.SettingType = o.SettingType()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.UpdatedBy != nil {
		m.UpdatedBy = o.UpdatedBy()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.SystemSettingSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SystemSettingTemplate.CreateMany
func (o SystemSettingTemplate) BuildMany(number int) models.SystemSettingSlice {
	m := make(models.SystemSettingSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableSystemSetting(m *models.SystemSettingSetter) {
	if m.SettingKey == nil {
		val := random_string(nil, "100")
		m.SettingKey = &val
	}
	if m.SettingValue == nil {
		val := random_string(nil)
		m.SettingValue = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.SystemSetting
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *SystemSettingTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.SystemSetting) (context.Context, error) {
	var err error

	isUpdatedByUserDone, _ := systemSettingRelUpdatedByUserCtx.Value(ctx)
	if !isUpdatedByUserDone && o.r.UpdatedByUser != nil {
		ctx = systemSettingRelUpdatedByUserCtx.WithValue(ctx, true)
		var rel0 *models.User
		ctx, rel0, err = o.r.UpdatedByUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachUpdatedByUser(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a systemSetting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *SystemSettingTemplate) Create(ctx context.Context, exec bob.Executor) (*models.SystemSetting, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a systemSetting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *SystemSettingTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.SystemSetting {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a systemSetting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *SystemSettingTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.SystemSetting {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a systemSetting and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *SystemSettingTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.SystemSetting, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableSystemSetting(opt)

	m, err := models.SystemSettings.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = systemSettingCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple systemSettings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o SystemSettingTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.SystemSettingSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple systemSettings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o SystemSettingTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.SystemSettingSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple systemSettings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o SystemSettingTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.SystemSettingSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple systemSettings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o SystemSettingTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.SystemSettingSlice, error) {
	var err error
	m := make(models.SystemSettingSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// SystemSetting has methods that act as mods for the SystemSettingTemplate
var SystemSettingMods systemSettingMods

type systemSettingMods struct{}

func (m systemSettingMods) RandomizeAllColumns(f *faker.Faker) SystemSettingMod {
	return SystemSettingModSlice{
		SystemSettingMods.RandomSettingKey(f),
		SystemSettingMods.RandomSettingValue(f),
		SystemSettingMods.RandomSettingType(f),
		SystemSettingMods.RandomDescription(f),
		SystemSettingMods.RandomUpdatedAt(f),
		SystemSettingMods.RandomUpdatedBy(f),
	}
}

// Set the model columns to this value
func (m systemSettingMods) SettingKey(val string) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingKey = func() string { return val }
	})
}

// Set the Column from the function
func (m systemSettingMods) SettingKeyFunc(f func() string) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingKey = f
	})
}

// Clear any values for the column
func (m systemSettingMods) UnsetSettingKey() SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingKey = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m systemSettingMods) RandomSettingKey(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingKey = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m systemSettingMods) SettingValue(val string) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingValue = func() string { return val }
	})
}

// Set the Column from the function
func (m systemSettingMods) SettingValueFunc(f func() string) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingValue = f
	})
}

// Clear any values for the column
func (m systemSettingMods) UnsetSettingValue() SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingValue = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m systemSettingMods) RandomSettingValue(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingValue = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m systemSettingMods) SettingType(val string) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingType = func() string { return val }
	})
}

// Set the Column from the function
func (m systemSettingMods) SettingTypeFunc(f func() string) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingType = f
	})
}

// Clear any values for the column
func (m systemSettingMods) UnsetSettingType() SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m systemSettingMods) RandomSettingType(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.SettingType = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m systemSettingMods) Description(val sql.Null[string]) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.Description = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m systemSettingMods) DescriptionFunc(f func() sql.Null[string]) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m systemSettingMods) UnsetDescription() SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m systemSettingMods) RandomDescription(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.Description = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m systemSettingMods) RandomDescriptionNotNull(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.Description = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m systemSettingMods) UpdatedAt(val sql.Null[time.Time]) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m systemSettingMods) UpdatedAtFunc(f func() sql.Null[time.Time]) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m systemSettingMods) UnsetUpdatedAt() SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m systemSettingMods) RandomUpdatedAt(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m systemSettingMods) RandomUpdatedAtNotNull(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m systemSettingMods) UpdatedBy(val sql.Null[int64]) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedBy = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m systemSettingMods) UpdatedByFunc(f func() sql.Null[int64]) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedBy = f
	})
}

// Clear any values for the column
func (m systemSettingMods) UnsetUpdatedBy() SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedBy = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m systemSettingMods) RandomUpdatedBy(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedBy = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m systemSettingMods) RandomUpdatedByNotNull(f *faker.Faker) SystemSettingMod {
	return SystemSettingModFunc(func(_ context.Context, o *SystemSettingTemplate) {
		o.UpdatedBy = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

func (m systemSettingMods) WithParentsCascading() SystemSettingMod {
	return SystemSettingModFunc(func(ctx context.Context, o *SystemSettingTemplate) {
		if isDone, _ := systemSettingWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = systemSettingWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUpdatedByUser(related).Apply(ctx, o)
		}
	})
}

func (m systemSettingMods) WithUpdatedByUser(rel *UserTemplate) SystemSettingMod {
	return SystemSettingModFunc(func(ctx context.Context, o *SystemSettingTemplate) {
		o.r.UpdatedByUser = &systemSettingRUpdatedByUserR{
			o: rel,
		}
	})
}

func (m systemSettingMods) WithNewUpdatedByUser(mods ...UserMod) SystemSettingMod {
	return SystemSettingModFunc(func(ctx context.Context, o *SystemSettingTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUpdatedByUser(related).Apply(ctx, o)
	})
}

func (m systemSettingMods) WithoutUpdatedByUser() SystemSettingMod {
	return SystemSettingModFunc(func(ctx context.Context, o *SystemSettingTemplate) {
		o.r.UpdatedByUser = nil
	})
}
