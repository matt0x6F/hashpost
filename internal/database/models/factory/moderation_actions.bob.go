// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"encoding/json"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type ModerationActionMod interface {
	Apply(context.Context, *ModerationActionTemplate)
}

type ModerationActionModFunc func(context.Context, *ModerationActionTemplate)

func (f ModerationActionModFunc) Apply(ctx context.Context, n *ModerationActionTemplate) {
	f(ctx, n)
}

type ModerationActionModSlice []ModerationActionMod

func (mods ModerationActionModSlice) Apply(ctx context.Context, n *ModerationActionTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// ModerationActionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ModerationActionTemplate struct {
	ActionID             func() int64
	ModeratorUserID      func() int64
	ModeratorPseudonymID func() string
	SubforumID           func() sql.Null[int32]
	ActionType           func() string
	TargetContentType    func() sql.Null[string]
	TargetContentID      func() sql.Null[int64]
	TargetUserID         func() sql.Null[int64]
	ActionDetails        func() sql.Null[types.JSON[json.RawMessage]]
	CreatedAt            func() sql.Null[time.Time]

	r moderationActionR
	f *Factory
}

type moderationActionR struct {
	ModeratorPseudonymPseudonym *moderationActionRModeratorPseudonymPseudonymR
	ModeratorUserUser           *moderationActionRModeratorUserUserR
	Subforum                    *moderationActionRSubforumR
	TargetUserUser              *moderationActionRTargetUserUserR
}

type moderationActionRModeratorPseudonymPseudonymR struct {
	o *PseudonymTemplate
}
type moderationActionRModeratorUserUserR struct {
	o *UserTemplate
}
type moderationActionRSubforumR struct {
	o *SubforumTemplate
}
type moderationActionRTargetUserUserR struct {
	o *UserTemplate
}

// Apply mods to the ModerationActionTemplate
func (o *ModerationActionTemplate) Apply(ctx context.Context, mods ...ModerationActionMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.ModerationAction
// according to the relationships in the template. Nothing is inserted into the db
func (t ModerationActionTemplate) setModelRels(o *models.ModerationAction) {
	if t.r.ModeratorPseudonymPseudonym != nil {
		rel := t.r.ModeratorPseudonymPseudonym.o.Build()
		rel.R.ModeratorPseudonymModerationActions = append(rel.R.ModeratorPseudonymModerationActions, o)
		o.ModeratorPseudonymID = rel.PseudonymID // h2
		o.R.ModeratorPseudonymPseudonym = rel
	}

	if t.r.ModeratorUserUser != nil {
		rel := t.r.ModeratorUserUser.o.Build()
		rel.R.ModeratorUserModerationActions = append(rel.R.ModeratorUserModerationActions, o)
		o.ModeratorUserID = rel.UserID // h2
		o.R.ModeratorUserUser = rel
	}

	if t.r.Subforum != nil {
		rel := t.r.Subforum.o.Build()
		rel.R.ModerationActions = append(rel.R.ModerationActions, o)
		o.SubforumID = sql.Null[int32]{V: rel.SubforumID, Valid: true} // h2
		o.R.Subforum = rel
	}

	if t.r.TargetUserUser != nil {
		rel := t.r.TargetUserUser.o.Build()
		rel.R.TargetUserModerationActions = append(rel.R.TargetUserModerationActions, o)
		o.TargetUserID = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.TargetUserUser = rel
	}
}

// BuildSetter returns an *models.ModerationActionSetter
// this does nothing with the relationship templates
func (o ModerationActionTemplate) BuildSetter() *models.ModerationActionSetter {
	m := &models.ModerationActionSetter{}

	if o.ActionID != nil {
		val := o.ActionID()
		m.ActionID = &val
	}
	if o.ModeratorUserID != nil {
		val := o.ModeratorUserID()
		m.ModeratorUserID = &val
	}
	if o.ModeratorPseudonymID != nil {
		val := o.ModeratorPseudonymID()
		m.ModeratorPseudonymID = &val
	}
	if o.SubforumID != nil {
		val := o.SubforumID()
		m.SubforumID = &val
	}
	if o.ActionType != nil {
		val := o.ActionType()
		m.ActionType = &val
	}
	if o.TargetContentType != nil {
		val := o.TargetContentType()
		m.TargetContentType = &val
	}
	if o.TargetContentID != nil {
		val := o.TargetContentID()
		m.TargetContentID = &val
	}
	if o.TargetUserID != nil {
		val := o.TargetUserID()
		m.TargetUserID = &val
	}
	if o.ActionDetails != nil {
		val := o.ActionDetails()
		m.ActionDetails = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.ModerationActionSetter
// this does nothing with the relationship templates
func (o ModerationActionTemplate) BuildManySetter(number int) []*models.ModerationActionSetter {
	m := make([]*models.ModerationActionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.ModerationAction
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ModerationActionTemplate.Create
func (o ModerationActionTemplate) Build() *models.ModerationAction {
	m := &models.ModerationAction{}

	if o.ActionID != nil {
		m.ActionID = o.ActionID()
	}
	if o.ModeratorUserID != nil {
		m.ModeratorUserID = o.ModeratorUserID()
	}
	if o.ModeratorPseudonymID != nil {
		m.ModeratorPseudonymID = o.ModeratorPseudonymID()
	}
	if o.SubforumID != nil {
		m.SubforumID = o.SubforumID()
	}
	if o.ActionType != nil {
		m.ActionType = o.ActionType()
	}
	if o.TargetContentType != nil {
		m.TargetContentType = o.TargetContentType()
	}
	if o.TargetContentID != nil {
		m.TargetContentID = o.TargetContentID()
	}
	if o.TargetUserID != nil {
		m.TargetUserID = o.TargetUserID()
	}
	if o.ActionDetails != nil {
		m.ActionDetails = o.ActionDetails()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ModerationActionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ModerationActionTemplate.CreateMany
func (o ModerationActionTemplate) BuildMany(number int) models.ModerationActionSlice {
	m := make(models.ModerationActionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableModerationAction(m *models.ModerationActionSetter) {
	if m.ModeratorUserID == nil {
		val := random_int64(nil)
		m.ModeratorUserID = &val
	}
	if m.ModeratorPseudonymID == nil {
		val := random_string(nil, "64")
		m.ModeratorPseudonymID = &val
	}
	if m.ActionType == nil {
		val := random_string(nil, "50")
		m.ActionType = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.ModerationAction
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ModerationActionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.ModerationAction) (context.Context, error) {
	var err error

	isSubforumDone, _ := moderationActionRelSubforumCtx.Value(ctx)
	if !isSubforumDone && o.r.Subforum != nil {
		ctx = moderationActionRelSubforumCtx.WithValue(ctx, true)
		var rel2 *models.Subforum
		ctx, rel2, err = o.r.Subforum.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachSubforum(ctx, exec, rel2)
		if err != nil {
			return ctx, err
		}

	}

	isTargetUserUserDone, _ := moderationActionRelTargetUserUserCtx.Value(ctx)
	if !isTargetUserUserDone && o.r.TargetUserUser != nil {
		ctx = moderationActionRelTargetUserUserCtx.WithValue(ctx, true)
		var rel3 *models.User
		ctx, rel3, err = o.r.TargetUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachTargetUserUser(ctx, exec, rel3)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a moderationAction and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ModerationActionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.ModerationAction, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a moderationAction and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ModerationActionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.ModerationAction {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a moderationAction and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ModerationActionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.ModerationAction {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a moderationAction and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ModerationActionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.ModerationAction, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableModerationAction(opt)

	if o.r.ModeratorPseudonymPseudonym == nil {
		ModerationActionMods.WithNewModeratorPseudonymPseudonym().Apply(ctx, o)
	}

	rel0, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.ModeratorPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.ModeratorPseudonymID = &rel0.PseudonymID

	if o.r.ModeratorUserUser == nil {
		ModerationActionMods.WithNewModeratorUserUser().Apply(ctx, o)
	}

	rel1, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.ModeratorUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.ModeratorUserID = &rel1.UserID

	m, err := models.ModerationActions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = moderationActionCtx.WithValue(ctx, m)

	m.R.ModeratorPseudonymPseudonym = rel0
	m.R.ModeratorUserUser = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple moderationActions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ModerationActionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ModerationActionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple moderationActions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ModerationActionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ModerationActionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple moderationActions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ModerationActionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ModerationActionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple moderationActions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ModerationActionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ModerationActionSlice, error) {
	var err error
	m := make(models.ModerationActionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// ModerationAction has methods that act as mods for the ModerationActionTemplate
var ModerationActionMods moderationActionMods

type moderationActionMods struct{}

func (m moderationActionMods) RandomizeAllColumns(f *faker.Faker) ModerationActionMod {
	return ModerationActionModSlice{
		ModerationActionMods.RandomActionID(f),
		ModerationActionMods.RandomModeratorUserID(f),
		ModerationActionMods.RandomModeratorPseudonymID(f),
		ModerationActionMods.RandomSubforumID(f),
		ModerationActionMods.RandomActionType(f),
		ModerationActionMods.RandomTargetContentType(f),
		ModerationActionMods.RandomTargetContentID(f),
		ModerationActionMods.RandomTargetUserID(f),
		ModerationActionMods.RandomActionDetails(f),
		ModerationActionMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m moderationActionMods) ActionID(val int64) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) ActionIDFunc(f func() int64) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionID = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetActionID() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m moderationActionMods) RandomActionID(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) ModeratorUserID(val int64) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorUserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) ModeratorUserIDFunc(f func() int64) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorUserID = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetModeratorUserID() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m moderationActionMods) RandomModeratorUserID(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorUserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) ModeratorPseudonymID(val string) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorPseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) ModeratorPseudonymIDFunc(f func() string) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorPseudonymID = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetModeratorPseudonymID() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m moderationActionMods) RandomModeratorPseudonymID(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ModeratorPseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) SubforumID(val sql.Null[int32]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.SubforumID = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) SubforumIDFunc(f func() sql.Null[int32]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.SubforumID = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetSubforumID() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.SubforumID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m moderationActionMods) RandomSubforumID(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.SubforumID = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m moderationActionMods) RandomSubforumIDNotNull(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.SubforumID = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) ActionType(val string) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionType = func() string { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) ActionTypeFunc(f func() string) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionType = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetActionType() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m moderationActionMods) RandomActionType(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionType = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) TargetContentType(val sql.Null[string]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentType = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) TargetContentTypeFunc(f func() sql.Null[string]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentType = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetTargetContentType() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m moderationActionMods) RandomTargetContentType(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentType = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "10")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m moderationActionMods) RandomTargetContentTypeNotNull(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentType = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "10")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) TargetContentID(val sql.Null[int64]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) TargetContentIDFunc(f func() sql.Null[int64]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentID = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetTargetContentID() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m moderationActionMods) RandomTargetContentID(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m moderationActionMods) RandomTargetContentIDNotNull(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetContentID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) TargetUserID(val sql.Null[int64]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetUserID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) TargetUserIDFunc(f func() sql.Null[int64]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetUserID = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetTargetUserID() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m moderationActionMods) RandomTargetUserID(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m moderationActionMods) RandomTargetUserIDNotNull(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.TargetUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) ActionDetails(val sql.Null[types.JSON[json.RawMessage]]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionDetails = func() sql.Null[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) ActionDetailsFunc(f func() sql.Null[types.JSON[json.RawMessage]]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionDetails = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetActionDetails() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionDetails = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m moderationActionMods) RandomActionDetails(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionDetails = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m moderationActionMods) RandomActionDetailsNotNull(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.ActionDetails = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m moderationActionMods) CreatedAt(val sql.Null[time.Time]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m moderationActionMods) CreatedAtFunc(f func() sql.Null[time.Time]) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m moderationActionMods) UnsetCreatedAt() ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m moderationActionMods) RandomCreatedAt(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m moderationActionMods) RandomCreatedAtNotNull(f *faker.Faker) ModerationActionMod {
	return ModerationActionModFunc(func(_ context.Context, o *ModerationActionTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m moderationActionMods) WithParentsCascading() ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		if isDone, _ := moderationActionWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = moderationActionWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithModeratorPseudonymPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithModeratorUserUser(related).Apply(ctx, o)
		}
		{

			related := o.f.NewSubforum(ctx, SubforumMods.WithParentsCascading())
			m.WithSubforum(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithTargetUserUser(related).Apply(ctx, o)
		}
	})
}

func (m moderationActionMods) WithModeratorPseudonymPseudonym(rel *PseudonymTemplate) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.ModeratorPseudonymPseudonym = &moderationActionRModeratorPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m moderationActionMods) WithNewModeratorPseudonymPseudonym(mods ...PseudonymMod) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithModeratorPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m moderationActionMods) WithoutModeratorPseudonymPseudonym() ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.ModeratorPseudonymPseudonym = nil
	})
}

func (m moderationActionMods) WithModeratorUserUser(rel *UserTemplate) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.ModeratorUserUser = &moderationActionRModeratorUserUserR{
			o: rel,
		}
	})
}

func (m moderationActionMods) WithNewModeratorUserUser(mods ...UserMod) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithModeratorUserUser(related).Apply(ctx, o)
	})
}

func (m moderationActionMods) WithoutModeratorUserUser() ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.ModeratorUserUser = nil
	})
}

func (m moderationActionMods) WithSubforum(rel *SubforumTemplate) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.Subforum = &moderationActionRSubforumR{
			o: rel,
		}
	})
}

func (m moderationActionMods) WithNewSubforum(mods ...SubforumMod) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		related := o.f.NewSubforum(ctx, mods...)

		m.WithSubforum(related).Apply(ctx, o)
	})
}

func (m moderationActionMods) WithoutSubforum() ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.Subforum = nil
	})
}

func (m moderationActionMods) WithTargetUserUser(rel *UserTemplate) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.TargetUserUser = &moderationActionRTargetUserUserR{
			o: rel,
		}
	})
}

func (m moderationActionMods) WithNewTargetUserUser(mods ...UserMod) ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithTargetUserUser(related).Apply(ctx, o)
	})
}

func (m moderationActionMods) WithoutTargetUserUser() ModerationActionMod {
	return ModerationActionModFunc(func(ctx context.Context, o *ModerationActionTemplate) {
		o.r.TargetUserUser = nil
	})
}
