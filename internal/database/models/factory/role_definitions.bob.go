// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"encoding/json"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type RoleDefinitionMod interface {
	Apply(context.Context, *RoleDefinitionTemplate)
}

type RoleDefinitionModFunc func(context.Context, *RoleDefinitionTemplate)

func (f RoleDefinitionModFunc) Apply(ctx context.Context, n *RoleDefinitionTemplate) {
	f(ctx, n)
}

type RoleDefinitionModSlice []RoleDefinitionMod

func (mods RoleDefinitionModSlice) Apply(ctx context.Context, n *RoleDefinitionTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// RoleDefinitionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type RoleDefinitionTemplate struct {
	RoleID            func() int32
	RoleName          func() string
	DisplayName       func() string
	Description       func() sql.Null[string]
	Capabilities      func() types.JSON[json.RawMessage]
	CorrelationAccess func() sql.Null[string]
	Scope             func() sql.Null[string]
	TimeWindow        func() sql.Null[string]
	CreatedAt         func() sql.Null[time.Time]

	f *Factory
}

// Apply mods to the RoleDefinitionTemplate
func (o *RoleDefinitionTemplate) Apply(ctx context.Context, mods ...RoleDefinitionMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.RoleDefinition
// according to the relationships in the template. Nothing is inserted into the db
func (t RoleDefinitionTemplate) setModelRels(o *models.RoleDefinition) {}

// BuildSetter returns an *models.RoleDefinitionSetter
// this does nothing with the relationship templates
func (o RoleDefinitionTemplate) BuildSetter() *models.RoleDefinitionSetter {
	m := &models.RoleDefinitionSetter{}

	if o.RoleID != nil {
		val := o.RoleID()
		m.RoleID = &val
	}
	if o.RoleName != nil {
		val := o.RoleName()
		m.RoleName = &val
	}
	if o.DisplayName != nil {
		val := o.DisplayName()
		m.DisplayName = &val
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = &val
	}
	if o.Capabilities != nil {
		val := o.Capabilities()
		m.Capabilities = &val
	}
	if o.CorrelationAccess != nil {
		val := o.CorrelationAccess()
		m.CorrelationAccess = &val
	}
	if o.Scope != nil {
		val := o.Scope()
		m.Scope = &val
	}
	if o.TimeWindow != nil {
		val := o.TimeWindow()
		m.TimeWindow = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.RoleDefinitionSetter
// this does nothing with the relationship templates
func (o RoleDefinitionTemplate) BuildManySetter(number int) []*models.RoleDefinitionSetter {
	m := make([]*models.RoleDefinitionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.RoleDefinition
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RoleDefinitionTemplate.Create
func (o RoleDefinitionTemplate) Build() *models.RoleDefinition {
	m := &models.RoleDefinition{}

	if o.RoleID != nil {
		m.RoleID = o.RoleID()
	}
	if o.RoleName != nil {
		m.RoleName = o.RoleName()
	}
	if o.DisplayName != nil {
		m.DisplayName = o.DisplayName()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Capabilities != nil {
		m.Capabilities = o.Capabilities()
	}
	if o.CorrelationAccess != nil {
		m.CorrelationAccess = o.CorrelationAccess()
	}
	if o.Scope != nil {
		m.Scope = o.Scope()
	}
	if o.TimeWindow != nil {
		m.TimeWindow = o.TimeWindow()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.RoleDefinitionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RoleDefinitionTemplate.CreateMany
func (o RoleDefinitionTemplate) BuildMany(number int) models.RoleDefinitionSlice {
	m := make(models.RoleDefinitionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableRoleDefinition(m *models.RoleDefinitionSetter) {
	if m.RoleName == nil {
		val := random_string(nil, "50")
		m.RoleName = &val
	}
	if m.DisplayName == nil {
		val := random_string(nil, "100")
		m.DisplayName = &val
	}
	if m.Capabilities == nil {
		val := random_types_JSON_json_RawMessage_(nil)
		m.Capabilities = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.RoleDefinition
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *RoleDefinitionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.RoleDefinition) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a roleDefinition and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *RoleDefinitionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.RoleDefinition, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a roleDefinition and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *RoleDefinitionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.RoleDefinition {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a roleDefinition and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *RoleDefinitionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.RoleDefinition {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a roleDefinition and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *RoleDefinitionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.RoleDefinition, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableRoleDefinition(opt)

	m, err := models.RoleDefinitions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = roleDefinitionCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple roleDefinitions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o RoleDefinitionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.RoleDefinitionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple roleDefinitions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o RoleDefinitionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.RoleDefinitionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple roleDefinitions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o RoleDefinitionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.RoleDefinitionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple roleDefinitions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o RoleDefinitionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.RoleDefinitionSlice, error) {
	var err error
	m := make(models.RoleDefinitionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// RoleDefinition has methods that act as mods for the RoleDefinitionTemplate
var RoleDefinitionMods roleDefinitionMods

type roleDefinitionMods struct{}

func (m roleDefinitionMods) RandomizeAllColumns(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModSlice{
		RoleDefinitionMods.RandomRoleID(f),
		RoleDefinitionMods.RandomRoleName(f),
		RoleDefinitionMods.RandomDisplayName(f),
		RoleDefinitionMods.RandomDescription(f),
		RoleDefinitionMods.RandomCapabilities(f),
		RoleDefinitionMods.RandomCorrelationAccess(f),
		RoleDefinitionMods.RandomScope(f),
		RoleDefinitionMods.RandomTimeWindow(f),
		RoleDefinitionMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m roleDefinitionMods) RoleID(val int32) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) RoleIDFunc(f func() int32) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleID = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetRoleID() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleDefinitionMods) RandomRoleID(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) RoleName(val string) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleName = func() string { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) RoleNameFunc(f func() string) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleName = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetRoleName() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleDefinitionMods) RandomRoleName(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.RoleName = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) DisplayName(val string) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.DisplayName = func() string { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) DisplayNameFunc(f func() string) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.DisplayName = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetDisplayName() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.DisplayName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleDefinitionMods) RandomDisplayName(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.DisplayName = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) Description(val sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Description = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) DescriptionFunc(f func() sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetDescription() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m roleDefinitionMods) RandomDescription(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Description = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m roleDefinitionMods) RandomDescriptionNotNull(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Description = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) Capabilities(val types.JSON[json.RawMessage]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Capabilities = func() types.JSON[json.RawMessage] { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) CapabilitiesFunc(f func() types.JSON[json.RawMessage]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Capabilities = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetCapabilities() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Capabilities = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleDefinitionMods) RandomCapabilities(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Capabilities = func() types.JSON[json.RawMessage] {
			return random_types_JSON_json_RawMessage_(f)
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) CorrelationAccess(val sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CorrelationAccess = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) CorrelationAccessFunc(f func() sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CorrelationAccess = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetCorrelationAccess() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CorrelationAccess = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m roleDefinitionMods) RandomCorrelationAccess(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CorrelationAccess = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m roleDefinitionMods) RandomCorrelationAccessNotNull(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CorrelationAccess = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) Scope(val sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Scope = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) ScopeFunc(f func() sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Scope = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetScope() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Scope = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m roleDefinitionMods) RandomScope(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Scope = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m roleDefinitionMods) RandomScopeNotNull(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.Scope = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) TimeWindow(val sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.TimeWindow = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) TimeWindowFunc(f func() sql.Null[string]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.TimeWindow = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetTimeWindow() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.TimeWindow = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m roleDefinitionMods) RandomTimeWindow(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.TimeWindow = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m roleDefinitionMods) RandomTimeWindowNotNull(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.TimeWindow = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "20")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m roleDefinitionMods) CreatedAt(val sql.Null[time.Time]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m roleDefinitionMods) CreatedAtFunc(f func() sql.Null[time.Time]) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m roleDefinitionMods) UnsetCreatedAt() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m roleDefinitionMods) RandomCreatedAt(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m roleDefinitionMods) RandomCreatedAtNotNull(f *faker.Faker) RoleDefinitionMod {
	return RoleDefinitionModFunc(func(_ context.Context, o *RoleDefinitionTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m roleDefinitionMods) WithParentsCascading() RoleDefinitionMod {
	return RoleDefinitionModFunc(func(ctx context.Context, o *RoleDefinitionTemplate) {
		if isDone, _ := roleDefinitionWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = roleDefinitionWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
