// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type ComplianceCorrelationMod interface {
	Apply(context.Context, *ComplianceCorrelationTemplate)
}

type ComplianceCorrelationModFunc func(context.Context, *ComplianceCorrelationTemplate)

func (f ComplianceCorrelationModFunc) Apply(ctx context.Context, n *ComplianceCorrelationTemplate) {
	f(ctx, n)
}

type ComplianceCorrelationModSlice []ComplianceCorrelationMod

func (mods ComplianceCorrelationModSlice) Apply(ctx context.Context, n *ComplianceCorrelationTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// ComplianceCorrelationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ComplianceCorrelationTemplate struct {
	CorrelationID    func() uuid.UUID
	ReportID         func() uuid.UUID
	AuditID          func() uuid.UUID
	CorrelationScope func() string
	CreatedAt        func() sql.Null[time.Time]

	r complianceCorrelationR
	f *Factory
}

type complianceCorrelationR struct {
	AuditCorrelationAudit  *complianceCorrelationRAuditCorrelationAuditR
	ReportComplianceReport *complianceCorrelationRReportComplianceReportR
}

type complianceCorrelationRAuditCorrelationAuditR struct {
	o *CorrelationAuditTemplate
}
type complianceCorrelationRReportComplianceReportR struct {
	o *ComplianceReportTemplate
}

// Apply mods to the ComplianceCorrelationTemplate
func (o *ComplianceCorrelationTemplate) Apply(ctx context.Context, mods ...ComplianceCorrelationMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.ComplianceCorrelation
// according to the relationships in the template. Nothing is inserted into the db
func (t ComplianceCorrelationTemplate) setModelRels(o *models.ComplianceCorrelation) {
	if t.r.AuditCorrelationAudit != nil {
		rel := t.r.AuditCorrelationAudit.o.Build()
		rel.R.AuditComplianceCorrelations = append(rel.R.AuditComplianceCorrelations, o)
		o.AuditID = rel.AuditID // h2
		o.R.AuditCorrelationAudit = rel
	}

	if t.r.ReportComplianceReport != nil {
		rel := t.r.ReportComplianceReport.o.Build()
		rel.R.ReportComplianceCorrelations = append(rel.R.ReportComplianceCorrelations, o)
		o.ReportID = rel.ReportID // h2
		o.R.ReportComplianceReport = rel
	}
}

// BuildSetter returns an *models.ComplianceCorrelationSetter
// this does nothing with the relationship templates
func (o ComplianceCorrelationTemplate) BuildSetter() *models.ComplianceCorrelationSetter {
	m := &models.ComplianceCorrelationSetter{}

	if o.CorrelationID != nil {
		val := o.CorrelationID()
		m.CorrelationID = &val
	}
	if o.ReportID != nil {
		val := o.ReportID()
		m.ReportID = &val
	}
	if o.AuditID != nil {
		val := o.AuditID()
		m.AuditID = &val
	}
	if o.CorrelationScope != nil {
		val := o.CorrelationScope()
		m.CorrelationScope = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.ComplianceCorrelationSetter
// this does nothing with the relationship templates
func (o ComplianceCorrelationTemplate) BuildManySetter(number int) []*models.ComplianceCorrelationSetter {
	m := make([]*models.ComplianceCorrelationSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.ComplianceCorrelation
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ComplianceCorrelationTemplate.Create
func (o ComplianceCorrelationTemplate) Build() *models.ComplianceCorrelation {
	m := &models.ComplianceCorrelation{}

	if o.CorrelationID != nil {
		m.CorrelationID = o.CorrelationID()
	}
	if o.ReportID != nil {
		m.ReportID = o.ReportID()
	}
	if o.AuditID != nil {
		m.AuditID = o.AuditID()
	}
	if o.CorrelationScope != nil {
		m.CorrelationScope = o.CorrelationScope()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ComplianceCorrelationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ComplianceCorrelationTemplate.CreateMany
func (o ComplianceCorrelationTemplate) BuildMany(number int) models.ComplianceCorrelationSlice {
	m := make(models.ComplianceCorrelationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableComplianceCorrelation(m *models.ComplianceCorrelationSetter) {
	if m.ReportID == nil {
		val := random_uuid_UUID(nil)
		m.ReportID = &val
	}
	if m.AuditID == nil {
		val := random_uuid_UUID(nil)
		m.AuditID = &val
	}
	if m.CorrelationScope == nil {
		val := random_string(nil)
		m.CorrelationScope = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.ComplianceCorrelation
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ComplianceCorrelationTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.ComplianceCorrelation) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a complianceCorrelation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ComplianceCorrelationTemplate) Create(ctx context.Context, exec bob.Executor) (*models.ComplianceCorrelation, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a complianceCorrelation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ComplianceCorrelationTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.ComplianceCorrelation {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a complianceCorrelation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ComplianceCorrelationTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.ComplianceCorrelation {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a complianceCorrelation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ComplianceCorrelationTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.ComplianceCorrelation, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableComplianceCorrelation(opt)

	if o.r.AuditCorrelationAudit == nil {
		ComplianceCorrelationMods.WithNewAuditCorrelationAudit().Apply(ctx, o)
	}

	rel0, ok := correlationAuditCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.AuditCorrelationAudit.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.AuditID = &rel0.AuditID

	if o.r.ReportComplianceReport == nil {
		ComplianceCorrelationMods.WithNewReportComplianceReport().Apply(ctx, o)
	}

	rel1, ok := complianceReportCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.ReportComplianceReport.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.ReportID = &rel1.ReportID

	m, err := models.ComplianceCorrelations.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = complianceCorrelationCtx.WithValue(ctx, m)

	m.R.AuditCorrelationAudit = rel0
	m.R.ReportComplianceReport = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple complianceCorrelations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ComplianceCorrelationTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ComplianceCorrelationSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple complianceCorrelations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ComplianceCorrelationTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ComplianceCorrelationSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple complianceCorrelations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ComplianceCorrelationTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ComplianceCorrelationSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple complianceCorrelations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ComplianceCorrelationTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ComplianceCorrelationSlice, error) {
	var err error
	m := make(models.ComplianceCorrelationSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// ComplianceCorrelation has methods that act as mods for the ComplianceCorrelationTemplate
var ComplianceCorrelationMods complianceCorrelationMods

type complianceCorrelationMods struct{}

func (m complianceCorrelationMods) RandomizeAllColumns(f *faker.Faker) ComplianceCorrelationMod {
	return ComplianceCorrelationModSlice{
		ComplianceCorrelationMods.RandomCorrelationID(f),
		ComplianceCorrelationMods.RandomReportID(f),
		ComplianceCorrelationMods.RandomAuditID(f),
		ComplianceCorrelationMods.RandomCorrelationScope(f),
		ComplianceCorrelationMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m complianceCorrelationMods) CorrelationID(val uuid.UUID) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m complianceCorrelationMods) CorrelationIDFunc(f func() uuid.UUID) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationID = f
	})
}

// Clear any values for the column
func (m complianceCorrelationMods) UnsetCorrelationID() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceCorrelationMods) RandomCorrelationID(f *faker.Faker) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m complianceCorrelationMods) ReportID(val uuid.UUID) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.ReportID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m complianceCorrelationMods) ReportIDFunc(f func() uuid.UUID) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.ReportID = f
	})
}

// Clear any values for the column
func (m complianceCorrelationMods) UnsetReportID() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.ReportID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceCorrelationMods) RandomReportID(f *faker.Faker) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.ReportID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m complianceCorrelationMods) AuditID(val uuid.UUID) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.AuditID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m complianceCorrelationMods) AuditIDFunc(f func() uuid.UUID) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.AuditID = f
	})
}

// Clear any values for the column
func (m complianceCorrelationMods) UnsetAuditID() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.AuditID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceCorrelationMods) RandomAuditID(f *faker.Faker) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.AuditID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m complianceCorrelationMods) CorrelationScope(val string) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationScope = func() string { return val }
	})
}

// Set the Column from the function
func (m complianceCorrelationMods) CorrelationScopeFunc(f func() string) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationScope = f
	})
}

// Clear any values for the column
func (m complianceCorrelationMods) UnsetCorrelationScope() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationScope = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m complianceCorrelationMods) RandomCorrelationScope(f *faker.Faker) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CorrelationScope = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m complianceCorrelationMods) CreatedAt(val sql.Null[time.Time]) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m complianceCorrelationMods) CreatedAtFunc(f func() sql.Null[time.Time]) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m complianceCorrelationMods) UnsetCreatedAt() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m complianceCorrelationMods) RandomCreatedAt(f *faker.Faker) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m complianceCorrelationMods) RandomCreatedAtNotNull(f *faker.Faker) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(_ context.Context, o *ComplianceCorrelationTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m complianceCorrelationMods) WithParentsCascading() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(ctx context.Context, o *ComplianceCorrelationTemplate) {
		if isDone, _ := complianceCorrelationWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = complianceCorrelationWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewCorrelationAudit(ctx, CorrelationAuditMods.WithParentsCascading())
			m.WithAuditCorrelationAudit(related).Apply(ctx, o)
		}
		{

			related := o.f.NewComplianceReport(ctx, ComplianceReportMods.WithParentsCascading())
			m.WithReportComplianceReport(related).Apply(ctx, o)
		}
	})
}

func (m complianceCorrelationMods) WithAuditCorrelationAudit(rel *CorrelationAuditTemplate) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(ctx context.Context, o *ComplianceCorrelationTemplate) {
		o.r.AuditCorrelationAudit = &complianceCorrelationRAuditCorrelationAuditR{
			o: rel,
		}
	})
}

func (m complianceCorrelationMods) WithNewAuditCorrelationAudit(mods ...CorrelationAuditMod) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(ctx context.Context, o *ComplianceCorrelationTemplate) {
		related := o.f.NewCorrelationAudit(ctx, mods...)

		m.WithAuditCorrelationAudit(related).Apply(ctx, o)
	})
}

func (m complianceCorrelationMods) WithoutAuditCorrelationAudit() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(ctx context.Context, o *ComplianceCorrelationTemplate) {
		o.r.AuditCorrelationAudit = nil
	})
}

func (m complianceCorrelationMods) WithReportComplianceReport(rel *ComplianceReportTemplate) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(ctx context.Context, o *ComplianceCorrelationTemplate) {
		o.r.ReportComplianceReport = &complianceCorrelationRReportComplianceReportR{
			o: rel,
		}
	})
}

func (m complianceCorrelationMods) WithNewReportComplianceReport(mods ...ComplianceReportMod) ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(ctx context.Context, o *ComplianceCorrelationTemplate) {
		related := o.f.NewComplianceReport(ctx, mods...)

		m.WithReportComplianceReport(related).Apply(ctx, o)
	})
}

func (m complianceCorrelationMods) WithoutReportComplianceReport() ComplianceCorrelationMod {
	return ComplianceCorrelationModFunc(func(ctx context.Context, o *ComplianceCorrelationTemplate) {
		o.r.ReportComplianceReport = nil
	})
}
