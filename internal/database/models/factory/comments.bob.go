// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type CommentMod interface {
	Apply(context.Context, *CommentTemplate)
}

type CommentModFunc func(context.Context, *CommentTemplate)

func (f CommentModFunc) Apply(ctx context.Context, n *CommentTemplate) {
	f(ctx, n)
}

type CommentModSlice []CommentMod

func (mods CommentModSlice) Apply(ctx context.Context, n *CommentTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// CommentTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CommentTemplate struct {
	CommentID            func() int64
	PostID               func() int64
	ParentCommentID      func() sql.Null[int64]
	Content              func() string
	CreatedAt            func() sql.Null[time.Time]
	UpdatedAt            func() sql.Null[time.Time]
	Score                func() sql.Null[int32]
	Upvotes              func() sql.Null[int32]
	Downvotes            func() sql.Null[int32]
	IsEdited             func() sql.Null[bool]
	EditedAt             func() sql.Null[time.Time]
	EditReason           func() sql.Null[string]
	IsRemoved            func() sql.Null[bool]
	RemovedByUserID      func() sql.Null[int64]
	RemovedByPseudonymID func() sql.Null[string]
	RemovalReason        func() sql.Null[string]
	RemovedAt            func() sql.Null[time.Time]
	PseudonymID          func() string

	r commentR
	f *Factory
}

type commentR struct {
	Comment                     *commentRCommentR
	ReverseComments             []*commentRReverseCommentsR
	Post                        *commentRPostR
	Pseudonym                   *commentRPseudonymR
	RemovedByPseudonymPseudonym *commentRRemovedByPseudonymPseudonymR
	RemovedByUserUser           *commentRRemovedByUserUserR
}

type commentRCommentR struct {
	o *CommentTemplate
}
type commentRReverseCommentsR struct {
	number int
	o      *CommentTemplate
}
type commentRPostR struct {
	o *PostTemplate
}
type commentRPseudonymR struct {
	o *PseudonymTemplate
}
type commentRRemovedByPseudonymPseudonymR struct {
	o *PseudonymTemplate
}
type commentRRemovedByUserUserR struct {
	o *UserTemplate
}

// Apply mods to the CommentTemplate
func (o *CommentTemplate) Apply(ctx context.Context, mods ...CommentMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Comment
// according to the relationships in the template. Nothing is inserted into the db
func (t CommentTemplate) setModelRels(o *models.Comment) {
	if t.r.Comment != nil {
		rel := t.r.Comment.o.Build()
		rel.R.Comment = o
		o.ParentCommentID = sql.Null[int64]{V: rel.CommentID, Valid: true} // h2
		o.R.Comment = rel
	}

	if t.r.ReverseComments != nil {
		rel := models.CommentSlice{}
		for _, r := range t.r.ReverseComments {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ParentCommentID = sql.Null[int64]{V: o.CommentID, Valid: true} // h2
				rel.R.ReverseComments = append(rel.R.ReverseComments, o)
			}
			rel = append(rel, related...)
		}
		o.R.ReverseComments = rel
	}

	if t.r.Post != nil {
		rel := t.r.Post.o.Build()
		rel.R.Comments = append(rel.R.Comments, o)
		o.PostID = rel.PostID // h2
		o.R.Post = rel
	}

	if t.r.Pseudonym != nil {
		rel := t.r.Pseudonym.o.Build()
		rel.R.Comments = append(rel.R.Comments, o)
		o.PseudonymID = rel.PseudonymID // h2
		o.R.Pseudonym = rel
	}

	if t.r.RemovedByPseudonymPseudonym != nil {
		rel := t.r.RemovedByPseudonymPseudonym.o.Build()
		rel.R.RemovedByPseudonymComments = append(rel.R.RemovedByPseudonymComments, o)
		o.RemovedByPseudonymID = sql.Null[string]{V: rel.PseudonymID, Valid: true} // h2
		o.R.RemovedByPseudonymPseudonym = rel
	}

	if t.r.RemovedByUserUser != nil {
		rel := t.r.RemovedByUserUser.o.Build()
		rel.R.RemovedByUserComments = append(rel.R.RemovedByUserComments, o)
		o.RemovedByUserID = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.RemovedByUserUser = rel
	}
}

// BuildSetter returns an *models.CommentSetter
// this does nothing with the relationship templates
func (o CommentTemplate) BuildSetter() *models.CommentSetter {
	m := &models.CommentSetter{}

	if o.CommentID != nil {
		val := o.CommentID()
		m.CommentID = &val
	}
	if o.PostID != nil {
		val := o.PostID()
		m.PostID = &val
	}
	if o.ParentCommentID != nil {
		val := o.ParentCommentID()
		m.ParentCommentID = &val
	}
	if o.Content != nil {
		val := o.Content()
		m.Content = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}
	if o.Score != nil {
		val := o.Score()
		m.Score = &val
	}
	if o.Upvotes != nil {
		val := o.Upvotes()
		m.Upvotes = &val
	}
	if o.Downvotes != nil {
		val := o.Downvotes()
		m.Downvotes = &val
	}
	if o.IsEdited != nil {
		val := o.IsEdited()
		m.IsEdited = &val
	}
	if o.EditedAt != nil {
		val := o.EditedAt()
		m.EditedAt = &val
	}
	if o.EditReason != nil {
		val := o.EditReason()
		m.EditReason = &val
	}
	if o.IsRemoved != nil {
		val := o.IsRemoved()
		m.IsRemoved = &val
	}
	if o.RemovedByUserID != nil {
		val := o.RemovedByUserID()
		m.RemovedByUserID = &val
	}
	if o.RemovedByPseudonymID != nil {
		val := o.RemovedByPseudonymID()
		m.RemovedByPseudonymID = &val
	}
	if o.RemovalReason != nil {
		val := o.RemovalReason()
		m.RemovalReason = &val
	}
	if o.RemovedAt != nil {
		val := o.RemovedAt()
		m.RemovedAt = &val
	}
	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}

	return m
}

// BuildManySetter returns an []*models.CommentSetter
// this does nothing with the relationship templates
func (o CommentTemplate) BuildManySetter(number int) []*models.CommentSetter {
	m := make([]*models.CommentSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Comment
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CommentTemplate.Create
func (o CommentTemplate) Build() *models.Comment {
	m := &models.Comment{}

	if o.CommentID != nil {
		m.CommentID = o.CommentID()
	}
	if o.PostID != nil {
		m.PostID = o.PostID()
	}
	if o.ParentCommentID != nil {
		m.ParentCommentID = o.ParentCommentID()
	}
	if o.Content != nil {
		m.Content = o.Content()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.Score != nil {
		m.Score = o.Score()
	}
	if o.Upvotes != nil {
		m.Upvotes = o.Upvotes()
	}
	if o.Downvotes != nil {
		m.Downvotes = o.Downvotes()
	}
	if o.IsEdited != nil {
		m.IsEdited = o.IsEdited()
	}
	if o.EditedAt != nil {
		m.EditedAt = o.EditedAt()
	}
	if o.EditReason != nil {
		m.EditReason = o.EditReason()
	}
	if o.IsRemoved != nil {
		m.IsRemoved = o.IsRemoved()
	}
	if o.RemovedByUserID != nil {
		m.RemovedByUserID = o.RemovedByUserID()
	}
	if o.RemovedByPseudonymID != nil {
		m.RemovedByPseudonymID = o.RemovedByPseudonymID()
	}
	if o.RemovalReason != nil {
		m.RemovalReason = o.RemovalReason()
	}
	if o.RemovedAt != nil {
		m.RemovedAt = o.RemovedAt()
	}
	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CommentSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CommentTemplate.CreateMany
func (o CommentTemplate) BuildMany(number int) models.CommentSlice {
	m := make(models.CommentSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableComment(m *models.CommentSetter) {
	if m.PostID == nil {
		val := random_int64(nil)
		m.PostID = &val
	}
	if m.Content == nil {
		val := random_string(nil)
		m.Content = &val
	}
	if m.PseudonymID == nil {
		val := random_string(nil, "64")
		m.PseudonymID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Comment
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CommentTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Comment) (context.Context, error) {
	var err error

	isCommentDone, _ := commentRelCommentCtx.Value(ctx)
	if !isCommentDone && o.r.Comment != nil {
		ctx = commentRelCommentCtx.WithValue(ctx, true)
		var rel0 *models.Comment
		ctx, rel0, err = o.r.Comment.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachComment(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}

	}

	isReverseCommentsDone, _ := commentRelReverseCommentsCtx.Value(ctx)
	if !isReverseCommentsDone && o.r.ReverseComments != nil {
		ctx = commentRelReverseCommentsCtx.WithValue(ctx, true)
		for _, r := range o.r.ReverseComments {
			var rel1 models.CommentSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachReverseComments(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isRemovedByPseudonymPseudonymDone, _ := commentRelRemovedByPseudonymPseudonymCtx.Value(ctx)
	if !isRemovedByPseudonymPseudonymDone && o.r.RemovedByPseudonymPseudonym != nil {
		ctx = commentRelRemovedByPseudonymPseudonymCtx.WithValue(ctx, true)
		var rel4 *models.Pseudonym
		ctx, rel4, err = o.r.RemovedByPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachRemovedByPseudonymPseudonym(ctx, exec, rel4)
		if err != nil {
			return ctx, err
		}

	}

	isRemovedByUserUserDone, _ := commentRelRemovedByUserUserCtx.Value(ctx)
	if !isRemovedByUserUserDone && o.r.RemovedByUserUser != nil {
		ctx = commentRelRemovedByUserUserCtx.WithValue(ctx, true)
		var rel5 *models.User
		ctx, rel5, err = o.r.RemovedByUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachRemovedByUserUser(ctx, exec, rel5)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a comment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CommentTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Comment, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a comment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CommentTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Comment {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a comment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CommentTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Comment {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a comment and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CommentTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Comment, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableComment(opt)

	if o.r.Post == nil {
		CommentMods.WithNewPost().Apply(ctx, o)
	}

	rel2, ok := postCtx.Value(ctx)
	if !ok {
		ctx, rel2, err = o.r.Post.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PostID = &rel2.PostID

	if o.r.Pseudonym == nil {
		CommentMods.WithNewPseudonym().Apply(ctx, o)
	}

	rel3, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel3, err = o.r.Pseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PseudonymID = &rel3.PseudonymID

	m, err := models.Comments.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = commentCtx.WithValue(ctx, m)

	m.R.Post = rel2
	m.R.Pseudonym = rel3

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple comments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CommentTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CommentSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple comments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CommentTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CommentSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple comments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CommentTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CommentSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple comments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CommentTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CommentSlice, error) {
	var err error
	m := make(models.CommentSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Comment has methods that act as mods for the CommentTemplate
var CommentMods commentMods

type commentMods struct{}

func (m commentMods) RandomizeAllColumns(f *faker.Faker) CommentMod {
	return CommentModSlice{
		CommentMods.RandomCommentID(f),
		CommentMods.RandomPostID(f),
		CommentMods.RandomParentCommentID(f),
		CommentMods.RandomContent(f),
		CommentMods.RandomCreatedAt(f),
		CommentMods.RandomUpdatedAt(f),
		CommentMods.RandomScore(f),
		CommentMods.RandomUpvotes(f),
		CommentMods.RandomDownvotes(f),
		CommentMods.RandomIsEdited(f),
		CommentMods.RandomEditedAt(f),
		CommentMods.RandomEditReason(f),
		CommentMods.RandomIsRemoved(f),
		CommentMods.RandomRemovedByUserID(f),
		CommentMods.RandomRemovedByPseudonymID(f),
		CommentMods.RandomRemovalReason(f),
		CommentMods.RandomRemovedAt(f),
		CommentMods.RandomPseudonymID(f),
	}
}

// Set the model columns to this value
func (m commentMods) CommentID(val int64) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CommentID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m commentMods) CommentIDFunc(f func() int64) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CommentID = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetCommentID() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CommentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m commentMods) RandomCommentID(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CommentID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m commentMods) PostID(val int64) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PostID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m commentMods) PostIDFunc(f func() int64) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PostID = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetPostID() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PostID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m commentMods) RandomPostID(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PostID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m commentMods) ParentCommentID(val sql.Null[int64]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.ParentCommentID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m commentMods) ParentCommentIDFunc(f func() sql.Null[int64]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.ParentCommentID = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetParentCommentID() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.ParentCommentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomParentCommentID(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.ParentCommentID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomParentCommentIDNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.ParentCommentID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) Content(val string) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Content = func() string { return val }
	})
}

// Set the Column from the function
func (m commentMods) ContentFunc(f func() string) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Content = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetContent() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Content = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m commentMods) RandomContent(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Content = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m commentMods) CreatedAt(val sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m commentMods) CreatedAtFunc(f func() sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetCreatedAt() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomCreatedAt(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomCreatedAtNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) UpdatedAt(val sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m commentMods) UpdatedAtFunc(f func() sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetUpdatedAt() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomUpdatedAt(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomUpdatedAtNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.UpdatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) Score(val sql.Null[int32]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Score = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m commentMods) ScoreFunc(f func() sql.Null[int32]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Score = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetScore() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Score = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomScore(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Score = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomScoreNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Score = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) Upvotes(val sql.Null[int32]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Upvotes = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m commentMods) UpvotesFunc(f func() sql.Null[int32]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Upvotes = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetUpvotes() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Upvotes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomUpvotes(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Upvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomUpvotesNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Upvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) Downvotes(val sql.Null[int32]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Downvotes = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m commentMods) DownvotesFunc(f func() sql.Null[int32]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Downvotes = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetDownvotes() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Downvotes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomDownvotes(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Downvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomDownvotesNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.Downvotes = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) IsEdited(val sql.Null[bool]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsEdited = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m commentMods) IsEditedFunc(f func() sql.Null[bool]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsEdited = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetIsEdited() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsEdited = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomIsEdited(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsEdited = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomIsEditedNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsEdited = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) EditedAt(val sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m commentMods) EditedAtFunc(f func() sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditedAt = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetEditedAt() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomEditedAt(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomEditedAtNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) EditReason(val sql.Null[string]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditReason = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m commentMods) EditReasonFunc(f func() sql.Null[string]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditReason = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetEditReason() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditReason = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomEditReason(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditReason = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomEditReasonNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.EditReason = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) IsRemoved(val sql.Null[bool]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsRemoved = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m commentMods) IsRemovedFunc(f func() sql.Null[bool]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsRemoved = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetIsRemoved() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsRemoved = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomIsRemoved(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsRemoved = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomIsRemovedNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.IsRemoved = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) RemovedByUserID(val sql.Null[int64]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByUserID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m commentMods) RemovedByUserIDFunc(f func() sql.Null[int64]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByUserID = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetRemovedByUserID() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomRemovedByUserID(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomRemovedByUserIDNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) RemovedByPseudonymID(val sql.Null[string]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByPseudonymID = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m commentMods) RemovedByPseudonymIDFunc(f func() sql.Null[string]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByPseudonymID = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetRemovedByPseudonymID() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomRemovedByPseudonymID(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomRemovedByPseudonymIDNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedByPseudonymID = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "64")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) RemovalReason(val sql.Null[string]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovalReason = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m commentMods) RemovalReasonFunc(f func() sql.Null[string]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovalReason = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetRemovalReason() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovalReason = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomRemovalReason(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovalReason = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomRemovalReasonNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovalReason = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) RemovedAt(val sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m commentMods) RemovedAtFunc(f func() sql.Null[time.Time]) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedAt = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetRemovedAt() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m commentMods) RandomRemovedAt(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m commentMods) RandomRemovedAtNotNull(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.RemovedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m commentMods) PseudonymID(val string) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m commentMods) PseudonymIDFunc(f func() string) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m commentMods) UnsetPseudonymID() CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m commentMods) RandomPseudonymID(f *faker.Faker) CommentMod {
	return CommentModFunc(func(_ context.Context, o *CommentTemplate) {
		o.PseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

func (m commentMods) WithParentsCascading() CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		if isDone, _ := commentWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = commentWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewComment(ctx, CommentMods.WithParentsCascading())
			m.WithComment(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPost(ctx, PostMods.WithParentsCascading())
			m.WithPost(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithRemovedByPseudonymPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithRemovedByUserUser(related).Apply(ctx, o)
		}
	})
}

func (m commentMods) WithComment(rel *CommentTemplate) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.Comment = &commentRCommentR{
			o: rel,
		}
	})
}

func (m commentMods) WithNewComment(mods ...CommentMod) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		related := o.f.NewComment(ctx, mods...)

		m.WithComment(related).Apply(ctx, o)
	})
}

func (m commentMods) WithoutComment() CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.Comment = nil
	})
}

func (m commentMods) WithPost(rel *PostTemplate) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.Post = &commentRPostR{
			o: rel,
		}
	})
}

func (m commentMods) WithNewPost(mods ...PostMod) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		related := o.f.NewPost(ctx, mods...)

		m.WithPost(related).Apply(ctx, o)
	})
}

func (m commentMods) WithoutPost() CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.Post = nil
	})
}

func (m commentMods) WithPseudonym(rel *PseudonymTemplate) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.Pseudonym = &commentRPseudonymR{
			o: rel,
		}
	})
}

func (m commentMods) WithNewPseudonym(mods ...PseudonymMod) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithPseudonym(related).Apply(ctx, o)
	})
}

func (m commentMods) WithoutPseudonym() CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.Pseudonym = nil
	})
}

func (m commentMods) WithRemovedByPseudonymPseudonym(rel *PseudonymTemplate) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.RemovedByPseudonymPseudonym = &commentRRemovedByPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m commentMods) WithNewRemovedByPseudonymPseudonym(mods ...PseudonymMod) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithRemovedByPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m commentMods) WithoutRemovedByPseudonymPseudonym() CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.RemovedByPseudonymPseudonym = nil
	})
}

func (m commentMods) WithRemovedByUserUser(rel *UserTemplate) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.RemovedByUserUser = &commentRRemovedByUserUserR{
			o: rel,
		}
	})
}

func (m commentMods) WithNewRemovedByUserUser(mods ...UserMod) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithRemovedByUserUser(related).Apply(ctx, o)
	})
}

func (m commentMods) WithoutRemovedByUserUser() CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.RemovedByUserUser = nil
	})
}

func (m commentMods) WithReverseComments(number int, related *CommentTemplate) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.ReverseComments = []*commentRReverseCommentsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m commentMods) WithNewReverseComments(number int, mods ...CommentMod) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.WithReverseComments(number, related).Apply(ctx, o)
	})
}

func (m commentMods) AddReverseComments(number int, related *CommentTemplate) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.ReverseComments = append(o.r.ReverseComments, &commentRReverseCommentsR{
			number: number,
			o:      related,
		})
	})
}

func (m commentMods) AddNewReverseComments(number int, mods ...CommentMod) CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		related := o.f.NewComment(ctx, mods...)
		m.AddReverseComments(number, related).Apply(ctx, o)
	})
}

func (m commentMods) WithoutReverseComments() CommentMod {
	return CommentModFunc(func(ctx context.Context, o *CommentTemplate) {
		o.r.ReverseComments = nil
	})
}
