// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"encoding/json"
	"testing"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type SystemEventMod interface {
	Apply(context.Context, *SystemEventTemplate)
}

type SystemEventModFunc func(context.Context, *SystemEventTemplate)

func (f SystemEventModFunc) Apply(ctx context.Context, n *SystemEventTemplate) {
	f(ctx, n)
}

type SystemEventModSlice []SystemEventMod

func (mods SystemEventModSlice) Apply(ctx context.Context, n *SystemEventTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// SystemEventTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type SystemEventTemplate struct {
	EventID         func() uuid.UUID
	EventType       func() string
	EventSeverity   func() string
	EventMessage    func() string
	EventData       func() sql.Null[types.JSON[json.RawMessage]]
	SourceComponent func() sql.Null[string]
	Timestamp       func() sql.Null[time.Time]

	f *Factory
}

// Apply mods to the SystemEventTemplate
func (o *SystemEventTemplate) Apply(ctx context.Context, mods ...SystemEventMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.SystemEvent
// according to the relationships in the template. Nothing is inserted into the db
func (t SystemEventTemplate) setModelRels(o *models.SystemEvent) {}

// BuildSetter returns an *models.SystemEventSetter
// this does nothing with the relationship templates
func (o SystemEventTemplate) BuildSetter() *models.SystemEventSetter {
	m := &models.SystemEventSetter{}

	if o.EventID != nil {
		val := o.EventID()
		m.EventID = &val
	}
	if o.EventType != nil {
		val := o.EventType()
		m.EventType = &val
	}
	if o.EventSeverity != nil {
		val := o.EventSeverity()
		m.EventSeverity = &val
	}
	if o.EventMessage != nil {
		val := o.EventMessage()
		m.EventMessage = &val
	}
	if o.EventData != nil {
		val := o.EventData()
		m.EventData = &val
	}
	if o.SourceComponent != nil {
		val := o.SourceComponent()
		m.SourceComponent = &val
	}
	if o.Timestamp != nil {
		val := o.Timestamp()
		m.Timestamp = &val
	}

	return m
}

// BuildManySetter returns an []*models.SystemEventSetter
// this does nothing with the relationship templates
func (o SystemEventTemplate) BuildManySetter(number int) []*models.SystemEventSetter {
	m := make([]*models.SystemEventSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.SystemEvent
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SystemEventTemplate.Create
func (o SystemEventTemplate) Build() *models.SystemEvent {
	m := &models.SystemEvent{}

	if o.EventID != nil {
		m.EventID = o.EventID()
	}
	if o.EventType != nil {
		m.EventType = o.EventType()
	}
	if o.EventSeverity != nil {
		m.EventSeverity = o.EventSeverity()
	}
	if o.EventMessage != nil {
		m.EventMessage = o.EventMessage()
	}
	if o.EventData != nil {
		m.EventData = o.EventData()
	}
	if o.SourceComponent != nil {
		m.SourceComponent = o.SourceComponent()
	}
	if o.Timestamp != nil {
		m.Timestamp = o.Timestamp()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.SystemEventSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SystemEventTemplate.CreateMany
func (o SystemEventTemplate) BuildMany(number int) models.SystemEventSlice {
	m := make(models.SystemEventSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableSystemEvent(m *models.SystemEventSetter) {
	if m.EventType == nil {
		val := random_string(nil, "50")
		m.EventType = &val
	}
	if m.EventSeverity == nil {
		val := random_string(nil, "20")
		m.EventSeverity = &val
	}
	if m.EventMessage == nil {
		val := random_string(nil)
		m.EventMessage = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.SystemEvent
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *SystemEventTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.SystemEvent) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a systemEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *SystemEventTemplate) Create(ctx context.Context, exec bob.Executor) (*models.SystemEvent, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a systemEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *SystemEventTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.SystemEvent {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a systemEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *SystemEventTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.SystemEvent {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a systemEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *SystemEventTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.SystemEvent, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableSystemEvent(opt)

	m, err := models.SystemEvents.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = systemEventCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple systemEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o SystemEventTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.SystemEventSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple systemEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o SystemEventTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.SystemEventSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple systemEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o SystemEventTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.SystemEventSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple systemEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o SystemEventTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.SystemEventSlice, error) {
	var err error
	m := make(models.SystemEventSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// SystemEvent has methods that act as mods for the SystemEventTemplate
var SystemEventMods systemEventMods

type systemEventMods struct{}

func (m systemEventMods) RandomizeAllColumns(f *faker.Faker) SystemEventMod {
	return SystemEventModSlice{
		SystemEventMods.RandomEventID(f),
		SystemEventMods.RandomEventType(f),
		SystemEventMods.RandomEventSeverity(f),
		SystemEventMods.RandomEventMessage(f),
		SystemEventMods.RandomEventData(f),
		SystemEventMods.RandomSourceComponent(f),
		SystemEventMods.RandomTimestamp(f),
	}
}

// Set the model columns to this value
func (m systemEventMods) EventID(val uuid.UUID) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m systemEventMods) EventIDFunc(f func() uuid.UUID) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventID = f
	})
}

// Clear any values for the column
func (m systemEventMods) UnsetEventID() SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m systemEventMods) RandomEventID(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m systemEventMods) EventType(val string) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventType = func() string { return val }
	})
}

// Set the Column from the function
func (m systemEventMods) EventTypeFunc(f func() string) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventType = f
	})
}

// Clear any values for the column
func (m systemEventMods) UnsetEventType() SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m systemEventMods) RandomEventType(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventType = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m systemEventMods) EventSeverity(val string) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventSeverity = func() string { return val }
	})
}

// Set the Column from the function
func (m systemEventMods) EventSeverityFunc(f func() string) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventSeverity = f
	})
}

// Clear any values for the column
func (m systemEventMods) UnsetEventSeverity() SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventSeverity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m systemEventMods) RandomEventSeverity(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventSeverity = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m systemEventMods) EventMessage(val string) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventMessage = func() string { return val }
	})
}

// Set the Column from the function
func (m systemEventMods) EventMessageFunc(f func() string) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventMessage = f
	})
}

// Clear any values for the column
func (m systemEventMods) UnsetEventMessage() SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventMessage = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m systemEventMods) RandomEventMessage(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventMessage = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m systemEventMods) EventData(val sql.Null[types.JSON[json.RawMessage]]) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventData = func() sql.Null[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m systemEventMods) EventDataFunc(f func() sql.Null[types.JSON[json.RawMessage]]) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventData = f
	})
}

// Clear any values for the column
func (m systemEventMods) UnsetEventData() SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventData = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m systemEventMods) RandomEventData(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventData = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m systemEventMods) RandomEventDataNotNull(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.EventData = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m systemEventMods) SourceComponent(val sql.Null[string]) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.SourceComponent = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m systemEventMods) SourceComponentFunc(f func() sql.Null[string]) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.SourceComponent = f
	})
}

// Clear any values for the column
func (m systemEventMods) UnsetSourceComponent() SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.SourceComponent = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m systemEventMods) RandomSourceComponent(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.SourceComponent = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m systemEventMods) RandomSourceComponentNotNull(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.SourceComponent = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "100")
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m systemEventMods) Timestamp(val sql.Null[time.Time]) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.Timestamp = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m systemEventMods) TimestampFunc(f func() sql.Null[time.Time]) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.Timestamp = f
	})
}

// Clear any values for the column
func (m systemEventMods) UnsetTimestamp() SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.Timestamp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m systemEventMods) RandomTimestamp(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m systemEventMods) RandomTimestampNotNull(f *faker.Faker) SystemEventMod {
	return SystemEventModFunc(func(_ context.Context, o *SystemEventTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m systemEventMods) WithParentsCascading() SystemEventMod {
	return SystemEventModFunc(func(ctx context.Context, o *SystemEventTemplate) {
		if isDone, _ := systemEventWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = systemEventWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
