// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
)

type DirectMessageMod interface {
	Apply(context.Context, *DirectMessageTemplate)
}

type DirectMessageModFunc func(context.Context, *DirectMessageTemplate)

func (f DirectMessageModFunc) Apply(ctx context.Context, n *DirectMessageTemplate) {
	f(ctx, n)
}

type DirectMessageModSlice []DirectMessageMod

func (mods DirectMessageModSlice) Apply(ctx context.Context, n *DirectMessageTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// DirectMessageTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type DirectMessageTemplate struct {
	MessageID            func() int64
	SenderPseudonymID    func() string
	RecipientPseudonymID func() string
	Content              func() string
	IsRead               func() sql.Null[bool]
	CreatedAt            func() sql.Null[time.Time]

	r directMessageR
	f *Factory
}

type directMessageR struct {
	RecipientPseudonymPseudonym *directMessageRRecipientPseudonymPseudonymR
	SenderPseudonymPseudonym    *directMessageRSenderPseudonymPseudonymR
}

type directMessageRRecipientPseudonymPseudonymR struct {
	o *PseudonymTemplate
}
type directMessageRSenderPseudonymPseudonymR struct {
	o *PseudonymTemplate
}

// Apply mods to the DirectMessageTemplate
func (o *DirectMessageTemplate) Apply(ctx context.Context, mods ...DirectMessageMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.DirectMessage
// according to the relationships in the template. Nothing is inserted into the db
func (t DirectMessageTemplate) setModelRels(o *models.DirectMessage) {
	if t.r.RecipientPseudonymPseudonym != nil {
		rel := t.r.RecipientPseudonymPseudonym.o.Build()
		rel.R.RecipientPseudonymDirectMessages = append(rel.R.RecipientPseudonymDirectMessages, o)
		o.RecipientPseudonymID = rel.PseudonymID // h2
		o.R.RecipientPseudonymPseudonym = rel
	}

	if t.r.SenderPseudonymPseudonym != nil {
		rel := t.r.SenderPseudonymPseudonym.o.Build()
		rel.R.SenderPseudonymDirectMessages = append(rel.R.SenderPseudonymDirectMessages, o)
		o.SenderPseudonymID = rel.PseudonymID // h2
		o.R.SenderPseudonymPseudonym = rel
	}
}

// BuildSetter returns an *models.DirectMessageSetter
// this does nothing with the relationship templates
func (o DirectMessageTemplate) BuildSetter() *models.DirectMessageSetter {
	m := &models.DirectMessageSetter{}

	if o.MessageID != nil {
		val := o.MessageID()
		m.MessageID = &val
	}
	if o.SenderPseudonymID != nil {
		val := o.SenderPseudonymID()
		m.SenderPseudonymID = &val
	}
	if o.RecipientPseudonymID != nil {
		val := o.RecipientPseudonymID()
		m.RecipientPseudonymID = &val
	}
	if o.Content != nil {
		val := o.Content()
		m.Content = &val
	}
	if o.IsRead != nil {
		val := o.IsRead()
		m.IsRead = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.DirectMessageSetter
// this does nothing with the relationship templates
func (o DirectMessageTemplate) BuildManySetter(number int) []*models.DirectMessageSetter {
	m := make([]*models.DirectMessageSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.DirectMessage
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DirectMessageTemplate.Create
func (o DirectMessageTemplate) Build() *models.DirectMessage {
	m := &models.DirectMessage{}

	if o.MessageID != nil {
		m.MessageID = o.MessageID()
	}
	if o.SenderPseudonymID != nil {
		m.SenderPseudonymID = o.SenderPseudonymID()
	}
	if o.RecipientPseudonymID != nil {
		m.RecipientPseudonymID = o.RecipientPseudonymID()
	}
	if o.Content != nil {
		m.Content = o.Content()
	}
	if o.IsRead != nil {
		m.IsRead = o.IsRead()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.DirectMessageSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DirectMessageTemplate.CreateMany
func (o DirectMessageTemplate) BuildMany(number int) models.DirectMessageSlice {
	m := make(models.DirectMessageSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableDirectMessage(m *models.DirectMessageSetter) {
	if m.SenderPseudonymID == nil {
		val := random_string(nil, "64")
		m.SenderPseudonymID = &val
	}
	if m.RecipientPseudonymID == nil {
		val := random_string(nil, "64")
		m.RecipientPseudonymID = &val
	}
	if m.Content == nil {
		val := random_string(nil)
		m.Content = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.DirectMessage
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *DirectMessageTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.DirectMessage) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a directMessage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *DirectMessageTemplate) Create(ctx context.Context, exec bob.Executor) (*models.DirectMessage, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a directMessage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *DirectMessageTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.DirectMessage {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a directMessage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *DirectMessageTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.DirectMessage {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a directMessage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *DirectMessageTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.DirectMessage, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableDirectMessage(opt)

	if o.r.RecipientPseudonymPseudonym == nil {
		DirectMessageMods.WithNewRecipientPseudonymPseudonym().Apply(ctx, o)
	}

	rel0, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.RecipientPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.RecipientPseudonymID = &rel0.PseudonymID

	if o.r.SenderPseudonymPseudonym == nil {
		DirectMessageMods.WithNewSenderPseudonymPseudonym().Apply(ctx, o)
	}

	rel1, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.SenderPseudonymPseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.SenderPseudonymID = &rel1.PseudonymID

	m, err := models.DirectMessages.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = directMessageCtx.WithValue(ctx, m)

	m.R.RecipientPseudonymPseudonym = rel0
	m.R.SenderPseudonymPseudonym = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple directMessages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o DirectMessageTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.DirectMessageSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple directMessages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o DirectMessageTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.DirectMessageSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple directMessages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o DirectMessageTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.DirectMessageSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple directMessages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o DirectMessageTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.DirectMessageSlice, error) {
	var err error
	m := make(models.DirectMessageSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// DirectMessage has methods that act as mods for the DirectMessageTemplate
var DirectMessageMods directMessageMods

type directMessageMods struct{}

func (m directMessageMods) RandomizeAllColumns(f *faker.Faker) DirectMessageMod {
	return DirectMessageModSlice{
		DirectMessageMods.RandomMessageID(f),
		DirectMessageMods.RandomSenderPseudonymID(f),
		DirectMessageMods.RandomRecipientPseudonymID(f),
		DirectMessageMods.RandomContent(f),
		DirectMessageMods.RandomIsRead(f),
		DirectMessageMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m directMessageMods) MessageID(val int64) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.MessageID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m directMessageMods) MessageIDFunc(f func() int64) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.MessageID = f
	})
}

// Clear any values for the column
func (m directMessageMods) UnsetMessageID() DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.MessageID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m directMessageMods) RandomMessageID(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.MessageID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m directMessageMods) SenderPseudonymID(val string) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.SenderPseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m directMessageMods) SenderPseudonymIDFunc(f func() string) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.SenderPseudonymID = f
	})
}

// Clear any values for the column
func (m directMessageMods) UnsetSenderPseudonymID() DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.SenderPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m directMessageMods) RandomSenderPseudonymID(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.SenderPseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m directMessageMods) RecipientPseudonymID(val string) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.RecipientPseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m directMessageMods) RecipientPseudonymIDFunc(f func() string) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.RecipientPseudonymID = f
	})
}

// Clear any values for the column
func (m directMessageMods) UnsetRecipientPseudonymID() DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.RecipientPseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m directMessageMods) RandomRecipientPseudonymID(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.RecipientPseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m directMessageMods) Content(val string) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.Content = func() string { return val }
	})
}

// Set the Column from the function
func (m directMessageMods) ContentFunc(f func() string) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.Content = f
	})
}

// Clear any values for the column
func (m directMessageMods) UnsetContent() DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.Content = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m directMessageMods) RandomContent(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.Content = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m directMessageMods) IsRead(val sql.Null[bool]) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.IsRead = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m directMessageMods) IsReadFunc(f func() sql.Null[bool]) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.IsRead = f
	})
}

// Clear any values for the column
func (m directMessageMods) UnsetIsRead() DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.IsRead = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m directMessageMods) RandomIsRead(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.IsRead = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m directMessageMods) RandomIsReadNotNull(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.IsRead = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m directMessageMods) CreatedAt(val sql.Null[time.Time]) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m directMessageMods) CreatedAtFunc(f func() sql.Null[time.Time]) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m directMessageMods) UnsetCreatedAt() DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m directMessageMods) RandomCreatedAt(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m directMessageMods) RandomCreatedAtNotNull(f *faker.Faker) DirectMessageMod {
	return DirectMessageModFunc(func(_ context.Context, o *DirectMessageTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m directMessageMods) WithParentsCascading() DirectMessageMod {
	return DirectMessageModFunc(func(ctx context.Context, o *DirectMessageTemplate) {
		if isDone, _ := directMessageWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = directMessageWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithRecipientPseudonymPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithSenderPseudonymPseudonym(related).Apply(ctx, o)
		}
	})
}

func (m directMessageMods) WithRecipientPseudonymPseudonym(rel *PseudonymTemplate) DirectMessageMod {
	return DirectMessageModFunc(func(ctx context.Context, o *DirectMessageTemplate) {
		o.r.RecipientPseudonymPseudonym = &directMessageRRecipientPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m directMessageMods) WithNewRecipientPseudonymPseudonym(mods ...PseudonymMod) DirectMessageMod {
	return DirectMessageModFunc(func(ctx context.Context, o *DirectMessageTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithRecipientPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m directMessageMods) WithoutRecipientPseudonymPseudonym() DirectMessageMod {
	return DirectMessageModFunc(func(ctx context.Context, o *DirectMessageTemplate) {
		o.r.RecipientPseudonymPseudonym = nil
	})
}

func (m directMessageMods) WithSenderPseudonymPseudonym(rel *PseudonymTemplate) DirectMessageMod {
	return DirectMessageModFunc(func(ctx context.Context, o *DirectMessageTemplate) {
		o.r.SenderPseudonymPseudonym = &directMessageRSenderPseudonymPseudonymR{
			o: rel,
		}
	})
}

func (m directMessageMods) WithNewSenderPseudonymPseudonym(mods ...PseudonymMod) DirectMessageMod {
	return DirectMessageModFunc(func(ctx context.Context, o *DirectMessageTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithSenderPseudonymPseudonym(related).Apply(ctx, o)
	})
}

func (m directMessageMods) WithoutSenderPseudonymPseudonym() DirectMessageMod {
	return DirectMessageModFunc(func(ctx context.Context, o *DirectMessageTemplate) {
		o.r.SenderPseudonymPseudonym = nil
	})
}
