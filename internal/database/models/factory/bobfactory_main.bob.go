// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import "context"

type Factory struct {
	baseAPIKeyMods                APIKeyModSlice
	baseCommentMods               CommentModSlice
	baseComplianceCorrelationMods ComplianceCorrelationModSlice
	baseComplianceReportMods      ComplianceReportModSlice
	baseCorrelationAuditMods      CorrelationAuditModSlice
	baseDirectMessageMods         DirectMessageModSlice
	baseIdentityMappingMods       IdentityMappingModSlice
	baseKeyUsageAuditMods         KeyUsageAuditModSlice
	baseMediaAttachmentMods       MediaAttachmentModSlice
	baseModerationActionMods      ModerationActionModSlice
	basePerformanceMetricMods     PerformanceMetricModSlice
	basePollVoteMods              PollVoteModSlice
	basePollMods                  PollModSlice
	basePostMods                  PostModSlice
	basePseudonymMods             PseudonymModSlice
	baseReportMods                ReportModSlice
	baseRoleDefinitionMods        RoleDefinitionModSlice
	baseRoleKeyMods               RoleKeyModSlice
	baseSchemaMigrationMods       SchemaMigrationModSlice
	baseSubforumModeratorMods     SubforumModeratorModSlice
	baseSubforumSubscriptionMods  SubforumSubscriptionModSlice
	baseSubforumMods              SubforumModSlice
	baseSystemEventMods           SystemEventModSlice
	baseSystemSettingMods         SystemSettingModSlice
	baseUserBanMods               UserBanModSlice
	baseUserBlockMods             UserBlockModSlice
	baseUserPreferenceMods        UserPreferenceModSlice
	baseUserMods                  UserModSlice
	baseVoteMods                  VoteModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewAPIKey(ctx context.Context, mods ...APIKeyMod) *APIKeyTemplate {
	o := &APIKeyTemplate{f: f}

	if f != nil {
		f.baseAPIKeyMods.Apply(ctx, o)
	}

	APIKeyModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewComment(ctx context.Context, mods ...CommentMod) *CommentTemplate {
	o := &CommentTemplate{f: f}

	if f != nil {
		f.baseCommentMods.Apply(ctx, o)
	}

	CommentModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewComplianceCorrelation(ctx context.Context, mods ...ComplianceCorrelationMod) *ComplianceCorrelationTemplate {
	o := &ComplianceCorrelationTemplate{f: f}

	if f != nil {
		f.baseComplianceCorrelationMods.Apply(ctx, o)
	}

	ComplianceCorrelationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewComplianceReport(ctx context.Context, mods ...ComplianceReportMod) *ComplianceReportTemplate {
	o := &ComplianceReportTemplate{f: f}

	if f != nil {
		f.baseComplianceReportMods.Apply(ctx, o)
	}

	ComplianceReportModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewCorrelationAudit(ctx context.Context, mods ...CorrelationAuditMod) *CorrelationAuditTemplate {
	o := &CorrelationAuditTemplate{f: f}

	if f != nil {
		f.baseCorrelationAuditMods.Apply(ctx, o)
	}

	CorrelationAuditModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewDirectMessage(ctx context.Context, mods ...DirectMessageMod) *DirectMessageTemplate {
	o := &DirectMessageTemplate{f: f}

	if f != nil {
		f.baseDirectMessageMods.Apply(ctx, o)
	}

	DirectMessageModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewIdentityMapping(ctx context.Context, mods ...IdentityMappingMod) *IdentityMappingTemplate {
	o := &IdentityMappingTemplate{f: f}

	if f != nil {
		f.baseIdentityMappingMods.Apply(ctx, o)
	}

	IdentityMappingModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewKeyUsageAudit(ctx context.Context, mods ...KeyUsageAuditMod) *KeyUsageAuditTemplate {
	o := &KeyUsageAuditTemplate{f: f}

	if f != nil {
		f.baseKeyUsageAuditMods.Apply(ctx, o)
	}

	KeyUsageAuditModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewMediaAttachment(ctx context.Context, mods ...MediaAttachmentMod) *MediaAttachmentTemplate {
	o := &MediaAttachmentTemplate{f: f}

	if f != nil {
		f.baseMediaAttachmentMods.Apply(ctx, o)
	}

	MediaAttachmentModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewModerationAction(ctx context.Context, mods ...ModerationActionMod) *ModerationActionTemplate {
	o := &ModerationActionTemplate{f: f}

	if f != nil {
		f.baseModerationActionMods.Apply(ctx, o)
	}

	ModerationActionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewPerformanceMetric(ctx context.Context, mods ...PerformanceMetricMod) *PerformanceMetricTemplate {
	o := &PerformanceMetricTemplate{f: f}

	if f != nil {
		f.basePerformanceMetricMods.Apply(ctx, o)
	}

	PerformanceMetricModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewPollVote(ctx context.Context, mods ...PollVoteMod) *PollVoteTemplate {
	o := &PollVoteTemplate{f: f}

	if f != nil {
		f.basePollVoteMods.Apply(ctx, o)
	}

	PollVoteModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewPoll(ctx context.Context, mods ...PollMod) *PollTemplate {
	o := &PollTemplate{f: f}

	if f != nil {
		f.basePollMods.Apply(ctx, o)
	}

	PollModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewPost(ctx context.Context, mods ...PostMod) *PostTemplate {
	o := &PostTemplate{f: f}

	if f != nil {
		f.basePostMods.Apply(ctx, o)
	}

	PostModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewPseudonym(ctx context.Context, mods ...PseudonymMod) *PseudonymTemplate {
	o := &PseudonymTemplate{f: f}

	if f != nil {
		f.basePseudonymMods.Apply(ctx, o)
	}

	PseudonymModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewReport(ctx context.Context, mods ...ReportMod) *ReportTemplate {
	o := &ReportTemplate{f: f}

	if f != nil {
		f.baseReportMods.Apply(ctx, o)
	}

	ReportModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewRoleDefinition(ctx context.Context, mods ...RoleDefinitionMod) *RoleDefinitionTemplate {
	o := &RoleDefinitionTemplate{f: f}

	if f != nil {
		f.baseRoleDefinitionMods.Apply(ctx, o)
	}

	RoleDefinitionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewRoleKey(ctx context.Context, mods ...RoleKeyMod) *RoleKeyTemplate {
	o := &RoleKeyTemplate{f: f}

	if f != nil {
		f.baseRoleKeyMods.Apply(ctx, o)
	}

	RoleKeyModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSchemaMigration(ctx context.Context, mods ...SchemaMigrationMod) *SchemaMigrationTemplate {
	o := &SchemaMigrationTemplate{f: f}

	if f != nil {
		f.baseSchemaMigrationMods.Apply(ctx, o)
	}

	SchemaMigrationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSubforumModerator(ctx context.Context, mods ...SubforumModeratorMod) *SubforumModeratorTemplate {
	o := &SubforumModeratorTemplate{f: f}

	if f != nil {
		f.baseSubforumModeratorMods.Apply(ctx, o)
	}

	SubforumModeratorModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSubforumSubscription(ctx context.Context, mods ...SubforumSubscriptionMod) *SubforumSubscriptionTemplate {
	o := &SubforumSubscriptionTemplate{f: f}

	if f != nil {
		f.baseSubforumSubscriptionMods.Apply(ctx, o)
	}

	SubforumSubscriptionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSubforum(ctx context.Context, mods ...SubforumMod) *SubforumTemplate {
	o := &SubforumTemplate{f: f}

	if f != nil {
		f.baseSubforumMods.Apply(ctx, o)
	}

	SubforumModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSystemEvent(ctx context.Context, mods ...SystemEventMod) *SystemEventTemplate {
	o := &SystemEventTemplate{f: f}

	if f != nil {
		f.baseSystemEventMods.Apply(ctx, o)
	}

	SystemEventModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSystemSetting(ctx context.Context, mods ...SystemSettingMod) *SystemSettingTemplate {
	o := &SystemSettingTemplate{f: f}

	if f != nil {
		f.baseSystemSettingMods.Apply(ctx, o)
	}

	SystemSettingModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewUserBan(ctx context.Context, mods ...UserBanMod) *UserBanTemplate {
	o := &UserBanTemplate{f: f}

	if f != nil {
		f.baseUserBanMods.Apply(ctx, o)
	}

	UserBanModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewUserBlock(ctx context.Context, mods ...UserBlockMod) *UserBlockTemplate {
	o := &UserBlockTemplate{f: f}

	if f != nil {
		f.baseUserBlockMods.Apply(ctx, o)
	}

	UserBlockModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewUserPreference(ctx context.Context, mods ...UserPreferenceMod) *UserPreferenceTemplate {
	o := &UserPreferenceTemplate{f: f}

	if f != nil {
		f.baseUserPreferenceMods.Apply(ctx, o)
	}

	UserPreferenceModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewUser(ctx context.Context, mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(ctx, o)
	}

	UserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewVote(ctx context.Context, mods ...VoteMod) *VoteTemplate {
	o := &VoteTemplate{f: f}

	if f != nil {
		f.baseVoteMods.Apply(ctx, o)
	}

	VoteModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) ClearBaseAPIKeyMods() {
	f.baseAPIKeyMods = nil
}

func (f *Factory) AddBaseAPIKeyMod(mods ...APIKeyMod) {
	f.baseAPIKeyMods = append(f.baseAPIKeyMods, mods...)
}

func (f *Factory) ClearBaseCommentMods() {
	f.baseCommentMods = nil
}

func (f *Factory) AddBaseCommentMod(mods ...CommentMod) {
	f.baseCommentMods = append(f.baseCommentMods, mods...)
}

func (f *Factory) ClearBaseComplianceCorrelationMods() {
	f.baseComplianceCorrelationMods = nil
}

func (f *Factory) AddBaseComplianceCorrelationMod(mods ...ComplianceCorrelationMod) {
	f.baseComplianceCorrelationMods = append(f.baseComplianceCorrelationMods, mods...)
}

func (f *Factory) ClearBaseComplianceReportMods() {
	f.baseComplianceReportMods = nil
}

func (f *Factory) AddBaseComplianceReportMod(mods ...ComplianceReportMod) {
	f.baseComplianceReportMods = append(f.baseComplianceReportMods, mods...)
}

func (f *Factory) ClearBaseCorrelationAuditMods() {
	f.baseCorrelationAuditMods = nil
}

func (f *Factory) AddBaseCorrelationAuditMod(mods ...CorrelationAuditMod) {
	f.baseCorrelationAuditMods = append(f.baseCorrelationAuditMods, mods...)
}

func (f *Factory) ClearBaseDirectMessageMods() {
	f.baseDirectMessageMods = nil
}

func (f *Factory) AddBaseDirectMessageMod(mods ...DirectMessageMod) {
	f.baseDirectMessageMods = append(f.baseDirectMessageMods, mods...)
}

func (f *Factory) ClearBaseIdentityMappingMods() {
	f.baseIdentityMappingMods = nil
}

func (f *Factory) AddBaseIdentityMappingMod(mods ...IdentityMappingMod) {
	f.baseIdentityMappingMods = append(f.baseIdentityMappingMods, mods...)
}

func (f *Factory) ClearBaseKeyUsageAuditMods() {
	f.baseKeyUsageAuditMods = nil
}

func (f *Factory) AddBaseKeyUsageAuditMod(mods ...KeyUsageAuditMod) {
	f.baseKeyUsageAuditMods = append(f.baseKeyUsageAuditMods, mods...)
}

func (f *Factory) ClearBaseMediaAttachmentMods() {
	f.baseMediaAttachmentMods = nil
}

func (f *Factory) AddBaseMediaAttachmentMod(mods ...MediaAttachmentMod) {
	f.baseMediaAttachmentMods = append(f.baseMediaAttachmentMods, mods...)
}

func (f *Factory) ClearBaseModerationActionMods() {
	f.baseModerationActionMods = nil
}

func (f *Factory) AddBaseModerationActionMod(mods ...ModerationActionMod) {
	f.baseModerationActionMods = append(f.baseModerationActionMods, mods...)
}

func (f *Factory) ClearBasePerformanceMetricMods() {
	f.basePerformanceMetricMods = nil
}

func (f *Factory) AddBasePerformanceMetricMod(mods ...PerformanceMetricMod) {
	f.basePerformanceMetricMods = append(f.basePerformanceMetricMods, mods...)
}

func (f *Factory) ClearBasePollVoteMods() {
	f.basePollVoteMods = nil
}

func (f *Factory) AddBasePollVoteMod(mods ...PollVoteMod) {
	f.basePollVoteMods = append(f.basePollVoteMods, mods...)
}

func (f *Factory) ClearBasePollMods() {
	f.basePollMods = nil
}

func (f *Factory) AddBasePollMod(mods ...PollMod) {
	f.basePollMods = append(f.basePollMods, mods...)
}

func (f *Factory) ClearBasePostMods() {
	f.basePostMods = nil
}

func (f *Factory) AddBasePostMod(mods ...PostMod) {
	f.basePostMods = append(f.basePostMods, mods...)
}

func (f *Factory) ClearBasePseudonymMods() {
	f.basePseudonymMods = nil
}

func (f *Factory) AddBasePseudonymMod(mods ...PseudonymMod) {
	f.basePseudonymMods = append(f.basePseudonymMods, mods...)
}

func (f *Factory) ClearBaseReportMods() {
	f.baseReportMods = nil
}

func (f *Factory) AddBaseReportMod(mods ...ReportMod) {
	f.baseReportMods = append(f.baseReportMods, mods...)
}

func (f *Factory) ClearBaseRoleDefinitionMods() {
	f.baseRoleDefinitionMods = nil
}

func (f *Factory) AddBaseRoleDefinitionMod(mods ...RoleDefinitionMod) {
	f.baseRoleDefinitionMods = append(f.baseRoleDefinitionMods, mods...)
}

func (f *Factory) ClearBaseRoleKeyMods() {
	f.baseRoleKeyMods = nil
}

func (f *Factory) AddBaseRoleKeyMod(mods ...RoleKeyMod) {
	f.baseRoleKeyMods = append(f.baseRoleKeyMods, mods...)
}

func (f *Factory) ClearBaseSchemaMigrationMods() {
	f.baseSchemaMigrationMods = nil
}

func (f *Factory) AddBaseSchemaMigrationMod(mods ...SchemaMigrationMod) {
	f.baseSchemaMigrationMods = append(f.baseSchemaMigrationMods, mods...)
}

func (f *Factory) ClearBaseSubforumModeratorMods() {
	f.baseSubforumModeratorMods = nil
}

func (f *Factory) AddBaseSubforumModeratorMod(mods ...SubforumModeratorMod) {
	f.baseSubforumModeratorMods = append(f.baseSubforumModeratorMods, mods...)
}

func (f *Factory) ClearBaseSubforumSubscriptionMods() {
	f.baseSubforumSubscriptionMods = nil
}

func (f *Factory) AddBaseSubforumSubscriptionMod(mods ...SubforumSubscriptionMod) {
	f.baseSubforumSubscriptionMods = append(f.baseSubforumSubscriptionMods, mods...)
}

func (f *Factory) ClearBaseSubforumMods() {
	f.baseSubforumMods = nil
}

func (f *Factory) AddBaseSubforumMod(mods ...SubforumMod) {
	f.baseSubforumMods = append(f.baseSubforumMods, mods...)
}

func (f *Factory) ClearBaseSystemEventMods() {
	f.baseSystemEventMods = nil
}

func (f *Factory) AddBaseSystemEventMod(mods ...SystemEventMod) {
	f.baseSystemEventMods = append(f.baseSystemEventMods, mods...)
}

func (f *Factory) ClearBaseSystemSettingMods() {
	f.baseSystemSettingMods = nil
}

func (f *Factory) AddBaseSystemSettingMod(mods ...SystemSettingMod) {
	f.baseSystemSettingMods = append(f.baseSystemSettingMods, mods...)
}

func (f *Factory) ClearBaseUserBanMods() {
	f.baseUserBanMods = nil
}

func (f *Factory) AddBaseUserBanMod(mods ...UserBanMod) {
	f.baseUserBanMods = append(f.baseUserBanMods, mods...)
}

func (f *Factory) ClearBaseUserBlockMods() {
	f.baseUserBlockMods = nil
}

func (f *Factory) AddBaseUserBlockMod(mods ...UserBlockMod) {
	f.baseUserBlockMods = append(f.baseUserBlockMods, mods...)
}

func (f *Factory) ClearBaseUserPreferenceMods() {
	f.baseUserPreferenceMods = nil
}

func (f *Factory) AddBaseUserPreferenceMod(mods ...UserPreferenceMod) {
	f.baseUserPreferenceMods = append(f.baseUserPreferenceMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}

func (f *Factory) ClearBaseVoteMods() {
	f.baseVoteMods = nil
}

func (f *Factory) AddBaseVoteMod(mods ...VoteMod) {
	f.baseVoteMods = append(f.baseVoteMods, mods...)
}
