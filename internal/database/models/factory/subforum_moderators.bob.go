// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"encoding/json"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type SubforumModeratorMod interface {
	Apply(context.Context, *SubforumModeratorTemplate)
}

type SubforumModeratorModFunc func(context.Context, *SubforumModeratorTemplate)

func (f SubforumModeratorModFunc) Apply(ctx context.Context, n *SubforumModeratorTemplate) {
	f(ctx, n)
}

type SubforumModeratorModSlice []SubforumModeratorMod

func (mods SubforumModeratorModSlice) Apply(ctx context.Context, n *SubforumModeratorTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// SubforumModeratorTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type SubforumModeratorTemplate struct {
	ModeratorID   func() int64
	SubforumID    func() int32
	UserID        func() int64
	PseudonymID   func() string
	Role          func() string
	AddedAt       func() sql.Null[time.Time]
	AddedByUserID func() sql.Null[int64]
	Permissions   func() sql.Null[types.JSON[json.RawMessage]]

	r subforumModeratorR
	f *Factory
}

type subforumModeratorR struct {
	AddedByUserUser *subforumModeratorRAddedByUserUserR
	Pseudonym       *subforumModeratorRPseudonymR
	Subforum        *subforumModeratorRSubforumR
	User            *subforumModeratorRUserR
}

type subforumModeratorRAddedByUserUserR struct {
	o *UserTemplate
}
type subforumModeratorRPseudonymR struct {
	o *PseudonymTemplate
}
type subforumModeratorRSubforumR struct {
	o *SubforumTemplate
}
type subforumModeratorRUserR struct {
	o *UserTemplate
}

// Apply mods to the SubforumModeratorTemplate
func (o *SubforumModeratorTemplate) Apply(ctx context.Context, mods ...SubforumModeratorMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.SubforumModerator
// according to the relationships in the template. Nothing is inserted into the db
func (t SubforumModeratorTemplate) setModelRels(o *models.SubforumModerator) {
	if t.r.AddedByUserUser != nil {
		rel := t.r.AddedByUserUser.o.Build()
		rel.R.AddedByUserSubforumModerators = append(rel.R.AddedByUserSubforumModerators, o)
		o.AddedByUserID = sql.Null[int64]{V: rel.UserID, Valid: true} // h2
		o.R.AddedByUserUser = rel
	}

	if t.r.Pseudonym != nil {
		rel := t.r.Pseudonym.o.Build()
		rel.R.SubforumModerators = append(rel.R.SubforumModerators, o)
		o.PseudonymID = rel.PseudonymID // h2
		o.R.Pseudonym = rel
	}

	if t.r.Subforum != nil {
		rel := t.r.Subforum.o.Build()
		rel.R.SubforumModerators = append(rel.R.SubforumModerators, o)
		o.SubforumID = rel.SubforumID // h2
		o.R.Subforum = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.SubforumModerators = append(rel.R.SubforumModerators, o)
		o.UserID = rel.UserID // h2
		o.R.User = rel
	}
}

// BuildSetter returns an *models.SubforumModeratorSetter
// this does nothing with the relationship templates
func (o SubforumModeratorTemplate) BuildSetter() *models.SubforumModeratorSetter {
	m := &models.SubforumModeratorSetter{}

	if o.ModeratorID != nil {
		val := o.ModeratorID()
		m.ModeratorID = &val
	}
	if o.SubforumID != nil {
		val := o.SubforumID()
		m.SubforumID = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}
	if o.PseudonymID != nil {
		val := o.PseudonymID()
		m.PseudonymID = &val
	}
	if o.Role != nil {
		val := o.Role()
		m.Role = &val
	}
	if o.AddedAt != nil {
		val := o.AddedAt()
		m.AddedAt = &val
	}
	if o.AddedByUserID != nil {
		val := o.AddedByUserID()
		m.AddedByUserID = &val
	}
	if o.Permissions != nil {
		val := o.Permissions()
		m.Permissions = &val
	}

	return m
}

// BuildManySetter returns an []*models.SubforumModeratorSetter
// this does nothing with the relationship templates
func (o SubforumModeratorTemplate) BuildManySetter(number int) []*models.SubforumModeratorSetter {
	m := make([]*models.SubforumModeratorSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.SubforumModerator
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SubforumModeratorTemplate.Create
func (o SubforumModeratorTemplate) Build() *models.SubforumModerator {
	m := &models.SubforumModerator{}

	if o.ModeratorID != nil {
		m.ModeratorID = o.ModeratorID()
	}
	if o.SubforumID != nil {
		m.SubforumID = o.SubforumID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.PseudonymID != nil {
		m.PseudonymID = o.PseudonymID()
	}
	if o.Role != nil {
		m.Role = o.Role()
	}
	if o.AddedAt != nil {
		m.AddedAt = o.AddedAt()
	}
	if o.AddedByUserID != nil {
		m.AddedByUserID = o.AddedByUserID()
	}
	if o.Permissions != nil {
		m.Permissions = o.Permissions()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.SubforumModeratorSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SubforumModeratorTemplate.CreateMany
func (o SubforumModeratorTemplate) BuildMany(number int) models.SubforumModeratorSlice {
	m := make(models.SubforumModeratorSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableSubforumModerator(m *models.SubforumModeratorSetter) {
	if m.SubforumID == nil {
		val := random_int32(nil)
		m.SubforumID = &val
	}
	if m.UserID == nil {
		val := random_int64(nil)
		m.UserID = &val
	}
	if m.PseudonymID == nil {
		val := random_string(nil, "64")
		m.PseudonymID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.SubforumModerator
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *SubforumModeratorTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.SubforumModerator) (context.Context, error) {
	var err error

	isAddedByUserUserDone, _ := subforumModeratorRelAddedByUserUserCtx.Value(ctx)
	if !isAddedByUserUserDone && o.r.AddedByUserUser != nil {
		ctx = subforumModeratorRelAddedByUserUserCtx.WithValue(ctx, true)
		var rel0 *models.User
		ctx, rel0, err = o.r.AddedByUserUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachAddedByUserUser(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a subforumModerator and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *SubforumModeratorTemplate) Create(ctx context.Context, exec bob.Executor) (*models.SubforumModerator, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a subforumModerator and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *SubforumModeratorTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.SubforumModerator {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a subforumModerator and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *SubforumModeratorTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.SubforumModerator {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a subforumModerator and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *SubforumModeratorTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.SubforumModerator, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableSubforumModerator(opt)

	if o.r.Pseudonym == nil {
		SubforumModeratorMods.WithNewPseudonym().Apply(ctx, o)
	}

	rel1, ok := pseudonymCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.Pseudonym.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PseudonymID = &rel1.PseudonymID

	if o.r.Subforum == nil {
		SubforumModeratorMods.WithNewSubforum().Apply(ctx, o)
	}

	rel2, ok := subforumCtx.Value(ctx)
	if !ok {
		ctx, rel2, err = o.r.Subforum.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.SubforumID = &rel2.SubforumID

	if o.r.User == nil {
		SubforumModeratorMods.WithNewUser().Apply(ctx, o)
	}

	rel3, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel3, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.UserID = &rel3.UserID

	m, err := models.SubforumModerators.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = subforumModeratorCtx.WithValue(ctx, m)

	m.R.Pseudonym = rel1
	m.R.Subforum = rel2
	m.R.User = rel3

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple subforumModerators and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o SubforumModeratorTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.SubforumModeratorSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple subforumModerators and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o SubforumModeratorTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.SubforumModeratorSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple subforumModerators and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o SubforumModeratorTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.SubforumModeratorSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple subforumModerators and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o SubforumModeratorTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.SubforumModeratorSlice, error) {
	var err error
	m := make(models.SubforumModeratorSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// SubforumModerator has methods that act as mods for the SubforumModeratorTemplate
var SubforumModeratorMods subforumModeratorMods

type subforumModeratorMods struct{}

func (m subforumModeratorMods) RandomizeAllColumns(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModSlice{
		SubforumModeratorMods.RandomModeratorID(f),
		SubforumModeratorMods.RandomSubforumID(f),
		SubforumModeratorMods.RandomUserID(f),
		SubforumModeratorMods.RandomPseudonymID(f),
		SubforumModeratorMods.RandomRole(f),
		SubforumModeratorMods.RandomAddedAt(f),
		SubforumModeratorMods.RandomAddedByUserID(f),
		SubforumModeratorMods.RandomPermissions(f),
	}
}

// Set the model columns to this value
func (m subforumModeratorMods) ModeratorID(val int64) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.ModeratorID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) ModeratorIDFunc(f func() int64) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.ModeratorID = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetModeratorID() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.ModeratorID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumModeratorMods) RandomModeratorID(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.ModeratorID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m subforumModeratorMods) SubforumID(val int32) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.SubforumID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) SubforumIDFunc(f func() int32) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.SubforumID = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetSubforumID() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.SubforumID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumModeratorMods) RandomSubforumID(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.SubforumID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m subforumModeratorMods) UserID(val int64) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) UserIDFunc(f func() int64) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetUserID() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumModeratorMods) RandomUserID(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m subforumModeratorMods) PseudonymID(val string) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.PseudonymID = func() string { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) PseudonymIDFunc(f func() string) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.PseudonymID = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetPseudonymID() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.PseudonymID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumModeratorMods) RandomPseudonymID(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.PseudonymID = func() string {
			return random_string(f, "64")
		}
	})
}

// Set the model columns to this value
func (m subforumModeratorMods) Role(val string) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Role = func() string { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) RoleFunc(f func() string) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Role = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetRole() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Role = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m subforumModeratorMods) RandomRole(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Role = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m subforumModeratorMods) AddedAt(val sql.Null[time.Time]) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) AddedAtFunc(f func() sql.Null[time.Time]) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedAt = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetAddedAt() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumModeratorMods) RandomAddedAt(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumModeratorMods) RandomAddedAtNotNull(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumModeratorMods) AddedByUserID(val sql.Null[int64]) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedByUserID = func() sql.Null[int64] { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) AddedByUserIDFunc(f func() sql.Null[int64]) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedByUserID = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetAddedByUserID() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedByUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumModeratorMods) RandomAddedByUserID(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumModeratorMods) RandomAddedByUserIDNotNull(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.AddedByUserID = func() sql.Null[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return sql.Null[int64]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m subforumModeratorMods) Permissions(val sql.Null[types.JSON[json.RawMessage]]) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Permissions = func() sql.Null[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m subforumModeratorMods) PermissionsFunc(f func() sql.Null[types.JSON[json.RawMessage]]) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Permissions = f
	})
}

// Clear any values for the column
func (m subforumModeratorMods) UnsetPermissions() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Permissions = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m subforumModeratorMods) RandomPermissions(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Permissions = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m subforumModeratorMods) RandomPermissionsNotNull(f *faker.Faker) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(_ context.Context, o *SubforumModeratorTemplate) {
		o.Permissions = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: true}
		}
	})
}

func (m subforumModeratorMods) WithParentsCascading() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		if isDone, _ := subforumModeratorWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = subforumModeratorWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithAddedByUserUser(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPseudonym(ctx, PseudonymMods.WithParentsCascading())
			m.WithPseudonym(related).Apply(ctx, o)
		}
		{

			related := o.f.NewSubforum(ctx, SubforumMods.WithParentsCascading())
			m.WithSubforum(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m subforumModeratorMods) WithAddedByUserUser(rel *UserTemplate) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.AddedByUserUser = &subforumModeratorRAddedByUserUserR{
			o: rel,
		}
	})
}

func (m subforumModeratorMods) WithNewAddedByUserUser(mods ...UserMod) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithAddedByUserUser(related).Apply(ctx, o)
	})
}

func (m subforumModeratorMods) WithoutAddedByUserUser() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.AddedByUserUser = nil
	})
}

func (m subforumModeratorMods) WithPseudonym(rel *PseudonymTemplate) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.Pseudonym = &subforumModeratorRPseudonymR{
			o: rel,
		}
	})
}

func (m subforumModeratorMods) WithNewPseudonym(mods ...PseudonymMod) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		related := o.f.NewPseudonym(ctx, mods...)

		m.WithPseudonym(related).Apply(ctx, o)
	})
}

func (m subforumModeratorMods) WithoutPseudonym() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.Pseudonym = nil
	})
}

func (m subforumModeratorMods) WithSubforum(rel *SubforumTemplate) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.Subforum = &subforumModeratorRSubforumR{
			o: rel,
		}
	})
}

func (m subforumModeratorMods) WithNewSubforum(mods ...SubforumMod) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		related := o.f.NewSubforum(ctx, mods...)

		m.WithSubforum(related).Apply(ctx, o)
	})
}

func (m subforumModeratorMods) WithoutSubforum() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.Subforum = nil
	})
}

func (m subforumModeratorMods) WithUser(rel *UserTemplate) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.User = &subforumModeratorRUserR{
			o: rel,
		}
	})
}

func (m subforumModeratorMods) WithNewUser(mods ...UserMod) SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m subforumModeratorMods) WithoutUser() SubforumModeratorMod {
	return SubforumModeratorModFunc(func(ctx context.Context, o *SubforumModeratorTemplate) {
		o.r.User = nil
	})
}
