// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// ModerationAction is an object representing the database table.
type ModerationAction struct {
	ActionID             int64                                 `db:"action_id,pk" scan:"action_id" json:"action_id"`
	ModeratorUserID      int64                                 `db:"moderator_user_id" scan:"moderator_user_id" json:"moderator_user_id"`
	ModeratorPseudonymID string                                `db:"moderator_pseudonym_id" scan:"moderator_pseudonym_id" json:"moderator_pseudonym_id"`
	SubforumID           sql.Null[int32]                       `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	ActionType           string                                `db:"action_type" scan:"action_type" json:"action_type"`
	TargetContentType    sql.Null[string]                      `db:"target_content_type" scan:"target_content_type" json:"target_content_type"`
	TargetContentID      sql.Null[int64]                       `db:"target_content_id" scan:"target_content_id" json:"target_content_id"`
	TargetUserID         sql.Null[int64]                       `db:"target_user_id" scan:"target_user_id" json:"target_user_id"`
	ActionDetails        sql.Null[types.JSON[json.RawMessage]] `db:"action_details" scan:"action_details" json:"action_details"`
	CreatedAt            sql.Null[time.Time]                   `db:"created_at" scan:"created_at" json:"created_at"`

	R moderationActionR `db:"-" scan:"rel" json:"rel"`
}

// ModerationActionSlice is an alias for a slice of pointers to ModerationAction.
// This should almost always be used instead of []*ModerationAction.
type ModerationActionSlice []*ModerationAction

// ModerationActions contains methods to work with the moderation_actions table
var ModerationActions = psql.NewTablex[*ModerationAction, ModerationActionSlice, *ModerationActionSetter]("", "moderation_actions")

// ModerationActionsQuery is a query on the moderation_actions table
type ModerationActionsQuery = *psql.ViewQuery[*ModerationAction, ModerationActionSlice]

// moderationActionR is where relationships are stored.
type moderationActionR struct {
	ModeratorPseudonymPseudonym *Pseudonym `scan:"ModeratorPseudonymPseudonym" json:"ModeratorPseudonymPseudonym"` // moderation_actions.moderation_actions_moderator_pseudonym_id_fkey
	ModeratorUserUser           *User      `scan:"ModeratorUserUser" json:"ModeratorUserUser"`                     // moderation_actions.moderation_actions_moderator_user_id_fkey
	Subforum                    *Subforum  `scan:"Subforum" json:"Subforum"`                                       // moderation_actions.moderation_actions_subforum_id_fkey
	TargetUserUser              *User      `scan:"TargetUserUser" json:"TargetUserUser"`                           // moderation_actions.moderation_actions_target_user_id_fkey
}

type moderationActionColumnNames struct {
	ActionID             string
	ModeratorUserID      string
	ModeratorPseudonymID string
	SubforumID           string
	ActionType           string
	TargetContentType    string
	TargetContentID      string
	TargetUserID         string
	ActionDetails        string
	CreatedAt            string
}

var ModerationActionColumns = buildModerationActionColumns("moderation_actions")

type moderationActionColumns struct {
	tableAlias           string
	ActionID             psql.Expression
	ModeratorUserID      psql.Expression
	ModeratorPseudonymID psql.Expression
	SubforumID           psql.Expression
	ActionType           psql.Expression
	TargetContentType    psql.Expression
	TargetContentID      psql.Expression
	TargetUserID         psql.Expression
	ActionDetails        psql.Expression
	CreatedAt            psql.Expression
}

func (c moderationActionColumns) Alias() string {
	return c.tableAlias
}

func (moderationActionColumns) AliasedAs(alias string) moderationActionColumns {
	return buildModerationActionColumns(alias)
}

func buildModerationActionColumns(alias string) moderationActionColumns {
	return moderationActionColumns{
		tableAlias:           alias,
		ActionID:             psql.Quote(alias, "action_id"),
		ModeratorUserID:      psql.Quote(alias, "moderator_user_id"),
		ModeratorPseudonymID: psql.Quote(alias, "moderator_pseudonym_id"),
		SubforumID:           psql.Quote(alias, "subforum_id"),
		ActionType:           psql.Quote(alias, "action_type"),
		TargetContentType:    psql.Quote(alias, "target_content_type"),
		TargetContentID:      psql.Quote(alias, "target_content_id"),
		TargetUserID:         psql.Quote(alias, "target_user_id"),
		ActionDetails:        psql.Quote(alias, "action_details"),
		CreatedAt:            psql.Quote(alias, "created_at"),
	}
}

type moderationActionWhere[Q psql.Filterable] struct {
	ActionID             psql.WhereMod[Q, int64]
	ModeratorUserID      psql.WhereMod[Q, int64]
	ModeratorPseudonymID psql.WhereMod[Q, string]
	SubforumID           psql.WhereNullMod[Q, int32]
	ActionType           psql.WhereMod[Q, string]
	TargetContentType    psql.WhereNullMod[Q, string]
	TargetContentID      psql.WhereNullMod[Q, int64]
	TargetUserID         psql.WhereNullMod[Q, int64]
	ActionDetails        psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
	CreatedAt            psql.WhereNullMod[Q, time.Time]
}

func (moderationActionWhere[Q]) AliasedAs(alias string) moderationActionWhere[Q] {
	return buildModerationActionWhere[Q](buildModerationActionColumns(alias))
}

func buildModerationActionWhere[Q psql.Filterable](cols moderationActionColumns) moderationActionWhere[Q] {
	return moderationActionWhere[Q]{
		ActionID:             psql.Where[Q, int64](cols.ActionID),
		ModeratorUserID:      psql.Where[Q, int64](cols.ModeratorUserID),
		ModeratorPseudonymID: psql.Where[Q, string](cols.ModeratorPseudonymID),
		SubforumID:           psql.WhereNull[Q, int32](cols.SubforumID),
		ActionType:           psql.Where[Q, string](cols.ActionType),
		TargetContentType:    psql.WhereNull[Q, string](cols.TargetContentType),
		TargetContentID:      psql.WhereNull[Q, int64](cols.TargetContentID),
		TargetUserID:         psql.WhereNull[Q, int64](cols.TargetUserID),
		ActionDetails:        psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.ActionDetails),
		CreatedAt:            psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var ModerationActionErrors = &moderationActionErrors{
	ErrUniqueModerationActionsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "moderation_actions",
		columns: []string{"action_id"},
		s:       "moderation_actions_pkey",
	},
}

type moderationActionErrors struct {
	ErrUniqueModerationActionsPkey *UniqueConstraintError
}

// ModerationActionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ModerationActionSetter struct {
	ActionID             *int64                                 `db:"action_id,pk" scan:"action_id" json:"action_id"`
	ModeratorUserID      *int64                                 `db:"moderator_user_id" scan:"moderator_user_id" json:"moderator_user_id"`
	ModeratorPseudonymID *string                                `db:"moderator_pseudonym_id" scan:"moderator_pseudonym_id" json:"moderator_pseudonym_id"`
	SubforumID           *sql.Null[int32]                       `db:"subforum_id" scan:"subforum_id" json:"subforum_id"`
	ActionType           *string                                `db:"action_type" scan:"action_type" json:"action_type"`
	TargetContentType    *sql.Null[string]                      `db:"target_content_type" scan:"target_content_type" json:"target_content_type"`
	TargetContentID      *sql.Null[int64]                       `db:"target_content_id" scan:"target_content_id" json:"target_content_id"`
	TargetUserID         *sql.Null[int64]                       `db:"target_user_id" scan:"target_user_id" json:"target_user_id"`
	ActionDetails        *sql.Null[types.JSON[json.RawMessage]] `db:"action_details" scan:"action_details" json:"action_details"`
	CreatedAt            *sql.Null[time.Time]                   `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s ModerationActionSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.ActionID != nil {
		vals = append(vals, "action_id")
	}

	if s.ModeratorUserID != nil {
		vals = append(vals, "moderator_user_id")
	}

	if s.ModeratorPseudonymID != nil {
		vals = append(vals, "moderator_pseudonym_id")
	}

	if s.SubforumID != nil {
		vals = append(vals, "subforum_id")
	}

	if s.ActionType != nil {
		vals = append(vals, "action_type")
	}

	if s.TargetContentType != nil {
		vals = append(vals, "target_content_type")
	}

	if s.TargetContentID != nil {
		vals = append(vals, "target_content_id")
	}

	if s.TargetUserID != nil {
		vals = append(vals, "target_user_id")
	}

	if s.ActionDetails != nil {
		vals = append(vals, "action_details")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s ModerationActionSetter) Overwrite(t *ModerationAction) {
	if s.ActionID != nil {
		t.ActionID = *s.ActionID
	}
	if s.ModeratorUserID != nil {
		t.ModeratorUserID = *s.ModeratorUserID
	}
	if s.ModeratorPseudonymID != nil {
		t.ModeratorPseudonymID = *s.ModeratorPseudonymID
	}
	if s.SubforumID != nil {
		t.SubforumID = *s.SubforumID
	}
	if s.ActionType != nil {
		t.ActionType = *s.ActionType
	}
	if s.TargetContentType != nil {
		t.TargetContentType = *s.TargetContentType
	}
	if s.TargetContentID != nil {
		t.TargetContentID = *s.TargetContentID
	}
	if s.TargetUserID != nil {
		t.TargetUserID = *s.TargetUserID
	}
	if s.ActionDetails != nil {
		t.ActionDetails = *s.ActionDetails
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *ModerationActionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return ModerationActions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.ActionID != nil {
			vals[0] = psql.Arg(*s.ActionID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.ModeratorUserID != nil {
			vals[1] = psql.Arg(*s.ModeratorUserID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.ModeratorPseudonymID != nil {
			vals[2] = psql.Arg(*s.ModeratorPseudonymID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.SubforumID != nil {
			vals[3] = psql.Arg(*s.SubforumID)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.ActionType != nil {
			vals[4] = psql.Arg(*s.ActionType)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.TargetContentType != nil {
			vals[5] = psql.Arg(*s.TargetContentType)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.TargetContentID != nil {
			vals[6] = psql.Arg(*s.TargetContentID)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.TargetUserID != nil {
			vals[7] = psql.Arg(*s.TargetUserID)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.ActionDetails != nil {
			vals[8] = psql.Arg(*s.ActionDetails)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[9] = psql.Arg(*s.CreatedAt)
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ModerationActionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ModerationActionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.ActionID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "action_id")...),
			psql.Arg(s.ActionID),
		}})
	}

	if s.ModeratorUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "moderator_user_id")...),
			psql.Arg(s.ModeratorUserID),
		}})
	}

	if s.ModeratorPseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "moderator_pseudonym_id")...),
			psql.Arg(s.ModeratorPseudonymID),
		}})
	}

	if s.SubforumID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "subforum_id")...),
			psql.Arg(s.SubforumID),
		}})
	}

	if s.ActionType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "action_type")...),
			psql.Arg(s.ActionType),
		}})
	}

	if s.TargetContentType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "target_content_type")...),
			psql.Arg(s.TargetContentType),
		}})
	}

	if s.TargetContentID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "target_content_id")...),
			psql.Arg(s.TargetContentID),
		}})
	}

	if s.TargetUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "target_user_id")...),
			psql.Arg(s.TargetUserID),
		}})
	}

	if s.ActionDetails != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "action_details")...),
			psql.Arg(s.ActionDetails),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindModerationAction retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindModerationAction(ctx context.Context, exec bob.Executor, ActionIDPK int64, cols ...string) (*ModerationAction, error) {
	if len(cols) == 0 {
		return ModerationActions.Query(
			SelectWhere.ModerationActions.ActionID.EQ(ActionIDPK),
		).One(ctx, exec)
	}

	return ModerationActions.Query(
		SelectWhere.ModerationActions.ActionID.EQ(ActionIDPK),
		sm.Columns(ModerationActions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ModerationActionExists checks the presence of a single record by primary key
func ModerationActionExists(ctx context.Context, exec bob.Executor, ActionIDPK int64) (bool, error) {
	return ModerationActions.Query(
		SelectWhere.ModerationActions.ActionID.EQ(ActionIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after ModerationAction is retrieved from the database
func (o *ModerationAction) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ModerationActions.AfterSelectHooks.RunHooks(ctx, exec, ModerationActionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = ModerationActions.AfterInsertHooks.RunHooks(ctx, exec, ModerationActionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = ModerationActions.AfterUpdateHooks.RunHooks(ctx, exec, ModerationActionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = ModerationActions.AfterDeleteHooks.RunHooks(ctx, exec, ModerationActionSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the ModerationAction
func (o *ModerationAction) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ActionID)
}

func (o *ModerationAction) pkEQ() dialect.Expression {
	return psql.Quote("moderation_actions", "action_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the ModerationAction
func (o *ModerationAction) Update(ctx context.Context, exec bob.Executor, s *ModerationActionSetter) error {
	v, err := ModerationActions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single ModerationAction record with an executor
func (o *ModerationAction) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := ModerationActions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the ModerationAction using the executor
func (o *ModerationAction) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := ModerationActions.Query(
		SelectWhere.ModerationActions.ActionID.EQ(o.ActionID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ModerationActionSlice is retrieved from the database
func (o ModerationActionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ModerationActions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = ModerationActions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = ModerationActions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = ModerationActions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ModerationActionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("moderation_actions", "action_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ModerationActionSlice) copyMatchingRows(from ...*ModerationAction) {
	for i, old := range o {
		for _, new := range from {
			if new.ActionID != old.ActionID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ModerationActionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ModerationActions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ModerationAction:
				o.copyMatchingRows(retrieved)
			case []*ModerationAction:
				o.copyMatchingRows(retrieved...)
			case ModerationActionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ModerationAction or a slice of ModerationAction
				// then run the AfterUpdateHooks on the slice
				_, err = ModerationActions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ModerationActionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ModerationActions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ModerationAction:
				o.copyMatchingRows(retrieved)
			case []*ModerationAction:
				o.copyMatchingRows(retrieved...)
			case ModerationActionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ModerationAction or a slice of ModerationAction
				// then run the AfterDeleteHooks on the slice
				_, err = ModerationActions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ModerationActionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ModerationActionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ModerationActions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ModerationActionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ModerationActions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ModerationActionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := ModerationActions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type moderationActionJoins[Q dialect.Joinable] struct {
	typ                         string
	ModeratorPseudonymPseudonym modAs[Q, pseudonymColumns]
	ModeratorUserUser           modAs[Q, userColumns]
	Subforum                    modAs[Q, subforumColumns]
	TargetUserUser              modAs[Q, userColumns]
}

func (j moderationActionJoins[Q]) aliasedAs(alias string) moderationActionJoins[Q] {
	return buildModerationActionJoins[Q](buildModerationActionColumns(alias), j.typ)
}

func buildModerationActionJoins[Q dialect.Joinable](cols moderationActionColumns, typ string) moderationActionJoins[Q] {
	return moderationActionJoins[Q]{
		typ: typ,
		ModeratorPseudonymPseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.ModeratorPseudonymID),
					))
				}

				return mods
			},
		},
		ModeratorUserUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ModeratorUserID),
					))
				}

				return mods
			},
		},
		Subforum: modAs[Q, subforumColumns]{
			c: SubforumColumns,
			f: func(to subforumColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Subforums.Name().As(to.Alias())).On(
						to.SubforumID.EQ(cols.SubforumID),
					))
				}

				return mods
			},
		},
		TargetUserUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.TargetUserID),
					))
				}

				return mods
			},
		},
	}
}

// ModeratorPseudonymPseudonym starts a query for related objects on pseudonyms
func (o *ModerationAction) ModeratorPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.ModeratorPseudonymID))),
	)...)
}

func (os ModerationActionSlice) ModeratorPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkModeratorPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkModeratorPseudonymID[i] = o.ModeratorPseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkModeratorPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

// ModeratorUserUser starts a query for related objects on users
func (o *ModerationAction) ModeratorUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.ModeratorUserID))),
	)...)
}

func (os ModerationActionSlice) ModeratorUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkModeratorUserID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkModeratorUserID[i] = o.ModeratorUserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkModeratorUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Subforum starts a query for related objects on subforums
func (o *ModerationAction) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	return Subforums.Query(append(mods,
		sm.Where(SubforumColumns.SubforumID.EQ(psql.Arg(o.SubforumID))),
	)...)
}

func (os ModerationActionSlice) Subforum(mods ...bob.Mod[*dialect.SelectQuery]) SubforumsQuery {
	pkSubforumID := make(pgtypes.Array[sql.Null[int32]], len(os))
	for i, o := range os {
		pkSubforumID[i] = o.SubforumID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkSubforumID), "integer[]")),
	))

	return Subforums.Query(append(mods,
		sm.Where(psql.Group(SubforumColumns.SubforumID).OP("IN", PKArgExpr)),
	)...)
}

// TargetUserUser starts a query for related objects on users
func (o *ModerationAction) TargetUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.UserID.EQ(psql.Arg(o.TargetUserID))),
	)...)
}

func (os ModerationActionSlice) TargetUserUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkTargetUserID := make(pgtypes.Array[sql.Null[int64]], len(os))
	for i, o := range os {
		pkTargetUserID[i] = o.TargetUserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkTargetUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func (o *ModerationAction) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ModeratorPseudonymPseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("moderationAction cannot load %T as %q", retrieved, name)
		}

		o.R.ModeratorPseudonymPseudonym = rel

		if rel != nil {
			rel.R.ModeratorPseudonymModerationActions = ModerationActionSlice{o}
		}
		return nil
	case "ModeratorUserUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("moderationAction cannot load %T as %q", retrieved, name)
		}

		o.R.ModeratorUserUser = rel

		if rel != nil {
			rel.R.ModeratorUserModerationActions = ModerationActionSlice{o}
		}
		return nil
	case "Subforum":
		rel, ok := retrieved.(*Subforum)
		if !ok {
			return fmt.Errorf("moderationAction cannot load %T as %q", retrieved, name)
		}

		o.R.Subforum = rel

		if rel != nil {
			rel.R.ModerationActions = ModerationActionSlice{o}
		}
		return nil
	case "TargetUserUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("moderationAction cannot load %T as %q", retrieved, name)
		}

		o.R.TargetUserUser = rel

		if rel != nil {
			rel.R.TargetUserModerationActions = ModerationActionSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("moderationAction has no relationship %q", name)
	}
}

type moderationActionPreloader struct {
	ModeratorPseudonymPseudonym func(...psql.PreloadOption) psql.Preloader
	ModeratorUserUser           func(...psql.PreloadOption) psql.Preloader
	Subforum                    func(...psql.PreloadOption) psql.Preloader
	TargetUserUser              func(...psql.PreloadOption) psql.Preloader
}

func buildModerationActionPreloader() moderationActionPreloader {
	return moderationActionPreloader{
		ModeratorPseudonymPseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "ModeratorPseudonymPseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.ModerationActions,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.ModerationActions.ModeratorPseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
		ModeratorUserUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "ModeratorUserUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.ModerationActions,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.ModerationActions.ModeratorUserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
		Subforum: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Subforum, SubforumSlice](orm.Relationship{
				Name: "Subforum",
				Sides: []orm.RelSide{
					{
						From: TableNames.ModerationActions,
						To:   TableNames.Subforums,
						FromColumns: []string{
							ColumnNames.ModerationActions.SubforumID,
						},
						ToColumns: []string{
							ColumnNames.Subforums.SubforumID,
						},
					},
				},
			}, Subforums.Columns().Names(), opts...)
		},
		TargetUserUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "TargetUserUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.ModerationActions,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.ModerationActions.TargetUserID,
						},
						ToColumns: []string{
							ColumnNames.Users.UserID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type moderationActionThenLoader[Q orm.Loadable] struct {
	ModeratorPseudonymPseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	ModeratorUserUser           func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Subforum                    func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	TargetUserUser              func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildModerationActionThenLoader[Q orm.Loadable]() moderationActionThenLoader[Q] {
	type ModeratorPseudonymPseudonymLoadInterface interface {
		LoadModeratorPseudonymPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ModeratorUserUserLoadInterface interface {
		LoadModeratorUserUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type SubforumLoadInterface interface {
		LoadSubforum(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type TargetUserUserLoadInterface interface {
		LoadTargetUserUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return moderationActionThenLoader[Q]{
		ModeratorPseudonymPseudonym: thenLoadBuilder[Q](
			"ModeratorPseudonymPseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved ModeratorPseudonymPseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadModeratorPseudonymPseudonym(ctx, exec, mods...)
			},
		),
		ModeratorUserUser: thenLoadBuilder[Q](
			"ModeratorUserUser",
			func(ctx context.Context, exec bob.Executor, retrieved ModeratorUserUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadModeratorUserUser(ctx, exec, mods...)
			},
		),
		Subforum: thenLoadBuilder[Q](
			"Subforum",
			func(ctx context.Context, exec bob.Executor, retrieved SubforumLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadSubforum(ctx, exec, mods...)
			},
		),
		TargetUserUser: thenLoadBuilder[Q](
			"TargetUserUser",
			func(ctx context.Context, exec bob.Executor, retrieved TargetUserUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadTargetUserUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadModeratorPseudonymPseudonym loads the moderationAction's ModeratorPseudonymPseudonym into the .R struct
func (o *ModerationAction) LoadModeratorPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ModeratorPseudonymPseudonym = nil

	related, err := o.ModeratorPseudonymPseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ModeratorPseudonymModerationActions = ModerationActionSlice{o}

	o.R.ModeratorPseudonymPseudonym = related
	return nil
}

// LoadModeratorPseudonymPseudonym loads the moderationAction's ModeratorPseudonymPseudonym into the .R struct
func (os ModerationActionSlice) LoadModeratorPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.ModeratorPseudonymPseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.ModeratorPseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.ModeratorPseudonymModerationActions = append(rel.R.ModeratorPseudonymModerationActions, o)

			o.R.ModeratorPseudonymPseudonym = rel
			break
		}
	}

	return nil
}

// LoadModeratorUserUser loads the moderationAction's ModeratorUserUser into the .R struct
func (o *ModerationAction) LoadModeratorUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ModeratorUserUser = nil

	related, err := o.ModeratorUserUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ModeratorUserModerationActions = ModerationActionSlice{o}

	o.R.ModeratorUserUser = related
	return nil
}

// LoadModeratorUserUser loads the moderationAction's ModeratorUserUser into the .R struct
func (os ModerationActionSlice) LoadModeratorUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.ModeratorUserUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.ModeratorUserID != rel.UserID {
				continue
			}

			rel.R.ModeratorUserModerationActions = append(rel.R.ModeratorUserModerationActions, o)

			o.R.ModeratorUserUser = rel
			break
		}
	}

	return nil
}

// LoadSubforum loads the moderationAction's Subforum into the .R struct
func (o *ModerationAction) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Subforum = nil

	related, err := o.Subforum(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ModerationActions = ModerationActionSlice{o}

	o.R.Subforum = related
	return nil
}

// LoadSubforum loads the moderationAction's Subforum into the .R struct
func (os ModerationActionSlice) LoadSubforum(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	subforums, err := os.Subforum(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range subforums {
			if o.SubforumID.V != rel.SubforumID {
				continue
			}

			rel.R.ModerationActions = append(rel.R.ModerationActions, o)

			o.R.Subforum = rel
			break
		}
	}

	return nil
}

// LoadTargetUserUser loads the moderationAction's TargetUserUser into the .R struct
func (o *ModerationAction) LoadTargetUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.TargetUserUser = nil

	related, err := o.TargetUserUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.TargetUserModerationActions = ModerationActionSlice{o}

	o.R.TargetUserUser = related
	return nil
}

// LoadTargetUserUser loads the moderationAction's TargetUserUser into the .R struct
func (os ModerationActionSlice) LoadTargetUserUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.TargetUserUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.TargetUserID.V != rel.UserID {
				continue
			}

			rel.R.TargetUserModerationActions = append(rel.R.TargetUserModerationActions, o)

			o.R.TargetUserUser = rel
			break
		}
	}

	return nil
}

func attachModerationActionModeratorPseudonymPseudonym0(ctx context.Context, exec bob.Executor, count int, moderationAction0 *ModerationAction, pseudonym1 *Pseudonym) (*ModerationAction, error) {
	setter := &ModerationActionSetter{
		ModeratorPseudonymID: &pseudonym1.PseudonymID,
	}

	err := moderationAction0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachModerationActionModeratorPseudonymPseudonym0: %w", err)
	}

	return moderationAction0, nil
}

func (moderationAction0 *ModerationAction) InsertModeratorPseudonymPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachModerationActionModeratorPseudonymPseudonym0(ctx, exec, 1, moderationAction0, pseudonym1)
	if err != nil {
		return err
	}

	moderationAction0.R.ModeratorPseudonymPseudonym = pseudonym1

	pseudonym1.R.ModeratorPseudonymModerationActions = append(pseudonym1.R.ModeratorPseudonymModerationActions, moderationAction0)

	return nil
}

func (moderationAction0 *ModerationAction) AttachModeratorPseudonymPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachModerationActionModeratorPseudonymPseudonym0(ctx, exec, 1, moderationAction0, pseudonym1)
	if err != nil {
		return err
	}

	moderationAction0.R.ModeratorPseudonymPseudonym = pseudonym1

	pseudonym1.R.ModeratorPseudonymModerationActions = append(pseudonym1.R.ModeratorPseudonymModerationActions, moderationAction0)

	return nil
}

func attachModerationActionModeratorUserUser0(ctx context.Context, exec bob.Executor, count int, moderationAction0 *ModerationAction, user1 *User) (*ModerationAction, error) {
	setter := &ModerationActionSetter{
		ModeratorUserID: &user1.UserID,
	}

	err := moderationAction0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachModerationActionModeratorUserUser0: %w", err)
	}

	return moderationAction0, nil
}

func (moderationAction0 *ModerationAction) InsertModeratorUserUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachModerationActionModeratorUserUser0(ctx, exec, 1, moderationAction0, user1)
	if err != nil {
		return err
	}

	moderationAction0.R.ModeratorUserUser = user1

	user1.R.ModeratorUserModerationActions = append(user1.R.ModeratorUserModerationActions, moderationAction0)

	return nil
}

func (moderationAction0 *ModerationAction) AttachModeratorUserUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachModerationActionModeratorUserUser0(ctx, exec, 1, moderationAction0, user1)
	if err != nil {
		return err
	}

	moderationAction0.R.ModeratorUserUser = user1

	user1.R.ModeratorUserModerationActions = append(user1.R.ModeratorUserModerationActions, moderationAction0)

	return nil
}

func attachModerationActionSubforum0(ctx context.Context, exec bob.Executor, count int, moderationAction0 *ModerationAction, subforum1 *Subforum) (*ModerationAction, error) {
	setter := &ModerationActionSetter{
		SubforumID: func() *sql.Null[int32] {
			v := sql.Null[int32]{V: subforum1.SubforumID, Valid: true}
			return &v
		}(),
	}

	err := moderationAction0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachModerationActionSubforum0: %w", err)
	}

	return moderationAction0, nil
}

func (moderationAction0 *ModerationAction) InsertSubforum(ctx context.Context, exec bob.Executor, related *SubforumSetter) error {
	subforum1, err := Subforums.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachModerationActionSubforum0(ctx, exec, 1, moderationAction0, subforum1)
	if err != nil {
		return err
	}

	moderationAction0.R.Subforum = subforum1

	subforum1.R.ModerationActions = append(subforum1.R.ModerationActions, moderationAction0)

	return nil
}

func (moderationAction0 *ModerationAction) AttachSubforum(ctx context.Context, exec bob.Executor, subforum1 *Subforum) error {
	var err error

	_, err = attachModerationActionSubforum0(ctx, exec, 1, moderationAction0, subforum1)
	if err != nil {
		return err
	}

	moderationAction0.R.Subforum = subforum1

	subforum1.R.ModerationActions = append(subforum1.R.ModerationActions, moderationAction0)

	return nil
}

func attachModerationActionTargetUserUser0(ctx context.Context, exec bob.Executor, count int, moderationAction0 *ModerationAction, user1 *User) (*ModerationAction, error) {
	setter := &ModerationActionSetter{
		TargetUserID: func() *sql.Null[int64] {
			v := sql.Null[int64]{V: user1.UserID, Valid: true}
			return &v
		}(),
	}

	err := moderationAction0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachModerationActionTargetUserUser0: %w", err)
	}

	return moderationAction0, nil
}

func (moderationAction0 *ModerationAction) InsertTargetUserUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachModerationActionTargetUserUser0(ctx, exec, 1, moderationAction0, user1)
	if err != nil {
		return err
	}

	moderationAction0.R.TargetUserUser = user1

	user1.R.TargetUserModerationActions = append(user1.R.TargetUserModerationActions, moderationAction0)

	return nil
}

func (moderationAction0 *ModerationAction) AttachTargetUserUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachModerationActionTargetUserUser0(ctx, exec, 1, moderationAction0, user1)
	if err != nil {
		return err
	}

	moderationAction0.R.TargetUserUser = user1

	user1.R.TargetUserModerationActions = append(user1.R.TargetUserModerationActions, moderationAction0)

	return nil
}
