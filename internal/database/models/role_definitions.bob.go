// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/types"
)

// RoleDefinition is an object representing the database table.
type RoleDefinition struct {
	RoleID            int32                       `db:"role_id,pk" scan:"role_id" json:"role_id"`
	RoleName          string                      `db:"role_name" scan:"role_name" json:"role_name"`
	DisplayName       string                      `db:"display_name" scan:"display_name" json:"display_name"`
	Description       sql.Null[string]            `db:"description" scan:"description" json:"description"`
	Capabilities      types.JSON[json.RawMessage] `db:"capabilities" scan:"capabilities" json:"capabilities"`
	CorrelationAccess sql.Null[string]            `db:"correlation_access" scan:"correlation_access" json:"correlation_access"`
	Scope             sql.Null[string]            `db:"scope" scan:"scope" json:"scope"`
	TimeWindow        sql.Null[string]            `db:"time_window" scan:"time_window" json:"time_window"`
	CreatedAt         sql.Null[time.Time]         `db:"created_at" scan:"created_at" json:"created_at"`
}

// RoleDefinitionSlice is an alias for a slice of pointers to RoleDefinition.
// This should almost always be used instead of []*RoleDefinition.
type RoleDefinitionSlice []*RoleDefinition

// RoleDefinitions contains methods to work with the role_definitions table
var RoleDefinitions = psql.NewTablex[*RoleDefinition, RoleDefinitionSlice, *RoleDefinitionSetter]("", "role_definitions")

// RoleDefinitionsQuery is a query on the role_definitions table
type RoleDefinitionsQuery = *psql.ViewQuery[*RoleDefinition, RoleDefinitionSlice]

type roleDefinitionColumnNames struct {
	RoleID            string
	RoleName          string
	DisplayName       string
	Description       string
	Capabilities      string
	CorrelationAccess string
	Scope             string
	TimeWindow        string
	CreatedAt         string
}

var RoleDefinitionColumns = buildRoleDefinitionColumns("role_definitions")

type roleDefinitionColumns struct {
	tableAlias        string
	RoleID            psql.Expression
	RoleName          psql.Expression
	DisplayName       psql.Expression
	Description       psql.Expression
	Capabilities      psql.Expression
	CorrelationAccess psql.Expression
	Scope             psql.Expression
	TimeWindow        psql.Expression
	CreatedAt         psql.Expression
}

func (c roleDefinitionColumns) Alias() string {
	return c.tableAlias
}

func (roleDefinitionColumns) AliasedAs(alias string) roleDefinitionColumns {
	return buildRoleDefinitionColumns(alias)
}

func buildRoleDefinitionColumns(alias string) roleDefinitionColumns {
	return roleDefinitionColumns{
		tableAlias:        alias,
		RoleID:            psql.Quote(alias, "role_id"),
		RoleName:          psql.Quote(alias, "role_name"),
		DisplayName:       psql.Quote(alias, "display_name"),
		Description:       psql.Quote(alias, "description"),
		Capabilities:      psql.Quote(alias, "capabilities"),
		CorrelationAccess: psql.Quote(alias, "correlation_access"),
		Scope:             psql.Quote(alias, "scope"),
		TimeWindow:        psql.Quote(alias, "time_window"),
		CreatedAt:         psql.Quote(alias, "created_at"),
	}
}

type roleDefinitionWhere[Q psql.Filterable] struct {
	RoleID            psql.WhereMod[Q, int32]
	RoleName          psql.WhereMod[Q, string]
	DisplayName       psql.WhereMod[Q, string]
	Description       psql.WhereNullMod[Q, string]
	Capabilities      psql.WhereMod[Q, types.JSON[json.RawMessage]]
	CorrelationAccess psql.WhereNullMod[Q, string]
	Scope             psql.WhereNullMod[Q, string]
	TimeWindow        psql.WhereNullMod[Q, string]
	CreatedAt         psql.WhereNullMod[Q, time.Time]
}

func (roleDefinitionWhere[Q]) AliasedAs(alias string) roleDefinitionWhere[Q] {
	return buildRoleDefinitionWhere[Q](buildRoleDefinitionColumns(alias))
}

func buildRoleDefinitionWhere[Q psql.Filterable](cols roleDefinitionColumns) roleDefinitionWhere[Q] {
	return roleDefinitionWhere[Q]{
		RoleID:            psql.Where[Q, int32](cols.RoleID),
		RoleName:          psql.Where[Q, string](cols.RoleName),
		DisplayName:       psql.Where[Q, string](cols.DisplayName),
		Description:       psql.WhereNull[Q, string](cols.Description),
		Capabilities:      psql.Where[Q, types.JSON[json.RawMessage]](cols.Capabilities),
		CorrelationAccess: psql.WhereNull[Q, string](cols.CorrelationAccess),
		Scope:             psql.WhereNull[Q, string](cols.Scope),
		TimeWindow:        psql.WhereNull[Q, string](cols.TimeWindow),
		CreatedAt:         psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var RoleDefinitionErrors = &roleDefinitionErrors{
	ErrUniqueRoleDefinitionsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "role_definitions",
		columns: []string{"role_id"},
		s:       "role_definitions_pkey",
	},

	ErrUniqueRoleDefinitionsRoleNameKey: &UniqueConstraintError{
		schema:  "",
		table:   "role_definitions",
		columns: []string{"role_name"},
		s:       "role_definitions_role_name_key",
	},
}

type roleDefinitionErrors struct {
	ErrUniqueRoleDefinitionsPkey *UniqueConstraintError

	ErrUniqueRoleDefinitionsRoleNameKey *UniqueConstraintError
}

// RoleDefinitionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type RoleDefinitionSetter struct {
	RoleID            *int32                       `db:"role_id,pk" scan:"role_id" json:"role_id"`
	RoleName          *string                      `db:"role_name" scan:"role_name" json:"role_name"`
	DisplayName       *string                      `db:"display_name" scan:"display_name" json:"display_name"`
	Description       *sql.Null[string]            `db:"description" scan:"description" json:"description"`
	Capabilities      *types.JSON[json.RawMessage] `db:"capabilities" scan:"capabilities" json:"capabilities"`
	CorrelationAccess *sql.Null[string]            `db:"correlation_access" scan:"correlation_access" json:"correlation_access"`
	Scope             *sql.Null[string]            `db:"scope" scan:"scope" json:"scope"`
	TimeWindow        *sql.Null[string]            `db:"time_window" scan:"time_window" json:"time_window"`
	CreatedAt         *sql.Null[time.Time]         `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s RoleDefinitionSetter) SetColumns() []string {
	vals := make([]string, 0, 9)
	if s.RoleID != nil {
		vals = append(vals, "role_id")
	}

	if s.RoleName != nil {
		vals = append(vals, "role_name")
	}

	if s.DisplayName != nil {
		vals = append(vals, "display_name")
	}

	if s.Description != nil {
		vals = append(vals, "description")
	}

	if s.Capabilities != nil {
		vals = append(vals, "capabilities")
	}

	if s.CorrelationAccess != nil {
		vals = append(vals, "correlation_access")
	}

	if s.Scope != nil {
		vals = append(vals, "scope")
	}

	if s.TimeWindow != nil {
		vals = append(vals, "time_window")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s RoleDefinitionSetter) Overwrite(t *RoleDefinition) {
	if s.RoleID != nil {
		t.RoleID = *s.RoleID
	}
	if s.RoleName != nil {
		t.RoleName = *s.RoleName
	}
	if s.DisplayName != nil {
		t.DisplayName = *s.DisplayName
	}
	if s.Description != nil {
		t.Description = *s.Description
	}
	if s.Capabilities != nil {
		t.Capabilities = *s.Capabilities
	}
	if s.CorrelationAccess != nil {
		t.CorrelationAccess = *s.CorrelationAccess
	}
	if s.Scope != nil {
		t.Scope = *s.Scope
	}
	if s.TimeWindow != nil {
		t.TimeWindow = *s.TimeWindow
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *RoleDefinitionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return RoleDefinitions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 9)
		if s.RoleID != nil {
			vals[0] = psql.Arg(*s.RoleID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.RoleName != nil {
			vals[1] = psql.Arg(*s.RoleName)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.DisplayName != nil {
			vals[2] = psql.Arg(*s.DisplayName)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Description != nil {
			vals[3] = psql.Arg(*s.Description)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Capabilities != nil {
			vals[4] = psql.Arg(*s.Capabilities)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.CorrelationAccess != nil {
			vals[5] = psql.Arg(*s.CorrelationAccess)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Scope != nil {
			vals[6] = psql.Arg(*s.Scope)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.TimeWindow != nil {
			vals[7] = psql.Arg(*s.TimeWindow)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[8] = psql.Arg(*s.CreatedAt)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s RoleDefinitionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s RoleDefinitionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 9)

	if s.RoleID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role_id")...),
			psql.Arg(s.RoleID),
		}})
	}

	if s.RoleName != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role_name")...),
			psql.Arg(s.RoleName),
		}})
	}

	if s.DisplayName != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "display_name")...),
			psql.Arg(s.DisplayName),
		}})
	}

	if s.Description != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if s.Capabilities != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "capabilities")...),
			psql.Arg(s.Capabilities),
		}})
	}

	if s.CorrelationAccess != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "correlation_access")...),
			psql.Arg(s.CorrelationAccess),
		}})
	}

	if s.Scope != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "scope")...),
			psql.Arg(s.Scope),
		}})
	}

	if s.TimeWindow != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "time_window")...),
			psql.Arg(s.TimeWindow),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindRoleDefinition retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindRoleDefinition(ctx context.Context, exec bob.Executor, RoleIDPK int32, cols ...string) (*RoleDefinition, error) {
	if len(cols) == 0 {
		return RoleDefinitions.Query(
			SelectWhere.RoleDefinitions.RoleID.EQ(RoleIDPK),
		).One(ctx, exec)
	}

	return RoleDefinitions.Query(
		SelectWhere.RoleDefinitions.RoleID.EQ(RoleIDPK),
		sm.Columns(RoleDefinitions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// RoleDefinitionExists checks the presence of a single record by primary key
func RoleDefinitionExists(ctx context.Context, exec bob.Executor, RoleIDPK int32) (bool, error) {
	return RoleDefinitions.Query(
		SelectWhere.RoleDefinitions.RoleID.EQ(RoleIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after RoleDefinition is retrieved from the database
func (o *RoleDefinition) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RoleDefinitions.AfterSelectHooks.RunHooks(ctx, exec, RoleDefinitionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = RoleDefinitions.AfterInsertHooks.RunHooks(ctx, exec, RoleDefinitionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = RoleDefinitions.AfterUpdateHooks.RunHooks(ctx, exec, RoleDefinitionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = RoleDefinitions.AfterDeleteHooks.RunHooks(ctx, exec, RoleDefinitionSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the RoleDefinition
func (o *RoleDefinition) primaryKeyVals() bob.Expression {
	return psql.Arg(o.RoleID)
}

func (o *RoleDefinition) pkEQ() dialect.Expression {
	return psql.Quote("role_definitions", "role_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the RoleDefinition
func (o *RoleDefinition) Update(ctx context.Context, exec bob.Executor, s *RoleDefinitionSetter) error {
	v, err := RoleDefinitions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single RoleDefinition record with an executor
func (o *RoleDefinition) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := RoleDefinitions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the RoleDefinition using the executor
func (o *RoleDefinition) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := RoleDefinitions.Query(
		SelectWhere.RoleDefinitions.RoleID.EQ(o.RoleID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after RoleDefinitionSlice is retrieved from the database
func (o RoleDefinitionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RoleDefinitions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = RoleDefinitions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = RoleDefinitions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = RoleDefinitions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o RoleDefinitionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("role_definitions", "role_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o RoleDefinitionSlice) copyMatchingRows(from ...*RoleDefinition) {
	for i, old := range o {
		for _, new := range from {
			if new.RoleID != old.RoleID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o RoleDefinitionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RoleDefinitions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RoleDefinition:
				o.copyMatchingRows(retrieved)
			case []*RoleDefinition:
				o.copyMatchingRows(retrieved...)
			case RoleDefinitionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RoleDefinition or a slice of RoleDefinition
				// then run the AfterUpdateHooks on the slice
				_, err = RoleDefinitions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o RoleDefinitionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RoleDefinitions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RoleDefinition:
				o.copyMatchingRows(retrieved)
			case []*RoleDefinition:
				o.copyMatchingRows(retrieved...)
			case RoleDefinitionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RoleDefinition or a slice of RoleDefinition
				// then run the AfterDeleteHooks on the slice
				_, err = RoleDefinitions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o RoleDefinitionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals RoleDefinitionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RoleDefinitions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o RoleDefinitionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RoleDefinitions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o RoleDefinitionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := RoleDefinitions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
