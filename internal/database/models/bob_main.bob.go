// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"hash/maphash"

	"github.com/lib/pq"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
)

var TableNames = struct {
	APIKeys                string
	Comments               string
	ComplianceCorrelations string
	ComplianceReports      string
	CorrelationAudits      string
	DirectMessages         string
	IdentityMappings       string
	KeyUsageAudits         string
	MediaAttachments       string
	ModerationActions      string
	PerformanceMetrics     string
	PollVotes              string
	Polls                  string
	Posts                  string
	Pseudonyms             string
	Reports                string
	RoleDefinitions        string
	RoleKeys               string
	SchemaMigrations       string
	SubforumModerators     string
	SubforumSubscriptions  string
	Subforums              string
	SystemEvents           string
	SystemSettings         string
	UserBans               string
	UserBlocks             string
	UserPreferences        string
	Users                  string
	Votes                  string
}{
	APIKeys:                "api_keys",
	Comments:               "comments",
	ComplianceCorrelations: "compliance_correlations",
	ComplianceReports:      "compliance_reports",
	CorrelationAudits:      "correlation_audit",
	DirectMessages:         "direct_messages",
	IdentityMappings:       "identity_mappings",
	KeyUsageAudits:         "key_usage_audit",
	MediaAttachments:       "media_attachments",
	ModerationActions:      "moderation_actions",
	PerformanceMetrics:     "performance_metrics",
	PollVotes:              "poll_votes",
	Polls:                  "polls",
	Posts:                  "posts",
	Pseudonyms:             "pseudonyms",
	Reports:                "reports",
	RoleDefinitions:        "role_definitions",
	RoleKeys:               "role_keys",
	SchemaMigrations:       "schema_migrations",
	SubforumModerators:     "subforum_moderators",
	SubforumSubscriptions:  "subforum_subscriptions",
	Subforums:              "subforums",
	SystemEvents:           "system_events",
	SystemSettings:         "system_settings",
	UserBans:               "user_bans",
	UserBlocks:             "user_blocks",
	UserPreferences:        "user_preferences",
	Users:                  "users",
	Votes:                  "votes",
}

var ColumnNames = struct {
	APIKeys                apiKeyColumnNames
	Comments               commentColumnNames
	ComplianceCorrelations complianceCorrelationColumnNames
	ComplianceReports      complianceReportColumnNames
	CorrelationAudits      correlationAuditColumnNames
	DirectMessages         directMessageColumnNames
	IdentityMappings       identityMappingColumnNames
	KeyUsageAudits         keyUsageAuditColumnNames
	MediaAttachments       mediaAttachmentColumnNames
	ModerationActions      moderationActionColumnNames
	PerformanceMetrics     performanceMetricColumnNames
	PollVotes              pollVoteColumnNames
	Polls                  pollColumnNames
	Posts                  postColumnNames
	Pseudonyms             pseudonymColumnNames
	Reports                reportColumnNames
	RoleDefinitions        roleDefinitionColumnNames
	RoleKeys               roleKeyColumnNames
	SchemaMigrations       schemaMigrationColumnNames
	SubforumModerators     subforumModeratorColumnNames
	SubforumSubscriptions  subforumSubscriptionColumnNames
	Subforums              subforumColumnNames
	SystemEvents           systemEventColumnNames
	SystemSettings         systemSettingColumnNames
	UserBans               userBanColumnNames
	UserBlocks             userBlockColumnNames
	UserPreferences        userPreferenceColumnNames
	Users                  userColumnNames
	Votes                  voteColumnNames
}{
	APIKeys: apiKeyColumnNames{
		KeyID:       "key_id",
		KeyName:     "key_name",
		KeyHash:     "key_hash",
		Permissions: "permissions",
		CreatedAt:   "created_at",
		ExpiresAt:   "expires_at",
		IsActive:    "is_active",
		LastUsedAt:  "last_used_at",
		PseudonymID: "pseudonym_id",
	},
	Comments: commentColumnNames{
		CommentID:            "comment_id",
		PostID:               "post_id",
		ParentCommentID:      "parent_comment_id",
		Content:              "content",
		CreatedAt:            "created_at",
		UpdatedAt:            "updated_at",
		Score:                "score",
		Upvotes:              "upvotes",
		Downvotes:            "downvotes",
		IsEdited:             "is_edited",
		EditedAt:             "edited_at",
		EditReason:           "edit_reason",
		IsRemoved:            "is_removed",
		RemovedByUserID:      "removed_by_user_id",
		RemovedByPseudonymID: "removed_by_pseudonym_id",
		RemovalReason:        "removal_reason",
		RemovedAt:            "removed_at",
		PseudonymID:          "pseudonym_id",
	},
	ComplianceCorrelations: complianceCorrelationColumnNames{
		CorrelationID:    "correlation_id",
		ReportID:         "report_id",
		AuditID:          "audit_id",
		CorrelationScope: "correlation_scope",
		CreatedAt:        "created_at",
	},
	ComplianceReports: complianceReportColumnNames{
		ReportID:            "report_id",
		ReportType:          "report_type",
		RequestingAuthority: "requesting_authority",
		RequestID:           "request_id",
		RequestDate:         "request_date",
		DueDate:             "due_date",
		Status:              "status",
		ScopeDescription:    "scope_description",
		LegalBasis:          "legal_basis",
		AssignedUserID:      "assigned_user_id",
		CreatedAt:           "created_at",
		CompletedAt:         "completed_at",
		Notes:               "notes",
	},
	CorrelationAudits: correlationAuditColumnNames{
		AuditID:              "audit_id",
		UserID:               "user_id",
		PseudonymID:          "pseudonym_id",
		AdminUsername:        "admin_username",
		RoleUsed:             "role_used",
		RequestedPseudonym:   "requested_pseudonym",
		RequestedFingerprint: "requested_fingerprint",
		Justification:        "justification",
		CorrelationType:      "correlation_type",
		CorrelationResult:    "correlation_result",
		Timestamp:            "timestamp",
		LegalBasis:           "legal_basis",
		IncidentID:           "incident_id",
		RequestSource:        "request_source",
		IPAddress:            "ip_address",
		UserAgent:            "user_agent",
	},
	DirectMessages: directMessageColumnNames{
		MessageID:            "message_id",
		SenderPseudonymID:    "sender_pseudonym_id",
		RecipientPseudonymID: "recipient_pseudonym_id",
		Content:              "content",
		IsRead:               "is_read",
		CreatedAt:            "created_at",
	},
	IdentityMappings: identityMappingColumnNames{
		MappingID:                 "mapping_id",
		Fingerprint:               "fingerprint",
		PseudonymID:               "pseudonym_id",
		EncryptedRealIdentity:     "encrypted_real_identity",
		EncryptedPseudonymMapping: "encrypted_pseudonym_mapping",
		KeyVersion:                "key_version",
		CreatedAt:                 "created_at",
		UpdatedAt:                 "updated_at",
		IsActive:                  "is_active",
		UserID:                    "user_id",
	},
	KeyUsageAudits: keyUsageAuditColumnNames{
		UsageID:           "usage_id",
		KeyID:             "key_id",
		UserID:            "user_id",
		OperationType:     "operation_type",
		TargetFingerprint: "target_fingerprint",
		TargetPseudonym:   "target_pseudonym",
		Success:           "success",
		ErrorMessage:      "error_message",
		Timestamp:         "timestamp",
		IPAddress:         "ip_address",
		UserAgent:         "user_agent",
	},
	MediaAttachments: mediaAttachmentColumnNames{
		AttachmentID:    "attachment_id",
		PostID:          "post_id",
		FileName:        "file_name",
		FilePath:        "file_path",
		FileSize:        "file_size",
		MimeType:        "mime_type",
		Width:           "width",
		Height:          "height",
		DurationSeconds: "duration_seconds",
		CreatedAt:       "created_at",
	},
	ModerationActions: moderationActionColumnNames{
		ActionID:             "action_id",
		ModeratorUserID:      "moderator_user_id",
		ModeratorPseudonymID: "moderator_pseudonym_id",
		SubforumID:           "subforum_id",
		ActionType:           "action_type",
		TargetContentType:    "target_content_type",
		TargetContentID:      "target_content_id",
		TargetUserID:         "target_user_id",
		ActionDetails:        "action_details",
		CreatedAt:            "created_at",
	},
	PerformanceMetrics: performanceMetricColumnNames{
		MetricID:    "metric_id",
		MetricName:  "metric_name",
		MetricValue: "metric_value",
		MetricUnit:  "metric_unit",
		Component:   "component",
		Timestamp:   "timestamp",
	},
	PollVotes: pollVoteColumnNames{
		VoteID:          "vote_id",
		PollID:          "poll_id",
		PseudonymID:     "pseudonym_id",
		SelectedOptions: "selected_options",
		CreatedAt:       "created_at",
	},
	Polls: pollColumnNames{
		PollID:             "poll_id",
		PostID:             "post_id",
		Question:           "question",
		Options:            "options",
		AllowMultipleVotes: "allow_multiple_votes",
		ExpiresAt:          "expires_at",
		CreatedAt:          "created_at",
	},
	Posts: postColumnNames{
		PostID:               "post_id",
		SubforumID:           "subforum_id",
		Title:                "title",
		Content:              "content",
		PostType:             "post_type",
		URL:                  "url",
		IsSelfPost:           "is_self_post",
		IsNSFW:               "is_nsfw",
		IsSpoiler:            "is_spoiler",
		IsLocked:             "is_locked",
		IsStickied:           "is_stickied",
		IsArchived:           "is_archived",
		CreatedAt:            "created_at",
		UpdatedAt:            "updated_at",
		Score:                "score",
		Upvotes:              "upvotes",
		Downvotes:            "downvotes",
		CommentCount:         "comment_count",
		ViewCount:            "view_count",
		IsRemoved:            "is_removed",
		RemovedByUserID:      "removed_by_user_id",
		RemovedByPseudonymID: "removed_by_pseudonym_id",
		RemovalReason:        "removal_reason",
		RemovedAt:            "removed_at",
		PseudonymID:          "pseudonym_id",
	},
	Pseudonyms: pseudonymColumnNames{
		PseudonymID:         "pseudonym_id",
		UserID:              "user_id",
		DisplayName:         "display_name",
		KarmaScore:          "karma_score",
		CreatedAt:           "created_at",
		LastActiveAt:        "last_active_at",
		IsActive:            "is_active",
		Bio:                 "bio",
		AvatarURL:           "avatar_url",
		WebsiteURL:          "website_url",
		ShowKarma:           "show_karma",
		AllowDirectMessages: "allow_direct_messages",
	},
	Reports: reportColumnNames{
		ReportID:              "report_id",
		ReporterPseudonymID:   "reporter_pseudonym_id",
		ContentType:           "content_type",
		ContentID:             "content_id",
		ReportedPseudonymID:   "reported_pseudonym_id",
		ReportReason:          "report_reason",
		ReportDetails:         "report_details",
		CreatedAt:             "created_at",
		Status:                "status",
		ResolvedByUserID:      "resolved_by_user_id",
		ResolvedByPseudonymID: "resolved_by_pseudonym_id",
		ResolutionNotes:       "resolution_notes",
		ResolvedAt:            "resolved_at",
	},
	RoleDefinitions: roleDefinitionColumnNames{
		RoleID:            "role_id",
		RoleName:          "role_name",
		DisplayName:       "display_name",
		Description:       "description",
		Capabilities:      "capabilities",
		CorrelationAccess: "correlation_access",
		Scope:             "scope",
		TimeWindow:        "time_window",
		CreatedAt:         "created_at",
	},
	RoleKeys: roleKeyColumnNames{
		KeyID:        "key_id",
		RoleName:     "role_name",
		Scope:        "scope",
		KeyData:      "key_data",
		KeyVersion:   "key_version",
		Capabilities: "capabilities",
		CreatedAt:    "created_at",
		ExpiresAt:    "expires_at",
		IsActive:     "is_active",
		CreatedBy:    "created_by",
	},
	SchemaMigrations: schemaMigrationColumnNames{
		ID:        "id",
		AppliedAt: "applied_at",
	},
	SubforumModerators: subforumModeratorColumnNames{
		ModeratorID:   "moderator_id",
		SubforumID:    "subforum_id",
		UserID:        "user_id",
		PseudonymID:   "pseudonym_id",
		Role:          "role",
		AddedAt:       "added_at",
		AddedByUserID: "added_by_user_id",
		Permissions:   "permissions",
	},
	SubforumSubscriptions: subforumSubscriptionColumnNames{
		SubscriptionID: "subscription_id",
		PseudonymID:    "pseudonym_id",
		SubforumID:     "subforum_id",
		SubscribedAt:   "subscribed_at",
		IsFavorite:     "is_favorite",
	},
	Subforums: subforumColumnNames{
		SubforumID:             "subforum_id",
		Name:                   "name",
		DisplayName:            "display_name",
		Description:            "description",
		SidebarText:            "sidebar_text",
		RulesText:              "rules_text",
		CreatedAt:              "created_at",
		CreatedByUserID:        "created_by_user_id",
		SubscriberCount:        "subscriber_count",
		PostCount:              "post_count",
		IsPrivate:              "is_private",
		IsRestricted:           "is_restricted",
		IsNSFW:                 "is_nsfw",
		IsQuarantined:          "is_quarantined",
		AllowImages:            "allow_images",
		AllowVideos:            "allow_videos",
		AllowPolls:             "allow_polls",
		RequireFlair:           "require_flair",
		MinimumAccountAgeHours: "minimum_account_age_hours",
		MinimumKarmaRequired:   "minimum_karma_required",
		UpdatedAt:              "updated_at",
	},
	SystemEvents: systemEventColumnNames{
		EventID:         "event_id",
		EventType:       "event_type",
		EventSeverity:   "event_severity",
		EventMessage:    "event_message",
		EventData:       "event_data",
		SourceComponent: "source_component",
		Timestamp:       "timestamp",
	},
	SystemSettings: systemSettingColumnNames{
		SettingKey:   "setting_key",
		SettingValue: "setting_value",
		SettingType:  "setting_type",
		Description:  "description",
		UpdatedAt:    "updated_at",
		UpdatedBy:    "updated_by",
	},
	UserBans: userBanColumnNames{
		BanID:               "ban_id",
		SubforumID:          "subforum_id",
		BannedUserID:        "banned_user_id",
		BannedByUserID:      "banned_by_user_id",
		BannedByPseudonymID: "banned_by_pseudonym_id",
		BanReason:           "ban_reason",
		IsPermanent:         "is_permanent",
		ExpiresAt:           "expires_at",
		CreatedAt:           "created_at",
		IsActive:            "is_active",
	},
	UserBlocks: userBlockColumnNames{
		BlockID:            "block_id",
		BlockerPseudonymID: "blocker_pseudonym_id",
		BlockedPseudonymID: "blocked_pseudonym_id",
		BlockedUserID:      "blocked_user_id",
		CreatedAt:          "created_at",
	},
	UserPreferences: userPreferenceColumnNames{
		UserID:             "user_id",
		Timezone:           "timezone",
		Language:           "language",
		Theme:              "theme",
		EmailNotifications: "email_notifications",
		PushNotifications:  "push_notifications",
		AutoHideNSFW:       "auto_hide_nsfw",
		AutoHideSpoilers:   "auto_hide_spoilers",
		CreatedAt:          "created_at",
		UpdatedAt:          "updated_at",
	},
	Users: userColumnNames{
		UserID:              "user_id",
		Email:               "email",
		PasswordHash:        "password_hash",
		CreatedAt:           "created_at",
		LastActiveAt:        "last_active_at",
		IsActive:            "is_active",
		IsSuspended:         "is_suspended",
		SuspensionReason:    "suspension_reason",
		SuspensionExpiresAt: "suspension_expires_at",
		Roles:               "roles",
		Capabilities:        "capabilities",
		AdminUsername:       "admin_username",
		AdminPasswordHash:   "admin_password_hash",
		MfaEnabled:          "mfa_enabled",
		MfaSecret:           "mfa_secret",
		ModeratedSubforums:  "moderated_subforums",
		AdminScope:          "admin_scope",
		UpdatedAt:           "updated_at",
	},
	Votes: voteColumnNames{
		VoteID:      "vote_id",
		PseudonymID: "pseudonym_id",
		ContentType: "content_type",
		ContentID:   "content_id",
		VoteValue:   "vote_value",
		CreatedAt:   "created_at",
		UpdatedAt:   "updated_at",
	},
}

var (
	SelectWhere     = Where[*dialect.SelectQuery]()
	UpdateWhere     = Where[*dialect.UpdateQuery]()
	DeleteWhere     = Where[*dialect.DeleteQuery]()
	OnConflictWhere = Where[*clause.ConflictClause]() // Used in ON CONFLICT DO UPDATE
)

func Where[Q psql.Filterable]() struct {
	APIKeys                apiKeyWhere[Q]
	Comments               commentWhere[Q]
	ComplianceCorrelations complianceCorrelationWhere[Q]
	ComplianceReports      complianceReportWhere[Q]
	CorrelationAudits      correlationAuditWhere[Q]
	DirectMessages         directMessageWhere[Q]
	IdentityMappings       identityMappingWhere[Q]
	KeyUsageAudits         keyUsageAuditWhere[Q]
	MediaAttachments       mediaAttachmentWhere[Q]
	ModerationActions      moderationActionWhere[Q]
	PerformanceMetrics     performanceMetricWhere[Q]
	PollVotes              pollVoteWhere[Q]
	Polls                  pollWhere[Q]
	Posts                  postWhere[Q]
	Pseudonyms             pseudonymWhere[Q]
	Reports                reportWhere[Q]
	RoleDefinitions        roleDefinitionWhere[Q]
	RoleKeys               roleKeyWhere[Q]
	SchemaMigrations       schemaMigrationWhere[Q]
	SubforumModerators     subforumModeratorWhere[Q]
	SubforumSubscriptions  subforumSubscriptionWhere[Q]
	Subforums              subforumWhere[Q]
	SystemEvents           systemEventWhere[Q]
	SystemSettings         systemSettingWhere[Q]
	UserBans               userBanWhere[Q]
	UserBlocks             userBlockWhere[Q]
	UserPreferences        userPreferenceWhere[Q]
	Users                  userWhere[Q]
	Votes                  voteWhere[Q]
} {
	return struct {
		APIKeys                apiKeyWhere[Q]
		Comments               commentWhere[Q]
		ComplianceCorrelations complianceCorrelationWhere[Q]
		ComplianceReports      complianceReportWhere[Q]
		CorrelationAudits      correlationAuditWhere[Q]
		DirectMessages         directMessageWhere[Q]
		IdentityMappings       identityMappingWhere[Q]
		KeyUsageAudits         keyUsageAuditWhere[Q]
		MediaAttachments       mediaAttachmentWhere[Q]
		ModerationActions      moderationActionWhere[Q]
		PerformanceMetrics     performanceMetricWhere[Q]
		PollVotes              pollVoteWhere[Q]
		Polls                  pollWhere[Q]
		Posts                  postWhere[Q]
		Pseudonyms             pseudonymWhere[Q]
		Reports                reportWhere[Q]
		RoleDefinitions        roleDefinitionWhere[Q]
		RoleKeys               roleKeyWhere[Q]
		SchemaMigrations       schemaMigrationWhere[Q]
		SubforumModerators     subforumModeratorWhere[Q]
		SubforumSubscriptions  subforumSubscriptionWhere[Q]
		Subforums              subforumWhere[Q]
		SystemEvents           systemEventWhere[Q]
		SystemSettings         systemSettingWhere[Q]
		UserBans               userBanWhere[Q]
		UserBlocks             userBlockWhere[Q]
		UserPreferences        userPreferenceWhere[Q]
		Users                  userWhere[Q]
		Votes                  voteWhere[Q]
	}{
		APIKeys:                buildAPIKeyWhere[Q](APIKeyColumns),
		Comments:               buildCommentWhere[Q](CommentColumns),
		ComplianceCorrelations: buildComplianceCorrelationWhere[Q](ComplianceCorrelationColumns),
		ComplianceReports:      buildComplianceReportWhere[Q](ComplianceReportColumns),
		CorrelationAudits:      buildCorrelationAuditWhere[Q](CorrelationAuditColumns),
		DirectMessages:         buildDirectMessageWhere[Q](DirectMessageColumns),
		IdentityMappings:       buildIdentityMappingWhere[Q](IdentityMappingColumns),
		KeyUsageAudits:         buildKeyUsageAuditWhere[Q](KeyUsageAuditColumns),
		MediaAttachments:       buildMediaAttachmentWhere[Q](MediaAttachmentColumns),
		ModerationActions:      buildModerationActionWhere[Q](ModerationActionColumns),
		PerformanceMetrics:     buildPerformanceMetricWhere[Q](PerformanceMetricColumns),
		PollVotes:              buildPollVoteWhere[Q](PollVoteColumns),
		Polls:                  buildPollWhere[Q](PollColumns),
		Posts:                  buildPostWhere[Q](PostColumns),
		Pseudonyms:             buildPseudonymWhere[Q](PseudonymColumns),
		Reports:                buildReportWhere[Q](ReportColumns),
		RoleDefinitions:        buildRoleDefinitionWhere[Q](RoleDefinitionColumns),
		RoleKeys:               buildRoleKeyWhere[Q](RoleKeyColumns),
		SchemaMigrations:       buildSchemaMigrationWhere[Q](SchemaMigrationColumns),
		SubforumModerators:     buildSubforumModeratorWhere[Q](SubforumModeratorColumns),
		SubforumSubscriptions:  buildSubforumSubscriptionWhere[Q](SubforumSubscriptionColumns),
		Subforums:              buildSubforumWhere[Q](SubforumColumns),
		SystemEvents:           buildSystemEventWhere[Q](SystemEventColumns),
		SystemSettings:         buildSystemSettingWhere[Q](SystemSettingColumns),
		UserBans:               buildUserBanWhere[Q](UserBanColumns),
		UserBlocks:             buildUserBlockWhere[Q](UserBlockColumns),
		UserPreferences:        buildUserPreferenceWhere[Q](UserPreferenceColumns),
		Users:                  buildUserWhere[Q](UserColumns),
		Votes:                  buildVoteWhere[Q](VoteColumns),
	}
}

var Preload = getPreloaders()

type preloaders struct {
	APIKey                apiKeyPreloader
	Comment               commentPreloader
	ComplianceCorrelation complianceCorrelationPreloader
	ComplianceReport      complianceReportPreloader
	CorrelationAudit      correlationAuditPreloader
	DirectMessage         directMessagePreloader
	IdentityMapping       identityMappingPreloader
	KeyUsageAudit         keyUsageAuditPreloader
	MediaAttachment       mediaAttachmentPreloader
	ModerationAction      moderationActionPreloader
	PollVote              pollVotePreloader
	Poll                  pollPreloader
	Post                  postPreloader
	Pseudonym             pseudonymPreloader
	Report                reportPreloader
	RoleKey               roleKeyPreloader
	SubforumModerator     subforumModeratorPreloader
	SubforumSubscription  subforumSubscriptionPreloader
	Subforum              subforumPreloader
	SystemSetting         systemSettingPreloader
	UserBan               userBanPreloader
	UserBlock             userBlockPreloader
	UserPreference        userPreferencePreloader
	User                  userPreloader
	Vote                  votePreloader
}

func getPreloaders() preloaders {
	return preloaders{
		APIKey:                buildAPIKeyPreloader(),
		Comment:               buildCommentPreloader(),
		ComplianceCorrelation: buildComplianceCorrelationPreloader(),
		ComplianceReport:      buildComplianceReportPreloader(),
		CorrelationAudit:      buildCorrelationAuditPreloader(),
		DirectMessage:         buildDirectMessagePreloader(),
		IdentityMapping:       buildIdentityMappingPreloader(),
		KeyUsageAudit:         buildKeyUsageAuditPreloader(),
		MediaAttachment:       buildMediaAttachmentPreloader(),
		ModerationAction:      buildModerationActionPreloader(),
		PollVote:              buildPollVotePreloader(),
		Poll:                  buildPollPreloader(),
		Post:                  buildPostPreloader(),
		Pseudonym:             buildPseudonymPreloader(),
		Report:                buildReportPreloader(),
		RoleKey:               buildRoleKeyPreloader(),
		SubforumModerator:     buildSubforumModeratorPreloader(),
		SubforumSubscription:  buildSubforumSubscriptionPreloader(),
		Subforum:              buildSubforumPreloader(),
		SystemSetting:         buildSystemSettingPreloader(),
		UserBan:               buildUserBanPreloader(),
		UserBlock:             buildUserBlockPreloader(),
		UserPreference:        buildUserPreferencePreloader(),
		User:                  buildUserPreloader(),
		Vote:                  buildVotePreloader(),
	}
}

var (
	SelectThenLoad = getThenLoaders[*dialect.SelectQuery]()
	InsertThenLoad = getThenLoaders[*dialect.InsertQuery]()
	UpdateThenLoad = getThenLoaders[*dialect.UpdateQuery]()
)

type thenLoaders[Q orm.Loadable] struct {
	APIKey                apiKeyThenLoader[Q]
	Comment               commentThenLoader[Q]
	ComplianceCorrelation complianceCorrelationThenLoader[Q]
	ComplianceReport      complianceReportThenLoader[Q]
	CorrelationAudit      correlationAuditThenLoader[Q]
	DirectMessage         directMessageThenLoader[Q]
	IdentityMapping       identityMappingThenLoader[Q]
	KeyUsageAudit         keyUsageAuditThenLoader[Q]
	MediaAttachment       mediaAttachmentThenLoader[Q]
	ModerationAction      moderationActionThenLoader[Q]
	PollVote              pollVoteThenLoader[Q]
	Poll                  pollThenLoader[Q]
	Post                  postThenLoader[Q]
	Pseudonym             pseudonymThenLoader[Q]
	Report                reportThenLoader[Q]
	RoleKey               roleKeyThenLoader[Q]
	SubforumModerator     subforumModeratorThenLoader[Q]
	SubforumSubscription  subforumSubscriptionThenLoader[Q]
	Subforum              subforumThenLoader[Q]
	SystemSetting         systemSettingThenLoader[Q]
	UserBan               userBanThenLoader[Q]
	UserBlock             userBlockThenLoader[Q]
	UserPreference        userPreferenceThenLoader[Q]
	User                  userThenLoader[Q]
	Vote                  voteThenLoader[Q]
}

func getThenLoaders[Q orm.Loadable]() thenLoaders[Q] {
	return thenLoaders[Q]{
		APIKey:                buildAPIKeyThenLoader[Q](),
		Comment:               buildCommentThenLoader[Q](),
		ComplianceCorrelation: buildComplianceCorrelationThenLoader[Q](),
		ComplianceReport:      buildComplianceReportThenLoader[Q](),
		CorrelationAudit:      buildCorrelationAuditThenLoader[Q](),
		DirectMessage:         buildDirectMessageThenLoader[Q](),
		IdentityMapping:       buildIdentityMappingThenLoader[Q](),
		KeyUsageAudit:         buildKeyUsageAuditThenLoader[Q](),
		MediaAttachment:       buildMediaAttachmentThenLoader[Q](),
		ModerationAction:      buildModerationActionThenLoader[Q](),
		PollVote:              buildPollVoteThenLoader[Q](),
		Poll:                  buildPollThenLoader[Q](),
		Post:                  buildPostThenLoader[Q](),
		Pseudonym:             buildPseudonymThenLoader[Q](),
		Report:                buildReportThenLoader[Q](),
		RoleKey:               buildRoleKeyThenLoader[Q](),
		SubforumModerator:     buildSubforumModeratorThenLoader[Q](),
		SubforumSubscription:  buildSubforumSubscriptionThenLoader[Q](),
		Subforum:              buildSubforumThenLoader[Q](),
		SystemSetting:         buildSystemSettingThenLoader[Q](),
		UserBan:               buildUserBanThenLoader[Q](),
		UserBlock:             buildUserBlockThenLoader[Q](),
		UserPreference:        buildUserPreferenceThenLoader[Q](),
		User:                  buildUserThenLoader[Q](),
		Vote:                  buildVoteThenLoader[Q](),
	}
}

func thenLoadBuilder[Q orm.Loadable, T any](name string, f func(context.Context, bob.Executor, T, ...bob.Mod[*dialect.SelectQuery]) error) func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
	return func(queryMods ...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
		return orm.Loader[Q](func(ctx context.Context, exec bob.Executor, retrieved any) error {
			loader, isLoader := retrieved.(T)
			if !isLoader {
				return fmt.Errorf("object %T cannot load %q", retrieved, name)
			}

			err := f(ctx, exec, loader, queryMods...)

			// Don't cause an issue due to missing relationships
			if errors.Is(err, sql.ErrNoRows) {
				return nil
			}

			return err
		})
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]()
	UpdateJoins = getJoins[*dialect.UpdateQuery]()
	DeleteJoins = getJoins[*dialect.DeleteQuery]()
)

type joinSet[Q interface{ aliasedAs(string) Q }] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

func (j joinSet[Q]) AliasedAs(alias string) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: j.InnerJoin.aliasedAs(alias),
		LeftJoin:  j.LeftJoin.aliasedAs(alias),
		RightJoin: j.RightJoin.aliasedAs(alias),
	}
}

type joins[Q dialect.Joinable] struct {
	APIKeys                joinSet[apiKeyJoins[Q]]
	Comments               joinSet[commentJoins[Q]]
	ComplianceCorrelations joinSet[complianceCorrelationJoins[Q]]
	ComplianceReports      joinSet[complianceReportJoins[Q]]
	CorrelationAudits      joinSet[correlationAuditJoins[Q]]
	DirectMessages         joinSet[directMessageJoins[Q]]
	IdentityMappings       joinSet[identityMappingJoins[Q]]
	KeyUsageAudits         joinSet[keyUsageAuditJoins[Q]]
	MediaAttachments       joinSet[mediaAttachmentJoins[Q]]
	ModerationActions      joinSet[moderationActionJoins[Q]]
	PollVotes              joinSet[pollVoteJoins[Q]]
	Polls                  joinSet[pollJoins[Q]]
	Posts                  joinSet[postJoins[Q]]
	Pseudonyms             joinSet[pseudonymJoins[Q]]
	Reports                joinSet[reportJoins[Q]]
	RoleKeys               joinSet[roleKeyJoins[Q]]
	SubforumModerators     joinSet[subforumModeratorJoins[Q]]
	SubforumSubscriptions  joinSet[subforumSubscriptionJoins[Q]]
	Subforums              joinSet[subforumJoins[Q]]
	SystemSettings         joinSet[systemSettingJoins[Q]]
	UserBans               joinSet[userBanJoins[Q]]
	UserBlocks             joinSet[userBlockJoins[Q]]
	UserPreferences        joinSet[userPreferenceJoins[Q]]
	Users                  joinSet[userJoins[Q]]
	Votes                  joinSet[voteJoins[Q]]
}

func buildJoinSet[Q interface{ aliasedAs(string) Q }, C any, F func(C, string) Q](c C, f F) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: f(c, clause.InnerJoin),
		LeftJoin:  f(c, clause.LeftJoin),
		RightJoin: f(c, clause.RightJoin),
	}
}

func getJoins[Q dialect.Joinable]() joins[Q] {
	return joins[Q]{
		APIKeys:                buildJoinSet[apiKeyJoins[Q]](APIKeyColumns, buildAPIKeyJoins),
		Comments:               buildJoinSet[commentJoins[Q]](CommentColumns, buildCommentJoins),
		ComplianceCorrelations: buildJoinSet[complianceCorrelationJoins[Q]](ComplianceCorrelationColumns, buildComplianceCorrelationJoins),
		ComplianceReports:      buildJoinSet[complianceReportJoins[Q]](ComplianceReportColumns, buildComplianceReportJoins),
		CorrelationAudits:      buildJoinSet[correlationAuditJoins[Q]](CorrelationAuditColumns, buildCorrelationAuditJoins),
		DirectMessages:         buildJoinSet[directMessageJoins[Q]](DirectMessageColumns, buildDirectMessageJoins),
		IdentityMappings:       buildJoinSet[identityMappingJoins[Q]](IdentityMappingColumns, buildIdentityMappingJoins),
		KeyUsageAudits:         buildJoinSet[keyUsageAuditJoins[Q]](KeyUsageAuditColumns, buildKeyUsageAuditJoins),
		MediaAttachments:       buildJoinSet[mediaAttachmentJoins[Q]](MediaAttachmentColumns, buildMediaAttachmentJoins),
		ModerationActions:      buildJoinSet[moderationActionJoins[Q]](ModerationActionColumns, buildModerationActionJoins),
		PollVotes:              buildJoinSet[pollVoteJoins[Q]](PollVoteColumns, buildPollVoteJoins),
		Polls:                  buildJoinSet[pollJoins[Q]](PollColumns, buildPollJoins),
		Posts:                  buildJoinSet[postJoins[Q]](PostColumns, buildPostJoins),
		Pseudonyms:             buildJoinSet[pseudonymJoins[Q]](PseudonymColumns, buildPseudonymJoins),
		Reports:                buildJoinSet[reportJoins[Q]](ReportColumns, buildReportJoins),
		RoleKeys:               buildJoinSet[roleKeyJoins[Q]](RoleKeyColumns, buildRoleKeyJoins),
		SubforumModerators:     buildJoinSet[subforumModeratorJoins[Q]](SubforumModeratorColumns, buildSubforumModeratorJoins),
		SubforumSubscriptions:  buildJoinSet[subforumSubscriptionJoins[Q]](SubforumSubscriptionColumns, buildSubforumSubscriptionJoins),
		Subforums:              buildJoinSet[subforumJoins[Q]](SubforumColumns, buildSubforumJoins),
		SystemSettings:         buildJoinSet[systemSettingJoins[Q]](SystemSettingColumns, buildSystemSettingJoins),
		UserBans:               buildJoinSet[userBanJoins[Q]](UserBanColumns, buildUserBanJoins),
		UserBlocks:             buildJoinSet[userBlockJoins[Q]](UserBlockColumns, buildUserBlockJoins),
		UserPreferences:        buildJoinSet[userPreferenceJoins[Q]](UserPreferenceColumns, buildUserPreferenceJoins),
		Users:                  buildJoinSet[userJoins[Q]](UserColumns, buildUserJoins),
		Votes:                  buildJoinSet[voteJoins[Q]](VoteColumns, buildVoteJoins),
	}
}

type modAs[Q any, C interface{ AliasedAs(string) C }] struct {
	c C
	f func(C) bob.Mod[Q]
}

func (m modAs[Q, C]) Apply(q Q) {
	m.f(m.c).Apply(q)
}

func (m modAs[Q, C]) AliasedAs(alias string) bob.Mod[Q] {
	m.c = m.c.AliasedAs(alias)
	return m
}

func randInt() int64 {
	out := int64(new(maphash.Hash).Sum64())

	if out < 0 {
		return -out % 10000
	}

	return out % 10000
}

// ErrUniqueConstraint captures all unique constraint errors by explicitly leaving `s` empty.
var ErrUniqueConstraint = &UniqueConstraintError{s: ""}

type UniqueConstraintError struct {
	// schema is the schema where the unique constraint is defined.
	schema string
	// table is the name of the table where the unique constraint is defined.
	table string
	// columns are the columns constituting the unique constraint.
	columns []string
	// s is a string uniquely identifying the constraint in the raw error message returned from the database.
	s string
}

func (e *UniqueConstraintError) Error() string {
	return e.s
}

func (e *UniqueConstraintError) Is(target error) bool {
	err, ok := target.(*pq.Error)
	if !ok {
		return false
	}
	return err.Code == "23505" && (e.s == "" || err.Constraint == e.s)
}
