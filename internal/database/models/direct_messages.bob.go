// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// DirectMessage is an object representing the database table.
type DirectMessage struct {
	MessageID            int64               `db:"message_id,pk" scan:"message_id" json:"message_id"`
	SenderPseudonymID    string              `db:"sender_pseudonym_id" scan:"sender_pseudonym_id" json:"sender_pseudonym_id"`
	RecipientPseudonymID string              `db:"recipient_pseudonym_id" scan:"recipient_pseudonym_id" json:"recipient_pseudonym_id"`
	Content              string              `db:"content" scan:"content" json:"content"`
	IsRead               sql.Null[bool]      `db:"is_read" scan:"is_read" json:"is_read"`
	CreatedAt            sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`

	R directMessageR `db:"-" scan:"rel" json:"rel"`
}

// DirectMessageSlice is an alias for a slice of pointers to DirectMessage.
// This should almost always be used instead of []*DirectMessage.
type DirectMessageSlice []*DirectMessage

// DirectMessages contains methods to work with the direct_messages table
var DirectMessages = psql.NewTablex[*DirectMessage, DirectMessageSlice, *DirectMessageSetter]("", "direct_messages")

// DirectMessagesQuery is a query on the direct_messages table
type DirectMessagesQuery = *psql.ViewQuery[*DirectMessage, DirectMessageSlice]

// directMessageR is where relationships are stored.
type directMessageR struct {
	RecipientPseudonymPseudonym *Pseudonym `scan:"RecipientPseudonymPseudonym" json:"RecipientPseudonymPseudonym"` // direct_messages.direct_messages_recipient_pseudonym_id_fkey
	SenderPseudonymPseudonym    *Pseudonym `scan:"SenderPseudonymPseudonym" json:"SenderPseudonymPseudonym"`       // direct_messages.direct_messages_sender_pseudonym_id_fkey
}

type directMessageColumnNames struct {
	MessageID            string
	SenderPseudonymID    string
	RecipientPseudonymID string
	Content              string
	IsRead               string
	CreatedAt            string
}

var DirectMessageColumns = buildDirectMessageColumns("direct_messages")

type directMessageColumns struct {
	tableAlias           string
	MessageID            psql.Expression
	SenderPseudonymID    psql.Expression
	RecipientPseudonymID psql.Expression
	Content              psql.Expression
	IsRead               psql.Expression
	CreatedAt            psql.Expression
}

func (c directMessageColumns) Alias() string {
	return c.tableAlias
}

func (directMessageColumns) AliasedAs(alias string) directMessageColumns {
	return buildDirectMessageColumns(alias)
}

func buildDirectMessageColumns(alias string) directMessageColumns {
	return directMessageColumns{
		tableAlias:           alias,
		MessageID:            psql.Quote(alias, "message_id"),
		SenderPseudonymID:    psql.Quote(alias, "sender_pseudonym_id"),
		RecipientPseudonymID: psql.Quote(alias, "recipient_pseudonym_id"),
		Content:              psql.Quote(alias, "content"),
		IsRead:               psql.Quote(alias, "is_read"),
		CreatedAt:            psql.Quote(alias, "created_at"),
	}
}

type directMessageWhere[Q psql.Filterable] struct {
	MessageID            psql.WhereMod[Q, int64]
	SenderPseudonymID    psql.WhereMod[Q, string]
	RecipientPseudonymID psql.WhereMod[Q, string]
	Content              psql.WhereMod[Q, string]
	IsRead               psql.WhereNullMod[Q, bool]
	CreatedAt            psql.WhereNullMod[Q, time.Time]
}

func (directMessageWhere[Q]) AliasedAs(alias string) directMessageWhere[Q] {
	return buildDirectMessageWhere[Q](buildDirectMessageColumns(alias))
}

func buildDirectMessageWhere[Q psql.Filterable](cols directMessageColumns) directMessageWhere[Q] {
	return directMessageWhere[Q]{
		MessageID:            psql.Where[Q, int64](cols.MessageID),
		SenderPseudonymID:    psql.Where[Q, string](cols.SenderPseudonymID),
		RecipientPseudonymID: psql.Where[Q, string](cols.RecipientPseudonymID),
		Content:              psql.Where[Q, string](cols.Content),
		IsRead:               psql.WhereNull[Q, bool](cols.IsRead),
		CreatedAt:            psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var DirectMessageErrors = &directMessageErrors{
	ErrUniqueDirectMessagesPkey: &UniqueConstraintError{
		schema:  "",
		table:   "direct_messages",
		columns: []string{"message_id"},
		s:       "direct_messages_pkey",
	},
}

type directMessageErrors struct {
	ErrUniqueDirectMessagesPkey *UniqueConstraintError
}

// DirectMessageSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type DirectMessageSetter struct {
	MessageID            *int64               `db:"message_id,pk" scan:"message_id" json:"message_id"`
	SenderPseudonymID    *string              `db:"sender_pseudonym_id" scan:"sender_pseudonym_id" json:"sender_pseudonym_id"`
	RecipientPseudonymID *string              `db:"recipient_pseudonym_id" scan:"recipient_pseudonym_id" json:"recipient_pseudonym_id"`
	Content              *string              `db:"content" scan:"content" json:"content"`
	IsRead               *sql.Null[bool]      `db:"is_read" scan:"is_read" json:"is_read"`
	CreatedAt            *sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s DirectMessageSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.MessageID != nil {
		vals = append(vals, "message_id")
	}

	if s.SenderPseudonymID != nil {
		vals = append(vals, "sender_pseudonym_id")
	}

	if s.RecipientPseudonymID != nil {
		vals = append(vals, "recipient_pseudonym_id")
	}

	if s.Content != nil {
		vals = append(vals, "content")
	}

	if s.IsRead != nil {
		vals = append(vals, "is_read")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s DirectMessageSetter) Overwrite(t *DirectMessage) {
	if s.MessageID != nil {
		t.MessageID = *s.MessageID
	}
	if s.SenderPseudonymID != nil {
		t.SenderPseudonymID = *s.SenderPseudonymID
	}
	if s.RecipientPseudonymID != nil {
		t.RecipientPseudonymID = *s.RecipientPseudonymID
	}
	if s.Content != nil {
		t.Content = *s.Content
	}
	if s.IsRead != nil {
		t.IsRead = *s.IsRead
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *DirectMessageSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return DirectMessages.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.MessageID != nil {
			vals[0] = psql.Arg(*s.MessageID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.SenderPseudonymID != nil {
			vals[1] = psql.Arg(*s.SenderPseudonymID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.RecipientPseudonymID != nil {
			vals[2] = psql.Arg(*s.RecipientPseudonymID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Content != nil {
			vals[3] = psql.Arg(*s.Content)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.IsRead != nil {
			vals[4] = psql.Arg(*s.IsRead)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[5] = psql.Arg(*s.CreatedAt)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s DirectMessageSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s DirectMessageSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.MessageID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "message_id")...),
			psql.Arg(s.MessageID),
		}})
	}

	if s.SenderPseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "sender_pseudonym_id")...),
			psql.Arg(s.SenderPseudonymID),
		}})
	}

	if s.RecipientPseudonymID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "recipient_pseudonym_id")...),
			psql.Arg(s.RecipientPseudonymID),
		}})
	}

	if s.Content != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "content")...),
			psql.Arg(s.Content),
		}})
	}

	if s.IsRead != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_read")...),
			psql.Arg(s.IsRead),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindDirectMessage retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindDirectMessage(ctx context.Context, exec bob.Executor, MessageIDPK int64, cols ...string) (*DirectMessage, error) {
	if len(cols) == 0 {
		return DirectMessages.Query(
			SelectWhere.DirectMessages.MessageID.EQ(MessageIDPK),
		).One(ctx, exec)
	}

	return DirectMessages.Query(
		SelectWhere.DirectMessages.MessageID.EQ(MessageIDPK),
		sm.Columns(DirectMessages.Columns().Only(cols...)),
	).One(ctx, exec)
}

// DirectMessageExists checks the presence of a single record by primary key
func DirectMessageExists(ctx context.Context, exec bob.Executor, MessageIDPK int64) (bool, error) {
	return DirectMessages.Query(
		SelectWhere.DirectMessages.MessageID.EQ(MessageIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after DirectMessage is retrieved from the database
func (o *DirectMessage) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DirectMessages.AfterSelectHooks.RunHooks(ctx, exec, DirectMessageSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = DirectMessages.AfterInsertHooks.RunHooks(ctx, exec, DirectMessageSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = DirectMessages.AfterUpdateHooks.RunHooks(ctx, exec, DirectMessageSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = DirectMessages.AfterDeleteHooks.RunHooks(ctx, exec, DirectMessageSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the DirectMessage
func (o *DirectMessage) primaryKeyVals() bob.Expression {
	return psql.Arg(o.MessageID)
}

func (o *DirectMessage) pkEQ() dialect.Expression {
	return psql.Quote("direct_messages", "message_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the DirectMessage
func (o *DirectMessage) Update(ctx context.Context, exec bob.Executor, s *DirectMessageSetter) error {
	v, err := DirectMessages.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single DirectMessage record with an executor
func (o *DirectMessage) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := DirectMessages.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the DirectMessage using the executor
func (o *DirectMessage) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := DirectMessages.Query(
		SelectWhere.DirectMessages.MessageID.EQ(o.MessageID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after DirectMessageSlice is retrieved from the database
func (o DirectMessageSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DirectMessages.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = DirectMessages.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = DirectMessages.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = DirectMessages.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o DirectMessageSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("direct_messages", "message_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o DirectMessageSlice) copyMatchingRows(from ...*DirectMessage) {
	for i, old := range o {
		for _, new := range from {
			if new.MessageID != old.MessageID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o DirectMessageSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DirectMessages.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DirectMessage:
				o.copyMatchingRows(retrieved)
			case []*DirectMessage:
				o.copyMatchingRows(retrieved...)
			case DirectMessageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DirectMessage or a slice of DirectMessage
				// then run the AfterUpdateHooks on the slice
				_, err = DirectMessages.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o DirectMessageSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DirectMessages.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DirectMessage:
				o.copyMatchingRows(retrieved)
			case []*DirectMessage:
				o.copyMatchingRows(retrieved...)
			case DirectMessageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DirectMessage or a slice of DirectMessage
				// then run the AfterDeleteHooks on the slice
				_, err = DirectMessages.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o DirectMessageSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals DirectMessageSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DirectMessages.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o DirectMessageSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DirectMessages.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o DirectMessageSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := DirectMessages.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type directMessageJoins[Q dialect.Joinable] struct {
	typ                         string
	RecipientPseudonymPseudonym modAs[Q, pseudonymColumns]
	SenderPseudonymPseudonym    modAs[Q, pseudonymColumns]
}

func (j directMessageJoins[Q]) aliasedAs(alias string) directMessageJoins[Q] {
	return buildDirectMessageJoins[Q](buildDirectMessageColumns(alias), j.typ)
}

func buildDirectMessageJoins[Q dialect.Joinable](cols directMessageColumns, typ string) directMessageJoins[Q] {
	return directMessageJoins[Q]{
		typ: typ,
		RecipientPseudonymPseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.RecipientPseudonymID),
					))
				}

				return mods
			},
		},
		SenderPseudonymPseudonym: modAs[Q, pseudonymColumns]{
			c: PseudonymColumns,
			f: func(to pseudonymColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pseudonyms.Name().As(to.Alias())).On(
						to.PseudonymID.EQ(cols.SenderPseudonymID),
					))
				}

				return mods
			},
		},
	}
}

// RecipientPseudonymPseudonym starts a query for related objects on pseudonyms
func (o *DirectMessage) RecipientPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.RecipientPseudonymID))),
	)...)
}

func (os DirectMessageSlice) RecipientPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkRecipientPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkRecipientPseudonymID[i] = o.RecipientPseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkRecipientPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

// SenderPseudonymPseudonym starts a query for related objects on pseudonyms
func (o *DirectMessage) SenderPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	return Pseudonyms.Query(append(mods,
		sm.Where(PseudonymColumns.PseudonymID.EQ(psql.Arg(o.SenderPseudonymID))),
	)...)
}

func (os DirectMessageSlice) SenderPseudonymPseudonym(mods ...bob.Mod[*dialect.SelectQuery]) PseudonymsQuery {
	pkSenderPseudonymID := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkSenderPseudonymID[i] = o.SenderPseudonymID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkSenderPseudonymID), "character varying[]")),
	))

	return Pseudonyms.Query(append(mods,
		sm.Where(psql.Group(PseudonymColumns.PseudonymID).OP("IN", PKArgExpr)),
	)...)
}

func (o *DirectMessage) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "RecipientPseudonymPseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("directMessage cannot load %T as %q", retrieved, name)
		}

		o.R.RecipientPseudonymPseudonym = rel

		if rel != nil {
			rel.R.RecipientPseudonymDirectMessages = DirectMessageSlice{o}
		}
		return nil
	case "SenderPseudonymPseudonym":
		rel, ok := retrieved.(*Pseudonym)
		if !ok {
			return fmt.Errorf("directMessage cannot load %T as %q", retrieved, name)
		}

		o.R.SenderPseudonymPseudonym = rel

		if rel != nil {
			rel.R.SenderPseudonymDirectMessages = DirectMessageSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("directMessage has no relationship %q", name)
	}
}

type directMessagePreloader struct {
	RecipientPseudonymPseudonym func(...psql.PreloadOption) psql.Preloader
	SenderPseudonymPseudonym    func(...psql.PreloadOption) psql.Preloader
}

func buildDirectMessagePreloader() directMessagePreloader {
	return directMessagePreloader{
		RecipientPseudonymPseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "RecipientPseudonymPseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.DirectMessages,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.DirectMessages.RecipientPseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
		SenderPseudonymPseudonym: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Pseudonym, PseudonymSlice](orm.Relationship{
				Name: "SenderPseudonymPseudonym",
				Sides: []orm.RelSide{
					{
						From: TableNames.DirectMessages,
						To:   TableNames.Pseudonyms,
						FromColumns: []string{
							ColumnNames.DirectMessages.SenderPseudonymID,
						},
						ToColumns: []string{
							ColumnNames.Pseudonyms.PseudonymID,
						},
					},
				},
			}, Pseudonyms.Columns().Names(), opts...)
		},
	}
}

type directMessageThenLoader[Q orm.Loadable] struct {
	RecipientPseudonymPseudonym func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	SenderPseudonymPseudonym    func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildDirectMessageThenLoader[Q orm.Loadable]() directMessageThenLoader[Q] {
	type RecipientPseudonymPseudonymLoadInterface interface {
		LoadRecipientPseudonymPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type SenderPseudonymPseudonymLoadInterface interface {
		LoadSenderPseudonymPseudonym(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return directMessageThenLoader[Q]{
		RecipientPseudonymPseudonym: thenLoadBuilder[Q](
			"RecipientPseudonymPseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved RecipientPseudonymPseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadRecipientPseudonymPseudonym(ctx, exec, mods...)
			},
		),
		SenderPseudonymPseudonym: thenLoadBuilder[Q](
			"SenderPseudonymPseudonym",
			func(ctx context.Context, exec bob.Executor, retrieved SenderPseudonymPseudonymLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadSenderPseudonymPseudonym(ctx, exec, mods...)
			},
		),
	}
}

// LoadRecipientPseudonymPseudonym loads the directMessage's RecipientPseudonymPseudonym into the .R struct
func (o *DirectMessage) LoadRecipientPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RecipientPseudonymPseudonym = nil

	related, err := o.RecipientPseudonymPseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.RecipientPseudonymDirectMessages = DirectMessageSlice{o}

	o.R.RecipientPseudonymPseudonym = related
	return nil
}

// LoadRecipientPseudonymPseudonym loads the directMessage's RecipientPseudonymPseudonym into the .R struct
func (os DirectMessageSlice) LoadRecipientPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.RecipientPseudonymPseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.RecipientPseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.RecipientPseudonymDirectMessages = append(rel.R.RecipientPseudonymDirectMessages, o)

			o.R.RecipientPseudonymPseudonym = rel
			break
		}
	}

	return nil
}

// LoadSenderPseudonymPseudonym loads the directMessage's SenderPseudonymPseudonym into the .R struct
func (o *DirectMessage) LoadSenderPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.SenderPseudonymPseudonym = nil

	related, err := o.SenderPseudonymPseudonym(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SenderPseudonymDirectMessages = DirectMessageSlice{o}

	o.R.SenderPseudonymPseudonym = related
	return nil
}

// LoadSenderPseudonymPseudonym loads the directMessage's SenderPseudonymPseudonym into the .R struct
func (os DirectMessageSlice) LoadSenderPseudonymPseudonym(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pseudonyms, err := os.SenderPseudonymPseudonym(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pseudonyms {
			if o.SenderPseudonymID != rel.PseudonymID {
				continue
			}

			rel.R.SenderPseudonymDirectMessages = append(rel.R.SenderPseudonymDirectMessages, o)

			o.R.SenderPseudonymPseudonym = rel
			break
		}
	}

	return nil
}

func attachDirectMessageRecipientPseudonymPseudonym0(ctx context.Context, exec bob.Executor, count int, directMessage0 *DirectMessage, pseudonym1 *Pseudonym) (*DirectMessage, error) {
	setter := &DirectMessageSetter{
		RecipientPseudonymID: &pseudonym1.PseudonymID,
	}

	err := directMessage0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachDirectMessageRecipientPseudonymPseudonym0: %w", err)
	}

	return directMessage0, nil
}

func (directMessage0 *DirectMessage) InsertRecipientPseudonymPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachDirectMessageRecipientPseudonymPseudonym0(ctx, exec, 1, directMessage0, pseudonym1)
	if err != nil {
		return err
	}

	directMessage0.R.RecipientPseudonymPseudonym = pseudonym1

	pseudonym1.R.RecipientPseudonymDirectMessages = append(pseudonym1.R.RecipientPseudonymDirectMessages, directMessage0)

	return nil
}

func (directMessage0 *DirectMessage) AttachRecipientPseudonymPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachDirectMessageRecipientPseudonymPseudonym0(ctx, exec, 1, directMessage0, pseudonym1)
	if err != nil {
		return err
	}

	directMessage0.R.RecipientPseudonymPseudonym = pseudonym1

	pseudonym1.R.RecipientPseudonymDirectMessages = append(pseudonym1.R.RecipientPseudonymDirectMessages, directMessage0)

	return nil
}

func attachDirectMessageSenderPseudonymPseudonym0(ctx context.Context, exec bob.Executor, count int, directMessage0 *DirectMessage, pseudonym1 *Pseudonym) (*DirectMessage, error) {
	setter := &DirectMessageSetter{
		SenderPseudonymID: &pseudonym1.PseudonymID,
	}

	err := directMessage0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachDirectMessageSenderPseudonymPseudonym0: %w", err)
	}

	return directMessage0, nil
}

func (directMessage0 *DirectMessage) InsertSenderPseudonymPseudonym(ctx context.Context, exec bob.Executor, related *PseudonymSetter) error {
	pseudonym1, err := Pseudonyms.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachDirectMessageSenderPseudonymPseudonym0(ctx, exec, 1, directMessage0, pseudonym1)
	if err != nil {
		return err
	}

	directMessage0.R.SenderPseudonymPseudonym = pseudonym1

	pseudonym1.R.SenderPseudonymDirectMessages = append(pseudonym1.R.SenderPseudonymDirectMessages, directMessage0)

	return nil
}

func (directMessage0 *DirectMessage) AttachSenderPseudonymPseudonym(ctx context.Context, exec bob.Executor, pseudonym1 *Pseudonym) error {
	var err error

	_, err = attachDirectMessageSenderPseudonymPseudonym0(ctx, exec, 1, directMessage0, pseudonym1)
	if err != nil {
		return err
	}

	directMessage0.R.SenderPseudonymPseudonym = pseudonym1

	pseudonym1.R.SenderPseudonymDirectMessages = append(pseudonym1.R.SenderPseudonymDirectMessages, directMessage0)

	return nil
}
