// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_test

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"

	"github.com/gofrs/uuid/v5"
	models "github.com/matt0x6f/hashpost/internal/database/models"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Set the testDB to enable tests that use the database
var testDB bob.Transactor

// Make sure the type APIKey runs hooks after queries
var _ bob.HookableType = &models.APIKey{}

// Make sure the type Comment runs hooks after queries
var _ bob.HookableType = &models.Comment{}

// Make sure the type ComplianceCorrelation runs hooks after queries
var _ bob.HookableType = &models.ComplianceCorrelation{}

// Make sure the type ComplianceReport runs hooks after queries
var _ bob.HookableType = &models.ComplianceReport{}

// Make sure the type CorrelationAudit runs hooks after queries
var _ bob.HookableType = &models.CorrelationAudit{}

// Make sure the type DirectMessage runs hooks after queries
var _ bob.HookableType = &models.DirectMessage{}

// Make sure the type IdentityMapping runs hooks after queries
var _ bob.HookableType = &models.IdentityMapping{}

// Make sure the type KeyUsageAudit runs hooks after queries
var _ bob.HookableType = &models.KeyUsageAudit{}

// Make sure the type MediaAttachment runs hooks after queries
var _ bob.HookableType = &models.MediaAttachment{}

// Make sure the type ModerationAction runs hooks after queries
var _ bob.HookableType = &models.ModerationAction{}

// Make sure the type PerformanceMetric runs hooks after queries
var _ bob.HookableType = &models.PerformanceMetric{}

// Make sure the type PollVote runs hooks after queries
var _ bob.HookableType = &models.PollVote{}

// Make sure the type Poll runs hooks after queries
var _ bob.HookableType = &models.Poll{}

// Make sure the type Post runs hooks after queries
var _ bob.HookableType = &models.Post{}

// Make sure the type Pseudonym runs hooks after queries
var _ bob.HookableType = &models.Pseudonym{}

// Make sure the type Report runs hooks after queries
var _ bob.HookableType = &models.Report{}

// Make sure the type RoleDefinition runs hooks after queries
var _ bob.HookableType = &models.RoleDefinition{}

// Make sure the type RoleKey runs hooks after queries
var _ bob.HookableType = &models.RoleKey{}

// Make sure the type SchemaMigration runs hooks after queries
var _ bob.HookableType = &models.SchemaMigration{}

// Make sure the type SubforumModerator runs hooks after queries
var _ bob.HookableType = &models.SubforumModerator{}

// Make sure the type SubforumSubscription runs hooks after queries
var _ bob.HookableType = &models.SubforumSubscription{}

// Make sure the type Subforum runs hooks after queries
var _ bob.HookableType = &models.Subforum{}

// Make sure the type SystemEvent runs hooks after queries
var _ bob.HookableType = &models.SystemEvent{}

// Make sure the type SystemSetting runs hooks after queries
var _ bob.HookableType = &models.SystemSetting{}

// Make sure the type UserBan runs hooks after queries
var _ bob.HookableType = &models.UserBan{}

// Make sure the type UserBlock runs hooks after queries
var _ bob.HookableType = &models.UserBlock{}

// Make sure the type UserPreference runs hooks after queries
var _ bob.HookableType = &models.UserPreference{}

// Make sure the type User runs hooks after queries
var _ bob.HookableType = &models.User{}

// Make sure the type Vote runs hooks after queries
var _ bob.HookableType = &models.Vote{}

// Make sure the type types.JSON[json.RawMessage] satisfies database/sql.Scanner
var _ sql.Scanner = (*types.JSON[json.RawMessage])(nil)

// Make sure the type types.JSON[json.RawMessage] satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(types.JSON[json.RawMessage])

// Make sure the type uuid.UUID satisfies database/sql.Scanner
var _ sql.Scanner = (*uuid.UUID)(nil)

// Make sure the type uuid.UUID satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(uuid.UUID)

// Make sure the type pgtypes.Inet satisfies database/sql.Scanner
var _ sql.Scanner = (*pgtypes.Inet)(nil)

// Make sure the type pgtypes.Inet satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(pgtypes.Inet)

// Make sure the type decimal.Decimal satisfies database/sql.Scanner
var _ sql.Scanner = (*decimal.Decimal)(nil)

// Make sure the type decimal.Decimal satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(decimal.Decimal)
