// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// ComplianceCorrelation is an object representing the database table.
type ComplianceCorrelation struct {
	CorrelationID    uuid.UUID           `db:"correlation_id,pk" scan:"correlation_id" json:"correlation_id"`
	ReportID         uuid.UUID           `db:"report_id" scan:"report_id" json:"report_id"`
	AuditID          uuid.UUID           `db:"audit_id" scan:"audit_id" json:"audit_id"`
	CorrelationScope string              `db:"correlation_scope" scan:"correlation_scope" json:"correlation_scope"`
	CreatedAt        sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`

	R complianceCorrelationR `db:"-" scan:"rel" json:"rel"`
}

// ComplianceCorrelationSlice is an alias for a slice of pointers to ComplianceCorrelation.
// This should almost always be used instead of []*ComplianceCorrelation.
type ComplianceCorrelationSlice []*ComplianceCorrelation

// ComplianceCorrelations contains methods to work with the compliance_correlations table
var ComplianceCorrelations = psql.NewTablex[*ComplianceCorrelation, ComplianceCorrelationSlice, *ComplianceCorrelationSetter]("", "compliance_correlations")

// ComplianceCorrelationsQuery is a query on the compliance_correlations table
type ComplianceCorrelationsQuery = *psql.ViewQuery[*ComplianceCorrelation, ComplianceCorrelationSlice]

// complianceCorrelationR is where relationships are stored.
type complianceCorrelationR struct {
	AuditCorrelationAudit  *CorrelationAudit `scan:"AuditCorrelationAudit" json:"AuditCorrelationAudit"`   // compliance_correlations.compliance_correlations_audit_id_fkey
	ReportComplianceReport *ComplianceReport `scan:"ReportComplianceReport" json:"ReportComplianceReport"` // compliance_correlations.compliance_correlations_report_id_fkey
}

type complianceCorrelationColumnNames struct {
	CorrelationID    string
	ReportID         string
	AuditID          string
	CorrelationScope string
	CreatedAt        string
}

var ComplianceCorrelationColumns = buildComplianceCorrelationColumns("compliance_correlations")

type complianceCorrelationColumns struct {
	tableAlias       string
	CorrelationID    psql.Expression
	ReportID         psql.Expression
	AuditID          psql.Expression
	CorrelationScope psql.Expression
	CreatedAt        psql.Expression
}

func (c complianceCorrelationColumns) Alias() string {
	return c.tableAlias
}

func (complianceCorrelationColumns) AliasedAs(alias string) complianceCorrelationColumns {
	return buildComplianceCorrelationColumns(alias)
}

func buildComplianceCorrelationColumns(alias string) complianceCorrelationColumns {
	return complianceCorrelationColumns{
		tableAlias:       alias,
		CorrelationID:    psql.Quote(alias, "correlation_id"),
		ReportID:         psql.Quote(alias, "report_id"),
		AuditID:          psql.Quote(alias, "audit_id"),
		CorrelationScope: psql.Quote(alias, "correlation_scope"),
		CreatedAt:        psql.Quote(alias, "created_at"),
	}
}

type complianceCorrelationWhere[Q psql.Filterable] struct {
	CorrelationID    psql.WhereMod[Q, uuid.UUID]
	ReportID         psql.WhereMod[Q, uuid.UUID]
	AuditID          psql.WhereMod[Q, uuid.UUID]
	CorrelationScope psql.WhereMod[Q, string]
	CreatedAt        psql.WhereNullMod[Q, time.Time]
}

func (complianceCorrelationWhere[Q]) AliasedAs(alias string) complianceCorrelationWhere[Q] {
	return buildComplianceCorrelationWhere[Q](buildComplianceCorrelationColumns(alias))
}

func buildComplianceCorrelationWhere[Q psql.Filterable](cols complianceCorrelationColumns) complianceCorrelationWhere[Q] {
	return complianceCorrelationWhere[Q]{
		CorrelationID:    psql.Where[Q, uuid.UUID](cols.CorrelationID),
		ReportID:         psql.Where[Q, uuid.UUID](cols.ReportID),
		AuditID:          psql.Where[Q, uuid.UUID](cols.AuditID),
		CorrelationScope: psql.Where[Q, string](cols.CorrelationScope),
		CreatedAt:        psql.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var ComplianceCorrelationErrors = &complianceCorrelationErrors{
	ErrUniqueComplianceCorrelationsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "compliance_correlations",
		columns: []string{"correlation_id"},
		s:       "compliance_correlations_pkey",
	},
}

type complianceCorrelationErrors struct {
	ErrUniqueComplianceCorrelationsPkey *UniqueConstraintError
}

// ComplianceCorrelationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ComplianceCorrelationSetter struct {
	CorrelationID    *uuid.UUID           `db:"correlation_id,pk" scan:"correlation_id" json:"correlation_id"`
	ReportID         *uuid.UUID           `db:"report_id" scan:"report_id" json:"report_id"`
	AuditID          *uuid.UUID           `db:"audit_id" scan:"audit_id" json:"audit_id"`
	CorrelationScope *string              `db:"correlation_scope" scan:"correlation_scope" json:"correlation_scope"`
	CreatedAt        *sql.Null[time.Time] `db:"created_at" scan:"created_at" json:"created_at"`
}

func (s ComplianceCorrelationSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.CorrelationID != nil {
		vals = append(vals, "correlation_id")
	}

	if s.ReportID != nil {
		vals = append(vals, "report_id")
	}

	if s.AuditID != nil {
		vals = append(vals, "audit_id")
	}

	if s.CorrelationScope != nil {
		vals = append(vals, "correlation_scope")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s ComplianceCorrelationSetter) Overwrite(t *ComplianceCorrelation) {
	if s.CorrelationID != nil {
		t.CorrelationID = *s.CorrelationID
	}
	if s.ReportID != nil {
		t.ReportID = *s.ReportID
	}
	if s.AuditID != nil {
		t.AuditID = *s.AuditID
	}
	if s.CorrelationScope != nil {
		t.CorrelationScope = *s.CorrelationScope
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *ComplianceCorrelationSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return ComplianceCorrelations.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.CorrelationID != nil {
			vals[0] = psql.Arg(*s.CorrelationID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.ReportID != nil {
			vals[1] = psql.Arg(*s.ReportID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.AuditID != nil {
			vals[2] = psql.Arg(*s.AuditID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.CorrelationScope != nil {
			vals[3] = psql.Arg(*s.CorrelationScope)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[4] = psql.Arg(*s.CreatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ComplianceCorrelationSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ComplianceCorrelationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.CorrelationID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "correlation_id")...),
			psql.Arg(s.CorrelationID),
		}})
	}

	if s.ReportID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "report_id")...),
			psql.Arg(s.ReportID),
		}})
	}

	if s.AuditID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "audit_id")...),
			psql.Arg(s.AuditID),
		}})
	}

	if s.CorrelationScope != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "correlation_scope")...),
			psql.Arg(s.CorrelationScope),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindComplianceCorrelation retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindComplianceCorrelation(ctx context.Context, exec bob.Executor, CorrelationIDPK uuid.UUID, cols ...string) (*ComplianceCorrelation, error) {
	if len(cols) == 0 {
		return ComplianceCorrelations.Query(
			SelectWhere.ComplianceCorrelations.CorrelationID.EQ(CorrelationIDPK),
		).One(ctx, exec)
	}

	return ComplianceCorrelations.Query(
		SelectWhere.ComplianceCorrelations.CorrelationID.EQ(CorrelationIDPK),
		sm.Columns(ComplianceCorrelations.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ComplianceCorrelationExists checks the presence of a single record by primary key
func ComplianceCorrelationExists(ctx context.Context, exec bob.Executor, CorrelationIDPK uuid.UUID) (bool, error) {
	return ComplianceCorrelations.Query(
		SelectWhere.ComplianceCorrelations.CorrelationID.EQ(CorrelationIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after ComplianceCorrelation is retrieved from the database
func (o *ComplianceCorrelation) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ComplianceCorrelations.AfterSelectHooks.RunHooks(ctx, exec, ComplianceCorrelationSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = ComplianceCorrelations.AfterInsertHooks.RunHooks(ctx, exec, ComplianceCorrelationSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = ComplianceCorrelations.AfterUpdateHooks.RunHooks(ctx, exec, ComplianceCorrelationSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = ComplianceCorrelations.AfterDeleteHooks.RunHooks(ctx, exec, ComplianceCorrelationSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the ComplianceCorrelation
func (o *ComplianceCorrelation) primaryKeyVals() bob.Expression {
	return psql.Arg(o.CorrelationID)
}

func (o *ComplianceCorrelation) pkEQ() dialect.Expression {
	return psql.Quote("compliance_correlations", "correlation_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the ComplianceCorrelation
func (o *ComplianceCorrelation) Update(ctx context.Context, exec bob.Executor, s *ComplianceCorrelationSetter) error {
	v, err := ComplianceCorrelations.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single ComplianceCorrelation record with an executor
func (o *ComplianceCorrelation) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := ComplianceCorrelations.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the ComplianceCorrelation using the executor
func (o *ComplianceCorrelation) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := ComplianceCorrelations.Query(
		SelectWhere.ComplianceCorrelations.CorrelationID.EQ(o.CorrelationID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ComplianceCorrelationSlice is retrieved from the database
func (o ComplianceCorrelationSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ComplianceCorrelations.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = ComplianceCorrelations.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = ComplianceCorrelations.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = ComplianceCorrelations.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ComplianceCorrelationSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("compliance_correlations", "correlation_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ComplianceCorrelationSlice) copyMatchingRows(from ...*ComplianceCorrelation) {
	for i, old := range o {
		for _, new := range from {
			if new.CorrelationID != old.CorrelationID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ComplianceCorrelationSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ComplianceCorrelations.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ComplianceCorrelation:
				o.copyMatchingRows(retrieved)
			case []*ComplianceCorrelation:
				o.copyMatchingRows(retrieved...)
			case ComplianceCorrelationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ComplianceCorrelation or a slice of ComplianceCorrelation
				// then run the AfterUpdateHooks on the slice
				_, err = ComplianceCorrelations.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ComplianceCorrelationSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ComplianceCorrelations.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ComplianceCorrelation:
				o.copyMatchingRows(retrieved)
			case []*ComplianceCorrelation:
				o.copyMatchingRows(retrieved...)
			case ComplianceCorrelationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ComplianceCorrelation or a slice of ComplianceCorrelation
				// then run the AfterDeleteHooks on the slice
				_, err = ComplianceCorrelations.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ComplianceCorrelationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ComplianceCorrelationSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ComplianceCorrelations.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ComplianceCorrelationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ComplianceCorrelations.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ComplianceCorrelationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := ComplianceCorrelations.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type complianceCorrelationJoins[Q dialect.Joinable] struct {
	typ                    string
	AuditCorrelationAudit  modAs[Q, correlationAuditColumns]
	ReportComplianceReport modAs[Q, complianceReportColumns]
}

func (j complianceCorrelationJoins[Q]) aliasedAs(alias string) complianceCorrelationJoins[Q] {
	return buildComplianceCorrelationJoins[Q](buildComplianceCorrelationColumns(alias), j.typ)
}

func buildComplianceCorrelationJoins[Q dialect.Joinable](cols complianceCorrelationColumns, typ string) complianceCorrelationJoins[Q] {
	return complianceCorrelationJoins[Q]{
		typ: typ,
		AuditCorrelationAudit: modAs[Q, correlationAuditColumns]{
			c: CorrelationAuditColumns,
			f: func(to correlationAuditColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CorrelationAudits.Name().As(to.Alias())).On(
						to.AuditID.EQ(cols.AuditID),
					))
				}

				return mods
			},
		},
		ReportComplianceReport: modAs[Q, complianceReportColumns]{
			c: ComplianceReportColumns,
			f: func(to complianceReportColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, ComplianceReports.Name().As(to.Alias())).On(
						to.ReportID.EQ(cols.ReportID),
					))
				}

				return mods
			},
		},
	}
}

// AuditCorrelationAudit starts a query for related objects on correlation_audit
func (o *ComplianceCorrelation) AuditCorrelationAudit(mods ...bob.Mod[*dialect.SelectQuery]) CorrelationAuditsQuery {
	return CorrelationAudits.Query(append(mods,
		sm.Where(CorrelationAuditColumns.AuditID.EQ(psql.Arg(o.AuditID))),
	)...)
}

func (os ComplianceCorrelationSlice) AuditCorrelationAudit(mods ...bob.Mod[*dialect.SelectQuery]) CorrelationAuditsQuery {
	pkAuditID := make(pgtypes.Array[uuid.UUID], len(os))
	for i, o := range os {
		pkAuditID[i] = o.AuditID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkAuditID), "uuid[]")),
	))

	return CorrelationAudits.Query(append(mods,
		sm.Where(psql.Group(CorrelationAuditColumns.AuditID).OP("IN", PKArgExpr)),
	)...)
}

// ReportComplianceReport starts a query for related objects on compliance_reports
func (o *ComplianceCorrelation) ReportComplianceReport(mods ...bob.Mod[*dialect.SelectQuery]) ComplianceReportsQuery {
	return ComplianceReports.Query(append(mods,
		sm.Where(ComplianceReportColumns.ReportID.EQ(psql.Arg(o.ReportID))),
	)...)
}

func (os ComplianceCorrelationSlice) ReportComplianceReport(mods ...bob.Mod[*dialect.SelectQuery]) ComplianceReportsQuery {
	pkReportID := make(pgtypes.Array[uuid.UUID], len(os))
	for i, o := range os {
		pkReportID[i] = o.ReportID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkReportID), "uuid[]")),
	))

	return ComplianceReports.Query(append(mods,
		sm.Where(psql.Group(ComplianceReportColumns.ReportID).OP("IN", PKArgExpr)),
	)...)
}

func (o *ComplianceCorrelation) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "AuditCorrelationAudit":
		rel, ok := retrieved.(*CorrelationAudit)
		if !ok {
			return fmt.Errorf("complianceCorrelation cannot load %T as %q", retrieved, name)
		}

		o.R.AuditCorrelationAudit = rel

		if rel != nil {
			rel.R.AuditComplianceCorrelations = ComplianceCorrelationSlice{o}
		}
		return nil
	case "ReportComplianceReport":
		rel, ok := retrieved.(*ComplianceReport)
		if !ok {
			return fmt.Errorf("complianceCorrelation cannot load %T as %q", retrieved, name)
		}

		o.R.ReportComplianceReport = rel

		if rel != nil {
			rel.R.ReportComplianceCorrelations = ComplianceCorrelationSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("complianceCorrelation has no relationship %q", name)
	}
}

type complianceCorrelationPreloader struct {
	AuditCorrelationAudit  func(...psql.PreloadOption) psql.Preloader
	ReportComplianceReport func(...psql.PreloadOption) psql.Preloader
}

func buildComplianceCorrelationPreloader() complianceCorrelationPreloader {
	return complianceCorrelationPreloader{
		AuditCorrelationAudit: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*CorrelationAudit, CorrelationAuditSlice](orm.Relationship{
				Name: "AuditCorrelationAudit",
				Sides: []orm.RelSide{
					{
						From: TableNames.ComplianceCorrelations,
						To:   TableNames.CorrelationAudits,
						FromColumns: []string{
							ColumnNames.ComplianceCorrelations.AuditID,
						},
						ToColumns: []string{
							ColumnNames.CorrelationAudits.AuditID,
						},
					},
				},
			}, CorrelationAudits.Columns().Names(), opts...)
		},
		ReportComplianceReport: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*ComplianceReport, ComplianceReportSlice](orm.Relationship{
				Name: "ReportComplianceReport",
				Sides: []orm.RelSide{
					{
						From: TableNames.ComplianceCorrelations,
						To:   TableNames.ComplianceReports,
						FromColumns: []string{
							ColumnNames.ComplianceCorrelations.ReportID,
						},
						ToColumns: []string{
							ColumnNames.ComplianceReports.ReportID,
						},
					},
				},
			}, ComplianceReports.Columns().Names(), opts...)
		},
	}
}

type complianceCorrelationThenLoader[Q orm.Loadable] struct {
	AuditCorrelationAudit  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	ReportComplianceReport func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildComplianceCorrelationThenLoader[Q orm.Loadable]() complianceCorrelationThenLoader[Q] {
	type AuditCorrelationAuditLoadInterface interface {
		LoadAuditCorrelationAudit(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ReportComplianceReportLoadInterface interface {
		LoadReportComplianceReport(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return complianceCorrelationThenLoader[Q]{
		AuditCorrelationAudit: thenLoadBuilder[Q](
			"AuditCorrelationAudit",
			func(ctx context.Context, exec bob.Executor, retrieved AuditCorrelationAuditLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadAuditCorrelationAudit(ctx, exec, mods...)
			},
		),
		ReportComplianceReport: thenLoadBuilder[Q](
			"ReportComplianceReport",
			func(ctx context.Context, exec bob.Executor, retrieved ReportComplianceReportLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadReportComplianceReport(ctx, exec, mods...)
			},
		),
	}
}

// LoadAuditCorrelationAudit loads the complianceCorrelation's AuditCorrelationAudit into the .R struct
func (o *ComplianceCorrelation) LoadAuditCorrelationAudit(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AuditCorrelationAudit = nil

	related, err := o.AuditCorrelationAudit(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AuditComplianceCorrelations = ComplianceCorrelationSlice{o}

	o.R.AuditCorrelationAudit = related
	return nil
}

// LoadAuditCorrelationAudit loads the complianceCorrelation's AuditCorrelationAudit into the .R struct
func (os ComplianceCorrelationSlice) LoadAuditCorrelationAudit(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	correlationAudits, err := os.AuditCorrelationAudit(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range correlationAudits {
			if o.AuditID != rel.AuditID {
				continue
			}

			rel.R.AuditComplianceCorrelations = append(rel.R.AuditComplianceCorrelations, o)

			o.R.AuditCorrelationAudit = rel
			break
		}
	}

	return nil
}

// LoadReportComplianceReport loads the complianceCorrelation's ReportComplianceReport into the .R struct
func (o *ComplianceCorrelation) LoadReportComplianceReport(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ReportComplianceReport = nil

	related, err := o.ReportComplianceReport(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ReportComplianceCorrelations = ComplianceCorrelationSlice{o}

	o.R.ReportComplianceReport = related
	return nil
}

// LoadReportComplianceReport loads the complianceCorrelation's ReportComplianceReport into the .R struct
func (os ComplianceCorrelationSlice) LoadReportComplianceReport(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	complianceReports, err := os.ReportComplianceReport(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range complianceReports {
			if o.ReportID != rel.ReportID {
				continue
			}

			rel.R.ReportComplianceCorrelations = append(rel.R.ReportComplianceCorrelations, o)

			o.R.ReportComplianceReport = rel
			break
		}
	}

	return nil
}

func attachComplianceCorrelationAuditCorrelationAudit0(ctx context.Context, exec bob.Executor, count int, complianceCorrelation0 *ComplianceCorrelation, correlationAudit1 *CorrelationAudit) (*ComplianceCorrelation, error) {
	setter := &ComplianceCorrelationSetter{
		AuditID: &correlationAudit1.AuditID,
	}

	err := complianceCorrelation0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachComplianceCorrelationAuditCorrelationAudit0: %w", err)
	}

	return complianceCorrelation0, nil
}

func (complianceCorrelation0 *ComplianceCorrelation) InsertAuditCorrelationAudit(ctx context.Context, exec bob.Executor, related *CorrelationAuditSetter) error {
	correlationAudit1, err := CorrelationAudits.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachComplianceCorrelationAuditCorrelationAudit0(ctx, exec, 1, complianceCorrelation0, correlationAudit1)
	if err != nil {
		return err
	}

	complianceCorrelation0.R.AuditCorrelationAudit = correlationAudit1

	correlationAudit1.R.AuditComplianceCorrelations = append(correlationAudit1.R.AuditComplianceCorrelations, complianceCorrelation0)

	return nil
}

func (complianceCorrelation0 *ComplianceCorrelation) AttachAuditCorrelationAudit(ctx context.Context, exec bob.Executor, correlationAudit1 *CorrelationAudit) error {
	var err error

	_, err = attachComplianceCorrelationAuditCorrelationAudit0(ctx, exec, 1, complianceCorrelation0, correlationAudit1)
	if err != nil {
		return err
	}

	complianceCorrelation0.R.AuditCorrelationAudit = correlationAudit1

	correlationAudit1.R.AuditComplianceCorrelations = append(correlationAudit1.R.AuditComplianceCorrelations, complianceCorrelation0)

	return nil
}

func attachComplianceCorrelationReportComplianceReport0(ctx context.Context, exec bob.Executor, count int, complianceCorrelation0 *ComplianceCorrelation, complianceReport1 *ComplianceReport) (*ComplianceCorrelation, error) {
	setter := &ComplianceCorrelationSetter{
		ReportID: &complianceReport1.ReportID,
	}

	err := complianceCorrelation0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachComplianceCorrelationReportComplianceReport0: %w", err)
	}

	return complianceCorrelation0, nil
}

func (complianceCorrelation0 *ComplianceCorrelation) InsertReportComplianceReport(ctx context.Context, exec bob.Executor, related *ComplianceReportSetter) error {
	complianceReport1, err := ComplianceReports.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachComplianceCorrelationReportComplianceReport0(ctx, exec, 1, complianceCorrelation0, complianceReport1)
	if err != nil {
		return err
	}

	complianceCorrelation0.R.ReportComplianceReport = complianceReport1

	complianceReport1.R.ReportComplianceCorrelations = append(complianceReport1.R.ReportComplianceCorrelations, complianceCorrelation0)

	return nil
}

func (complianceCorrelation0 *ComplianceCorrelation) AttachReportComplianceReport(ctx context.Context, exec bob.Executor, complianceReport1 *ComplianceReport) error {
	var err error

	_, err = attachComplianceCorrelationReportComplianceReport0(ctx, exec, 1, complianceCorrelation0, complianceReport1)
	if err != nil {
		return err
	}

	complianceCorrelation0.R.ReportComplianceReport = complianceReport1

	complianceReport1.R.ReportComplianceCorrelations = append(complianceReport1.R.ReportComplianceCorrelations, complianceCorrelation0)

	return nil
}
