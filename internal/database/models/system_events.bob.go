// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"io"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/types"
)

// SystemEvent is an object representing the database table.
type SystemEvent struct {
	EventID         uuid.UUID                             `db:"event_id,pk" scan:"event_id" json:"event_id"`
	EventType       string                                `db:"event_type" scan:"event_type" json:"event_type"`
	EventSeverity   string                                `db:"event_severity" scan:"event_severity" json:"event_severity"`
	EventMessage    string                                `db:"event_message" scan:"event_message" json:"event_message"`
	EventData       sql.Null[types.JSON[json.RawMessage]] `db:"event_data" scan:"event_data" json:"event_data"`
	SourceComponent sql.Null[string]                      `db:"source_component" scan:"source_component" json:"source_component"`
	Timestamp       sql.Null[time.Time]                   `db:"timestamp" scan:"timestamp" json:"timestamp"`
}

// SystemEventSlice is an alias for a slice of pointers to SystemEvent.
// This should almost always be used instead of []*SystemEvent.
type SystemEventSlice []*SystemEvent

// SystemEvents contains methods to work with the system_events table
var SystemEvents = psql.NewTablex[*SystemEvent, SystemEventSlice, *SystemEventSetter]("", "system_events")

// SystemEventsQuery is a query on the system_events table
type SystemEventsQuery = *psql.ViewQuery[*SystemEvent, SystemEventSlice]

type systemEventColumnNames struct {
	EventID         string
	EventType       string
	EventSeverity   string
	EventMessage    string
	EventData       string
	SourceComponent string
	Timestamp       string
}

var SystemEventColumns = buildSystemEventColumns("system_events")

type systemEventColumns struct {
	tableAlias      string
	EventID         psql.Expression
	EventType       psql.Expression
	EventSeverity   psql.Expression
	EventMessage    psql.Expression
	EventData       psql.Expression
	SourceComponent psql.Expression
	Timestamp       psql.Expression
}

func (c systemEventColumns) Alias() string {
	return c.tableAlias
}

func (systemEventColumns) AliasedAs(alias string) systemEventColumns {
	return buildSystemEventColumns(alias)
}

func buildSystemEventColumns(alias string) systemEventColumns {
	return systemEventColumns{
		tableAlias:      alias,
		EventID:         psql.Quote(alias, "event_id"),
		EventType:       psql.Quote(alias, "event_type"),
		EventSeverity:   psql.Quote(alias, "event_severity"),
		EventMessage:    psql.Quote(alias, "event_message"),
		EventData:       psql.Quote(alias, "event_data"),
		SourceComponent: psql.Quote(alias, "source_component"),
		Timestamp:       psql.Quote(alias, "timestamp"),
	}
}

type systemEventWhere[Q psql.Filterable] struct {
	EventID         psql.WhereMod[Q, uuid.UUID]
	EventType       psql.WhereMod[Q, string]
	EventSeverity   psql.WhereMod[Q, string]
	EventMessage    psql.WhereMod[Q, string]
	EventData       psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
	SourceComponent psql.WhereNullMod[Q, string]
	Timestamp       psql.WhereNullMod[Q, time.Time]
}

func (systemEventWhere[Q]) AliasedAs(alias string) systemEventWhere[Q] {
	return buildSystemEventWhere[Q](buildSystemEventColumns(alias))
}

func buildSystemEventWhere[Q psql.Filterable](cols systemEventColumns) systemEventWhere[Q] {
	return systemEventWhere[Q]{
		EventID:         psql.Where[Q, uuid.UUID](cols.EventID),
		EventType:       psql.Where[Q, string](cols.EventType),
		EventSeverity:   psql.Where[Q, string](cols.EventSeverity),
		EventMessage:    psql.Where[Q, string](cols.EventMessage),
		EventData:       psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.EventData),
		SourceComponent: psql.WhereNull[Q, string](cols.SourceComponent),
		Timestamp:       psql.WhereNull[Q, time.Time](cols.Timestamp),
	}
}

var SystemEventErrors = &systemEventErrors{
	ErrUniqueSystemEventsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "system_events",
		columns: []string{"event_id"},
		s:       "system_events_pkey",
	},
}

type systemEventErrors struct {
	ErrUniqueSystemEventsPkey *UniqueConstraintError
}

// SystemEventSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SystemEventSetter struct {
	EventID         *uuid.UUID                             `db:"event_id,pk" scan:"event_id" json:"event_id"`
	EventType       *string                                `db:"event_type" scan:"event_type" json:"event_type"`
	EventSeverity   *string                                `db:"event_severity" scan:"event_severity" json:"event_severity"`
	EventMessage    *string                                `db:"event_message" scan:"event_message" json:"event_message"`
	EventData       *sql.Null[types.JSON[json.RawMessage]] `db:"event_data" scan:"event_data" json:"event_data"`
	SourceComponent *sql.Null[string]                      `db:"source_component" scan:"source_component" json:"source_component"`
	Timestamp       *sql.Null[time.Time]                   `db:"timestamp" scan:"timestamp" json:"timestamp"`
}

func (s SystemEventSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.EventID != nil {
		vals = append(vals, "event_id")
	}

	if s.EventType != nil {
		vals = append(vals, "event_type")
	}

	if s.EventSeverity != nil {
		vals = append(vals, "event_severity")
	}

	if s.EventMessage != nil {
		vals = append(vals, "event_message")
	}

	if s.EventData != nil {
		vals = append(vals, "event_data")
	}

	if s.SourceComponent != nil {
		vals = append(vals, "source_component")
	}

	if s.Timestamp != nil {
		vals = append(vals, "timestamp")
	}

	return vals
}

func (s SystemEventSetter) Overwrite(t *SystemEvent) {
	if s.EventID != nil {
		t.EventID = *s.EventID
	}
	if s.EventType != nil {
		t.EventType = *s.EventType
	}
	if s.EventSeverity != nil {
		t.EventSeverity = *s.EventSeverity
	}
	if s.EventMessage != nil {
		t.EventMessage = *s.EventMessage
	}
	if s.EventData != nil {
		t.EventData = *s.EventData
	}
	if s.SourceComponent != nil {
		t.SourceComponent = *s.SourceComponent
	}
	if s.Timestamp != nil {
		t.Timestamp = *s.Timestamp
	}
}

func (s *SystemEventSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return SystemEvents.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.EventID != nil {
			vals[0] = psql.Arg(*s.EventID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.EventType != nil {
			vals[1] = psql.Arg(*s.EventType)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.EventSeverity != nil {
			vals[2] = psql.Arg(*s.EventSeverity)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.EventMessage != nil {
			vals[3] = psql.Arg(*s.EventMessage)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.EventData != nil {
			vals[4] = psql.Arg(*s.EventData)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.SourceComponent != nil {
			vals[5] = psql.Arg(*s.SourceComponent)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Timestamp != nil {
			vals[6] = psql.Arg(*s.Timestamp)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s SystemEventSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s SystemEventSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.EventID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_id")...),
			psql.Arg(s.EventID),
		}})
	}

	if s.EventType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_type")...),
			psql.Arg(s.EventType),
		}})
	}

	if s.EventSeverity != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_severity")...),
			psql.Arg(s.EventSeverity),
		}})
	}

	if s.EventMessage != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_message")...),
			psql.Arg(s.EventMessage),
		}})
	}

	if s.EventData != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_data")...),
			psql.Arg(s.EventData),
		}})
	}

	if s.SourceComponent != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "source_component")...),
			psql.Arg(s.SourceComponent),
		}})
	}

	if s.Timestamp != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "timestamp")...),
			psql.Arg(s.Timestamp),
		}})
	}

	return exprs
}

// FindSystemEvent retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSystemEvent(ctx context.Context, exec bob.Executor, EventIDPK uuid.UUID, cols ...string) (*SystemEvent, error) {
	if len(cols) == 0 {
		return SystemEvents.Query(
			SelectWhere.SystemEvents.EventID.EQ(EventIDPK),
		).One(ctx, exec)
	}

	return SystemEvents.Query(
		SelectWhere.SystemEvents.EventID.EQ(EventIDPK),
		sm.Columns(SystemEvents.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SystemEventExists checks the presence of a single record by primary key
func SystemEventExists(ctx context.Context, exec bob.Executor, EventIDPK uuid.UUID) (bool, error) {
	return SystemEvents.Query(
		SelectWhere.SystemEvents.EventID.EQ(EventIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after SystemEvent is retrieved from the database
func (o *SystemEvent) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SystemEvents.AfterSelectHooks.RunHooks(ctx, exec, SystemEventSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = SystemEvents.AfterInsertHooks.RunHooks(ctx, exec, SystemEventSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = SystemEvents.AfterUpdateHooks.RunHooks(ctx, exec, SystemEventSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = SystemEvents.AfterDeleteHooks.RunHooks(ctx, exec, SystemEventSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the SystemEvent
func (o *SystemEvent) primaryKeyVals() bob.Expression {
	return psql.Arg(o.EventID)
}

func (o *SystemEvent) pkEQ() dialect.Expression {
	return psql.Quote("system_events", "event_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the SystemEvent
func (o *SystemEvent) Update(ctx context.Context, exec bob.Executor, s *SystemEventSetter) error {
	v, err := SystemEvents.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single SystemEvent record with an executor
func (o *SystemEvent) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := SystemEvents.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the SystemEvent using the executor
func (o *SystemEvent) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := SystemEvents.Query(
		SelectWhere.SystemEvents.EventID.EQ(o.EventID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after SystemEventSlice is retrieved from the database
func (o SystemEventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SystemEvents.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = SystemEvents.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = SystemEvents.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = SystemEvents.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SystemEventSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("system_events", "event_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SystemEventSlice) copyMatchingRows(from ...*SystemEvent) {
	for i, old := range o {
		for _, new := range from {
			if new.EventID != old.EventID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SystemEventSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SystemEvents.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SystemEvent:
				o.copyMatchingRows(retrieved)
			case []*SystemEvent:
				o.copyMatchingRows(retrieved...)
			case SystemEventSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SystemEvent or a slice of SystemEvent
				// then run the AfterUpdateHooks on the slice
				_, err = SystemEvents.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SystemEventSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SystemEvents.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SystemEvent:
				o.copyMatchingRows(retrieved)
			case []*SystemEvent:
				o.copyMatchingRows(retrieved...)
			case SystemEventSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SystemEvent or a slice of SystemEvent
				// then run the AfterDeleteHooks on the slice
				_, err = SystemEvents.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SystemEventSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SystemEventSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SystemEvents.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o SystemEventSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SystemEvents.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SystemEventSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := SystemEvents.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
