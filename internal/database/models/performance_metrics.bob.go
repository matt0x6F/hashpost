// Code generated by HashPost Generated Code. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"io"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// PerformanceMetric is an object representing the database table.
type PerformanceMetric struct {
	MetricID    uuid.UUID           `db:"metric_id,pk" scan:"metric_id" json:"metric_id"`
	MetricName  string              `db:"metric_name" scan:"metric_name" json:"metric_name"`
	MetricValue decimal.Decimal     `db:"metric_value" scan:"metric_value" json:"metric_value"`
	MetricUnit  sql.Null[string]    `db:"metric_unit" scan:"metric_unit" json:"metric_unit"`
	Component   sql.Null[string]    `db:"component" scan:"component" json:"component"`
	Timestamp   sql.Null[time.Time] `db:"timestamp" scan:"timestamp" json:"timestamp"`
}

// PerformanceMetricSlice is an alias for a slice of pointers to PerformanceMetric.
// This should almost always be used instead of []*PerformanceMetric.
type PerformanceMetricSlice []*PerformanceMetric

// PerformanceMetrics contains methods to work with the performance_metrics table
var PerformanceMetrics = psql.NewTablex[*PerformanceMetric, PerformanceMetricSlice, *PerformanceMetricSetter]("", "performance_metrics")

// PerformanceMetricsQuery is a query on the performance_metrics table
type PerformanceMetricsQuery = *psql.ViewQuery[*PerformanceMetric, PerformanceMetricSlice]

type performanceMetricColumnNames struct {
	MetricID    string
	MetricName  string
	MetricValue string
	MetricUnit  string
	Component   string
	Timestamp   string
}

var PerformanceMetricColumns = buildPerformanceMetricColumns("performance_metrics")

type performanceMetricColumns struct {
	tableAlias  string
	MetricID    psql.Expression
	MetricName  psql.Expression
	MetricValue psql.Expression
	MetricUnit  psql.Expression
	Component   psql.Expression
	Timestamp   psql.Expression
}

func (c performanceMetricColumns) Alias() string {
	return c.tableAlias
}

func (performanceMetricColumns) AliasedAs(alias string) performanceMetricColumns {
	return buildPerformanceMetricColumns(alias)
}

func buildPerformanceMetricColumns(alias string) performanceMetricColumns {
	return performanceMetricColumns{
		tableAlias:  alias,
		MetricID:    psql.Quote(alias, "metric_id"),
		MetricName:  psql.Quote(alias, "metric_name"),
		MetricValue: psql.Quote(alias, "metric_value"),
		MetricUnit:  psql.Quote(alias, "metric_unit"),
		Component:   psql.Quote(alias, "component"),
		Timestamp:   psql.Quote(alias, "timestamp"),
	}
}

type performanceMetricWhere[Q psql.Filterable] struct {
	MetricID    psql.WhereMod[Q, uuid.UUID]
	MetricName  psql.WhereMod[Q, string]
	MetricValue psql.WhereMod[Q, decimal.Decimal]
	MetricUnit  psql.WhereNullMod[Q, string]
	Component   psql.WhereNullMod[Q, string]
	Timestamp   psql.WhereNullMod[Q, time.Time]
}

func (performanceMetricWhere[Q]) AliasedAs(alias string) performanceMetricWhere[Q] {
	return buildPerformanceMetricWhere[Q](buildPerformanceMetricColumns(alias))
}

func buildPerformanceMetricWhere[Q psql.Filterable](cols performanceMetricColumns) performanceMetricWhere[Q] {
	return performanceMetricWhere[Q]{
		MetricID:    psql.Where[Q, uuid.UUID](cols.MetricID),
		MetricName:  psql.Where[Q, string](cols.MetricName),
		MetricValue: psql.Where[Q, decimal.Decimal](cols.MetricValue),
		MetricUnit:  psql.WhereNull[Q, string](cols.MetricUnit),
		Component:   psql.WhereNull[Q, string](cols.Component),
		Timestamp:   psql.WhereNull[Q, time.Time](cols.Timestamp),
	}
}

var PerformanceMetricErrors = &performanceMetricErrors{
	ErrUniquePerformanceMetricsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "performance_metrics",
		columns: []string{"metric_id"},
		s:       "performance_metrics_pkey",
	},
}

type performanceMetricErrors struct {
	ErrUniquePerformanceMetricsPkey *UniqueConstraintError
}

// PerformanceMetricSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PerformanceMetricSetter struct {
	MetricID    *uuid.UUID           `db:"metric_id,pk" scan:"metric_id" json:"metric_id"`
	MetricName  *string              `db:"metric_name" scan:"metric_name" json:"metric_name"`
	MetricValue *decimal.Decimal     `db:"metric_value" scan:"metric_value" json:"metric_value"`
	MetricUnit  *sql.Null[string]    `db:"metric_unit" scan:"metric_unit" json:"metric_unit"`
	Component   *sql.Null[string]    `db:"component" scan:"component" json:"component"`
	Timestamp   *sql.Null[time.Time] `db:"timestamp" scan:"timestamp" json:"timestamp"`
}

func (s PerformanceMetricSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.MetricID != nil {
		vals = append(vals, "metric_id")
	}

	if s.MetricName != nil {
		vals = append(vals, "metric_name")
	}

	if s.MetricValue != nil {
		vals = append(vals, "metric_value")
	}

	if s.MetricUnit != nil {
		vals = append(vals, "metric_unit")
	}

	if s.Component != nil {
		vals = append(vals, "component")
	}

	if s.Timestamp != nil {
		vals = append(vals, "timestamp")
	}

	return vals
}

func (s PerformanceMetricSetter) Overwrite(t *PerformanceMetric) {
	if s.MetricID != nil {
		t.MetricID = *s.MetricID
	}
	if s.MetricName != nil {
		t.MetricName = *s.MetricName
	}
	if s.MetricValue != nil {
		t.MetricValue = *s.MetricValue
	}
	if s.MetricUnit != nil {
		t.MetricUnit = *s.MetricUnit
	}
	if s.Component != nil {
		t.Component = *s.Component
	}
	if s.Timestamp != nil {
		t.Timestamp = *s.Timestamp
	}
}

func (s *PerformanceMetricSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return PerformanceMetrics.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.MetricID != nil {
			vals[0] = psql.Arg(*s.MetricID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.MetricName != nil {
			vals[1] = psql.Arg(*s.MetricName)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.MetricValue != nil {
			vals[2] = psql.Arg(*s.MetricValue)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.MetricUnit != nil {
			vals[3] = psql.Arg(*s.MetricUnit)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Component != nil {
			vals[4] = psql.Arg(*s.Component)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Timestamp != nil {
			vals[5] = psql.Arg(*s.Timestamp)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PerformanceMetricSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s PerformanceMetricSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.MetricID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metric_id")...),
			psql.Arg(s.MetricID),
		}})
	}

	if s.MetricName != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metric_name")...),
			psql.Arg(s.MetricName),
		}})
	}

	if s.MetricValue != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metric_value")...),
			psql.Arg(s.MetricValue),
		}})
	}

	if s.MetricUnit != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metric_unit")...),
			psql.Arg(s.MetricUnit),
		}})
	}

	if s.Component != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "component")...),
			psql.Arg(s.Component),
		}})
	}

	if s.Timestamp != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "timestamp")...),
			psql.Arg(s.Timestamp),
		}})
	}

	return exprs
}

// FindPerformanceMetric retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPerformanceMetric(ctx context.Context, exec bob.Executor, MetricIDPK uuid.UUID, cols ...string) (*PerformanceMetric, error) {
	if len(cols) == 0 {
		return PerformanceMetrics.Query(
			SelectWhere.PerformanceMetrics.MetricID.EQ(MetricIDPK),
		).One(ctx, exec)
	}

	return PerformanceMetrics.Query(
		SelectWhere.PerformanceMetrics.MetricID.EQ(MetricIDPK),
		sm.Columns(PerformanceMetrics.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PerformanceMetricExists checks the presence of a single record by primary key
func PerformanceMetricExists(ctx context.Context, exec bob.Executor, MetricIDPK uuid.UUID) (bool, error) {
	return PerformanceMetrics.Query(
		SelectWhere.PerformanceMetrics.MetricID.EQ(MetricIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after PerformanceMetric is retrieved from the database
func (o *PerformanceMetric) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PerformanceMetrics.AfterSelectHooks.RunHooks(ctx, exec, PerformanceMetricSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = PerformanceMetrics.AfterInsertHooks.RunHooks(ctx, exec, PerformanceMetricSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = PerformanceMetrics.AfterUpdateHooks.RunHooks(ctx, exec, PerformanceMetricSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = PerformanceMetrics.AfterDeleteHooks.RunHooks(ctx, exec, PerformanceMetricSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the PerformanceMetric
func (o *PerformanceMetric) primaryKeyVals() bob.Expression {
	return psql.Arg(o.MetricID)
}

func (o *PerformanceMetric) pkEQ() dialect.Expression {
	return psql.Quote("performance_metrics", "metric_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the PerformanceMetric
func (o *PerformanceMetric) Update(ctx context.Context, exec bob.Executor, s *PerformanceMetricSetter) error {
	v, err := PerformanceMetrics.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single PerformanceMetric record with an executor
func (o *PerformanceMetric) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := PerformanceMetrics.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the PerformanceMetric using the executor
func (o *PerformanceMetric) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := PerformanceMetrics.Query(
		SelectWhere.PerformanceMetrics.MetricID.EQ(o.MetricID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after PerformanceMetricSlice is retrieved from the database
func (o PerformanceMetricSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PerformanceMetrics.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = PerformanceMetrics.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = PerformanceMetrics.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = PerformanceMetrics.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PerformanceMetricSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("performance_metrics", "metric_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PerformanceMetricSlice) copyMatchingRows(from ...*PerformanceMetric) {
	for i, old := range o {
		for _, new := range from {
			if new.MetricID != old.MetricID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PerformanceMetricSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PerformanceMetrics.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PerformanceMetric:
				o.copyMatchingRows(retrieved)
			case []*PerformanceMetric:
				o.copyMatchingRows(retrieved...)
			case PerformanceMetricSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PerformanceMetric or a slice of PerformanceMetric
				// then run the AfterUpdateHooks on the slice
				_, err = PerformanceMetrics.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PerformanceMetricSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PerformanceMetrics.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PerformanceMetric:
				o.copyMatchingRows(retrieved)
			case []*PerformanceMetric:
				o.copyMatchingRows(retrieved...)
			case PerformanceMetricSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PerformanceMetric or a slice of PerformanceMetric
				// then run the AfterDeleteHooks on the slice
				_, err = PerformanceMetrics.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PerformanceMetricSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PerformanceMetricSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PerformanceMetrics.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o PerformanceMetricSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PerformanceMetrics.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PerformanceMetricSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := PerformanceMetrics.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
