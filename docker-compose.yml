services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: hashpost-postgres
    environment:
      POSTGRES_DB: hashpost
      POSTGRES_USER: hashpost
      POSTGRES_PASSWORD: hashpost_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hashpost -d hashpost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hashpost-network

  # Test PostgreSQL database for integration tests
  postgres-test:
    image: postgres:16-alpine
    container_name: hashpost-postgres-test
    environment:
      POSTGRES_DB: hashpost_test
      POSTGRES_USER: hashpost
      POSTGRES_PASSWORD: hashpost_test
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hashpost -d hashpost_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hashpost-network
    profiles:
      - test

  # Application with Air for hot reloading
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: hashpost-app
    ports:
      - "8888:8888"
    volumes:
      # Mount source code for hot reloading
      - .:/app
      # Exclude node_modules and other unnecessary files
      - /app/tmp
      - /app/.git
      # Mount IBE keys from host for persistence across builds
      - ./keys:/app/keys:ro
    environment:
      # Database connection - individual variables for the application
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: hashpost
      DB_PASSWORD: hashpost_dev
      DB_NAME: hashpost
      DB_SSLMODE: disable
      # Database connection - URL format for compatibility
      DATABASE_URL: postgres://hashpost:hashpost_dev@postgres:5432/hashpost?sslmode=disable
      # Air configuration
      AIR_WD: /app
      # Application environment
      ENV: development
      # Migration configuration
      MIGRATIONS_DIR: /app/internal/database/migrations
      # CORS configuration
      CORS_ALLOWED_ORIGINS: http://localhost:3000
      CORS_ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
      CORS_ALLOWED_HEADERS: Content-Type,Authorization,X-Requested-With,Accept,Origin
      CORS_ALLOW_CREDENTIALS: true
      CORS_MAX_AGE: 86400
      # JWT configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_DEVELOPMENT: true
      # IBE system configuration
      IBE_MASTER_KEY_PATH: /app/keys/master.key
      IBE_KEY_VERSION: 1
      IBE_SALT: hashpost_fingerprint_salt_v1
      IBE_KEY_ROTATION_ENABLED: false
      IBE_KEY_ROTATION_INTERVAL: 8760h
      IBE_KEY_ROTATION_GRACE_PERIOD: 720h
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hashpost-network
    # The entrypoint script will handle migrations and starting the app
    restart: unless-stopped

  # UI service with Next.js
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
      target: development
    container_name: hashpost-ui
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reloading
      - ./ui:/app
      - /app/node_modules
      - /app/.next
    environment:
      # API URL pointing to the backend service
      NEXT_PUBLIC_API_URL: http://localhost:8888
      # Next.js configuration
      NODE_ENV: development
    depends_on:
      - app
    networks:
      - hashpost-network
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_test_data:

networks:
  hashpost-network:
    driver: bridge 